(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{593:function(t,a,s){"use strict";s.r(a);var v=s(8),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-字节码"}},[t._v("#")]),t._v(" 1. 字节码")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("语言：跨平台的语言")]),t._v(" "),s("ol",[s("li",[t._v("当"),s("code",[t._v("Java")]),t._v("源代码成功编译成字节码后，如果想在不同的平台上运行，则无需再次编译")]),t._v(" "),s("li",[t._v("这个优势已经不再那么吸引人了。"),s("code",[t._v("Python")]),t._v("、"),s("code",[t._v("PHP")]),t._v("、"),s("code",[t._v("Perl")]),t._v("、"),s("code",[t._v("Ruby")]),t._v("、"),s("code",[t._v("Lisp")]),t._v("等有强大的解释器")]),t._v(" "),s("li",[t._v("跨平台似乎已经称为了一门必选的特性")])]),t._v(" "),s("p",[s("code",[t._v("JVM")]),t._v("：跨语言的平台")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("虚拟机不包括"),s("code",[t._v("Java")]),t._v("在内的任何语言的绑定，它只与"),s("code",[t._v("Class")]),t._v("文件这种特定的二进制文件格式所关联。无论使用何种语言进行软件开发，只要将源文件编译为正确的"),s("code",[t._v("Class")]),t._v("文件，那么这种语言就可以在"),s("code",[t._v("Java")]),t._v("虚拟机上执行。可以说，统一而强大的"),s("code",[t._v("Class")]),t._v("文件结构，就是"),s("code",[t._v("Java")]),t._v("虚拟机的基石、桥梁")]),t._v(" "),s("h3",{attrs:{id:"_1-1-class文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-class文件"}},[t._v("#")]),t._v(" 1.1 Class文件")]),t._v(" "),s("p",[t._v("字节码文件是什么？")]),t._v(" "),s("ul",[s("li",[t._v("源代码经过编译器编译之后便会生成一个字节码文件，字节码是一种二进制的类文件，它的内容是"),s("code",[t._v("JVM")]),t._v("的指令，而不是像"),s("code",[t._v("C/C++")]),t._v("经由编译器直接生成机器码")])]),t._v(" "),s("p",[t._v("什么是字节码指令"),s("code",[t._v("byte code")]),t._v("？")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Java")]),t._v("虚拟机的指令由一个字节长度的、代表着某种特定操作含义的操作码"),s("code",[t._v("opcode")]),t._v("以及跟随其后的零至多个代表此操作所需参数的操作数"),s("code",[t._v("operand")]),t._v("所构成。虚拟机中许多指令并不包含操作数，只有一个操作码")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-字节码文件结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-字节码文件结构"}},[t._v("#")]),t._v(" 1.2 字节码文件结构")]),t._v(" "),s("p",[t._v("以下的所有分析都是针对这个例子")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" add "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("class")]),t._v("类的本质：任何一个"),s("code",[t._v("Class")]),t._v("文件都对应着唯一一个类或接口的定义信息，但反过来说，"),s("code",[t._v("Class")]),t._v("文件实际上它并不一定以磁盘文件的形式存在。"),s("code",[t._v("Class")]),t._v("文件是一组以8位字节为基础单位的二进制流")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("class文件格式")])])]),t._v(" "),s("p",[s("code",[t._v("Class")]),t._v("的结构不像"),s("code",[t._v("XML")]),t._v("等描述语言，由于它没有任何分隔符号。所以在其中的数据项，无论是字节顺序还是数量，都是被严格限定的，哪个字节代表什么含义，长度是多少，先后顺序如何，都不允许改变")]),t._v(" "),s("p",[s("code",[t._v("Class")]),t._v("文件采用一种类似于"),s("code",[t._v("C")]),t._v("语言结构体的方式进行数据存储，这种结构中只有两种数据类型：无符号数和表")]),t._v(" "),s("ul",[s("li",[t._v("无符号数属于基本的基本类型，以"),s("code",[t._v("u1")]),t._v("、"),s("code",[t._v("u2")]),t._v("、"),s("code",[t._v("u4")]),t._v("、"),s("code",[t._v("u8")]),t._v("来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照"),s("code",[t._v("UTF-8")]),t._v("编码构成字符串值")]),t._v(" "),s("li",[t._v("表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯地以"),s("code",[t._v("_info")]),t._v("结尾。表用于描述有层次关系的复合结构的数据，整个"),s("code",[t._v("Class")]),t._v("文件本质上就是一张表。由于表没有固定长度，所以通常会在其前面加上个数说明")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassFile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    u4             magic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 魔数")]),t._v("\n    u2             minor_version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Class文件副版本")]),t._v("\n    u2             major_version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Class文件主版本")]),t._v("\n    u2             constant_pool_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 常量池的长度")]),t._v("\n    cp_info        constant_pool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("constant_pool_count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 常量池")]),t._v("\n    u2             access_flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问标志")]),t._v("\n    u2             this_class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类索引")]),t._v("\n    u2             super_class"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父类索引")]),t._v("\n    u2             interfaces_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接口数量")]),t._v("\n    u2             interfaces"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("interfaces_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接口")]),t._v("\n    u2             fields_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字段数量")]),t._v("\n    field_info     fields"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("fields_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字段")]),t._v("\n    u2             methods_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法数量")]),t._v("\n    method_info    methods"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("methods_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t·\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法")]),t._v("\n    u2             attributes_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 属性数量")]),t._v("\n    attribute_info attributes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attributes_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("说明")]),t._v(" "),s("th",[t._v("长度/字节")]),t._v(" "),s("th",[t._v("数量")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u4")]),t._v(" "),s("td",[t._v("magic")]),t._v(" "),s("td",[t._v("魔数，识别Class文件格式")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("minor_version")]),t._v(" "),s("td",[t._v("副版本号(小版本)")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("major_version")]),t._v(" "),s("td",[t._v("主版本号(大版本)")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("constant_pool_count")]),t._v(" "),s("td",[t._v("常量池计数器")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("cp_info")]),t._v(" "),s("td",[t._v("constant_pool[constant_pool_count-1]")]),t._v(" "),s("td",[t._v("常量池表")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("constant_pool_count-1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("access_flags")]),t._v(" "),s("td",[t._v("访问标识")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("this_class")]),t._v(" "),s("td",[t._v("类索引")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("super_class")]),t._v(" "),s("td",[t._v("父类索引")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("interfaces_count")]),t._v(" "),s("td",[t._v("接口计数器")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("interfaces[interfaces_count]")]),t._v(" "),s("td",[t._v("接口索引集合")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("interfaces_count")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("fields_count")]),t._v(" "),s("td",[t._v("字段计数器")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("field_info")]),t._v(" "),s("td",[t._v("fields[fields_count]")]),t._v(" "),s("td",[t._v("字段表")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("fields_count")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("methods_count")]),t._v(" "),s("td",[t._v("方法计数器")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("method_info")]),t._v(" "),s("td",[t._v("methods[methods_count]")]),t._v(" "),s("td",[t._v("方法表")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("methods_count")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("attributes_count")]),t._v(" "),s("td",[t._v("属性计数器")]),t._v(" "),s("td",[t._v("2")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("attribute_info")]),t._v(" "),s("td",[t._v("attributes[attributes_count]")]),t._v(" "),s("td",[t._v("属性表")]),t._v(" "),s("td",[t._v("n")]),t._v(" "),s("td",[t._v("attributes_count")])])])]),t._v(" "),s("h4",{attrs:{id:"_1-2-1-魔数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-魔数"}},[t._v("#")]),t._v(" 1.2.1 魔数")]),t._v(" "),s("p",[t._v("魔数"),s("code",[t._v("Magic Number")])]),t._v(" "),s("p",[t._v("每个"),s("code",[t._v("Class")]),t._v("文件开头的4个字节的无符号整数称为魔数，它的唯一作用就是确定这个文件是否为一个能被虚拟机接受的有效合法的"),s("code",[t._v("Class")]),t._v("文件。即：魔数是"),s("code",[t._v("Class")]),t._v("文件的标识。")]),t._v(" "),s("p",[t._v("魔数的值固定为"),s("code",[t._v("oXCAFEBABE")]),t._v("，不会改变")]),t._v(" "),s("p",[t._v("如果一个"),s("code",[t._v("Class")]),t._v("文件不以魔数开头，虚拟机在进行文件校验的时候会抛出以下错误")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Error: A JNI error has occurred, please check your installation and try again\nException in thread "main" java.lang.ClassFormatError: Incompatible magic value 3884495332 in class file 包名\n')])])]),s("p",[t._v("使用魔数而不是扩展名来进行识别主要是基于安全方面的考虑，因为扩展名可以随意地改动")]),t._v(" "),s("h4",{attrs:{id:"_1-2-2-文件版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-文件版本号"}},[t._v("#")]),t._v(" 1.2.2 文件版本号")]),t._v(" "),s("p",[t._v("紧接着魔数的4个字节存储的是"),s("code",[t._v("Class")]),t._v("文件的版本号。同样也是4个字节。第五个和第六个字节所代表的含义就是编译的副版本号"),s("code",[t._v("minor_version")]),t._v("，而第七个和第八个字节就是编译的主版本号"),s("code",[t._v("major_version")])]),t._v(" "),s("p",[t._v("它们共同构成了"),s("code",[t._v("class")]),t._v("文件的格式版本号。譬如某个"),s("code",[t._v("Class")]),t._v("文件的主版本号为"),s("code",[t._v("M")]),t._v("，副版本号为"),s("code",[t._v("m")]),t._v("，那么这个"),s("code",[t._v("Class")]),t._v("文件的版本号确定为"),s("code",[t._v("M.m")])]),t._v(" "),s("p",[t._v("版本号和"),s("code",[t._v("Java")]),t._v("编译器的对应关系")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("主版本(十进制)")]),t._v(" "),s("th",[t._v("副版本(十进制)")]),t._v(" "),s("th",[t._v("编译器版本")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("45")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("1.1")])]),t._v(" "),s("tr",[s("td",[t._v("46")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.2")])]),t._v(" "),s("tr",[s("td",[t._v("47")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.3")])]),t._v(" "),s("tr",[s("td",[t._v("48")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.4")])]),t._v(" "),s("tr",[s("td",[t._v("49")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.5")])]),t._v(" "),s("tr",[s("td",[t._v("50")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.6")])]),t._v(" "),s("tr",[s("td",[t._v("51")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.7")])]),t._v(" "),s("tr",[s("td",[t._v("52")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.8")])]),t._v(" "),s("tr",[s("td",[t._v("53")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.9")])]),t._v(" "),s("tr",[s("td",[t._v("54")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.10")])]),t._v(" "),s("tr",[s("td",[t._v("55")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1.11")])])])]),t._v(" "),s("p",[t._v("不同版本的"),s("code",[t._v("Java")]),t._v("编译器编译的"),s("code",[t._v("Class")]),t._v("文件对应的版本是不一样的。目前，高版本的"),s("code",[t._v("Java")]),t._v("虚拟机可以执行由低版本编译器生成的字节码，但是低版本的"),s("code",[t._v("Java")]),t._v("虚拟机不能执行由高版本编译器生成的"),s("code",[t._v("Class")]),t._v("文件。")]),t._v(" "),s("h4",{attrs:{id:"_1-2-3-常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-常量池"}},[t._v("#")]),t._v(" 1.2.3 常量池")]),t._v(" "),s("p",[t._v("常量池是"),s("code",[t._v("Class")]),t._v("文件中内容最为丰富的区域之一。常量池对于"),s("code",[t._v("Class")]),t._v("文件中的字段和方法解析也有着至关重要的作用。随着"),s("code",[t._v("Java")]),t._v("虚拟机的不断发展，常量池的内容也日渐丰富。可以说，常量池是整个"),s("code",[t._v("Class")]),t._v("文件的基石。")]),t._v(" "),s("p",[t._v("在版本号之后，紧跟着的是常量池的数量，以及若干个常量池表项。")]),t._v(" "),s("p",[t._v("常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项"),s("code",[t._v("u2")]),t._v("类型的无符号数，代表常量池容量计数值"),s("code",[t._v("constant_pool_count")]),t._v("。与"),s("code",[t._v("Java")]),t._v("中语言习惯不一样的是，这个容量计数是从1而不是0开始的")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("数量")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("constant_pool_count")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("cp_info")]),t._v(" "),s("td",[t._v("constant_pool[constant_pool_count-1]")]),t._v(" "),s("td",[t._v("constant_pool_count-1")])])])]),t._v(" "),s("p",[t._v("由上表可以看出，"),s("code",[t._v("Class")]),t._v("文件使用了一个前置的容量计数器"),s("code",[t._v("constant_pool_count")]),t._v("加若干个连续的数据项"),s("code",[t._v("constant_pool")]),t._v("的形式来描述常量池的内容。我们把这一系列连续常量池数据称为常量池集合")]),t._v(" "),s("ul",[s("li",[t._v("常量池表项中，用于存放编译时期生成的各种字面量和符号引用，这部分内容将在类加载后进入"),s("strong",[t._v("方法区的运行时常量池")]),t._v("中存放")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("常量池计数器")])])]),t._v(" "),s("p",[t._v("由于常量池的数量不固定，时长时短，所以需要放置两个字节来表示常量池容量计数值")]),t._v(" "),s("p",[t._v("常量池容量计数值"),s("code",[t._v("u2")]),t._v("类型：从1开始，表示常量池中有多少项常量。即"),s("code",[t._v("constant_pool_count = 1")]),t._v("表示常量池中有"),s("code",[t._v("0")]),t._v("个常量池项")]),t._v(" "),s("p",[t._v("通常我们写代码时都是从0开始的，但是这里的常量池却是从1开始，因为它把第0项常量空出来了。这是为了满足后面某些执行常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可用索引值0来表示")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("常量池表")])])]),t._v(" "),s("p",[s("code",[t._v("constant_pool")]),t._v("示一种表结构，以"),s("code",[t._v("1~constant_pool_count - 1")]),t._v("为索引。表明了后面有多少个常量项")]),t._v(" "),s("p",[t._v("常量池主要存放两大类常量：字面量"),s("code",[t._v("Literal")]),t._v("和符号引用"),s("code",[t._v("Symbolic References")])]),t._v(" "),s("p",[t._v("它包含了"),s("code",[t._v("class")]),t._v("文件结构及其子结构中引用的所有字符串常量、类或接口名、字段名和其他常量。常量池中的每一项都具备相同的特征。第一个字节作为类型标记，用于确定该项的格式，这个字节被称为"),s("code",[t._v("tag byte")]),t._v("(标记字节、标签字节)")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("标志(或标识)")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("CONSTANT_Utf8_info")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("UTF-8编码的字符串")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Integer_info")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("整型字面量")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Float_info")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("浮点型字面量")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Long_info")]),t._v(" "),s("td",[t._v("5")]),t._v(" "),s("td",[t._v("长整型字面量")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Double_info")]),t._v(" "),s("td",[t._v("6")]),t._v(" "),s("td",[t._v("双精度浮点型字面量")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Class_info")]),t._v(" "),s("td",[t._v("7")]),t._v(" "),s("td",[t._v("类或接口的符号引用")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_String_info")]),t._v(" "),s("td",[t._v("8")]),t._v(" "),s("td",[t._v("字符串类型字面量")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Fieldref_info")]),t._v(" "),s("td",[t._v("9")]),t._v(" "),s("td",[t._v("字段的符号引用")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_Methodref_info")]),t._v(" "),s("td",[t._v("10")]),t._v(" "),s("td",[t._v("类中方法的符号引用")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_InterfaceMethodref_info")]),t._v(" "),s("td",[t._v("11")]),t._v(" "),s("td",[t._v("接口中方法的符号引用")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_NameAndType_info")]),t._v(" "),s("td",[t._v("12")]),t._v(" "),s("td",[t._v("字段或方法的符号引用")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_MethodHandle_info")]),t._v(" "),s("td",[t._v("15")]),t._v(" "),s("td",[t._v("表示方法句柄")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_MethodType_info")]),t._v(" "),s("td",[t._v("16")]),t._v(" "),s("td",[t._v("标志方法类型")])]),t._v(" "),s("tr",[s("td",[t._v("CONSTANT_InvokeDynamic_info")]),t._v(" "),s("td",[t._v("18")]),t._v(" "),s("td",[t._v("表示一个动态方法调用点")])])])]),t._v(" "),s("p",[t._v("标志中所包含的详细信息")]),t._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210604160614.png"}}),t._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210604161631.png"}}),t._v(" "),s("ol",[s("li",[t._v("这14种表(或者常量项结构)的共同特点是：表开始的第一位是一个"),s("code",[t._v("u1")]),t._v("类型的标志位"),s("code",[t._v("tag")]),t._v("，代表当前这个常量项使用的是哪种表结构，即哪种常量类型")]),t._v(" "),s("li",[t._v("在常量池列表中，"),s("code",[t._v("CONSTANT_Utf8_info")]),t._v("常量项是一种使用改进过的"),s("code",[t._v("UTF-8")]),t._v("编码格式来存储诸如文字字符串、类或者接口的全限定名、字段或者方法的简单名称以及描述符等常量字符串信息")]),t._v(" "),s("li",[t._v("这14种常量项结构还有一个特点是，其中13个常量项占用的字节固定，只有"),s("code",[t._v("CONSTANT_Utf8_info")]),t._v("占用字节不固定，其大小由"),s("code",[t._v("length")]),t._v("决定。为什么呢？因为从常量池存放的内容可知，其存放的是字面量和符号引用，最终这些内容都会是一个字符串，这些字符串的大小是在编写程序时才确定")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("字面量和符号引用")])])]),t._v(" "),s("p",[t._v("字面量包含两类，文本字符串和声明为"),s("code",[t._v("final")]),t._v("的常量值")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" NUM "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("符号引用包含三类：类和接口的全限定名，字段的名称和秒舒服，方法的名称和描述符")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("全限定名："),s("code",[t._v("java/util/List")]),t._v('这个就是类的全限定名，仅仅是把包名的"."替换成"/"，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会加入一个";"表示全限定名结束')])]),t._v(" "),s("li",[s("p",[t._v("简单名称：简单名称是指没有类型和参数修饰的方法或者字段名称，比如下面例子中，"),s("code",[t._v("add")]),t._v("和"),s("code",[t._v("num")]),t._v("就是名称")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" add "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("描述符：描述符的作用是用来描述字段的数据类型、方法的参数列表(包括数量、类型以及顺序)和返回值。根据描述规则，基本数据类型("),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("char")]),t._v("、"),s("code",[t._v("double")]),t._v("、"),s("code",[t._v("float")]),t._v("、"),s("code",[t._v("int")]),t._v("、"),s("code",[t._v("long")]),t._v("、"),s("code",[t._v("short")]),t._v("、"),s("code",[t._v("boolean")]),t._v(")以及代表无返回值的"),s("code",[t._v("void")]),t._v("类型都用一个大写字符来表示，而对象类型则用字符"),s("code",[t._v("L")]),t._v("加对象的全限定名来表示")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("标志符")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("B")]),t._v(" "),s("td",[t._v("基本数据类型byte")])]),t._v(" "),s("tr",[s("td",[t._v("C")]),t._v(" "),s("td",[t._v("基本数据类型char")])]),t._v(" "),s("tr",[s("td",[t._v("D")]),t._v(" "),s("td",[t._v("基本数据类型double")])]),t._v(" "),s("tr",[s("td",[t._v("F")]),t._v(" "),s("td",[t._v("基本数据类型float")])]),t._v(" "),s("tr",[s("td",[t._v("I")]),t._v(" "),s("td",[t._v("基本数据类型int")])]),t._v(" "),s("tr",[s("td",[t._v("J")]),t._v(" "),s("td",[t._v("基本数据类型long")])]),t._v(" "),s("tr",[s("td",[t._v("S")]),t._v(" "),s("td",[t._v("基本数据类型short")])]),t._v(" "),s("tr",[s("td",[t._v("Z")]),t._v(" "),s("td",[t._v("基本数据类型boolean")])]),t._v(" "),s("tr",[s("td",[t._v("V")]),t._v(" "),s("td",[t._v("代表void类型")])]),t._v(" "),s("tr",[s("td",[t._v("L")]),t._v(" "),s("td",[t._v("对象类型，比如：Ljava/lang/Object")])]),t._v(" "),s("tr",[s("td",[t._v("[")]),t._v(" "),s("td",[t._v("数组类型，代表一维数组。比如：double[][] is [[[D")])])])]),t._v(" "),s("p",[t._v("用描述符描述方法时，按照先参数列表，后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号"),s("code",[t._v("()")]),t._v("之内。如方法"),s("code",[t._v("java.lang.String toString()")]),t._v("的描述符为"),s("code",[t._v("()Ljava/lang/String;")]),t._v("方法"),s("code",[t._v("int abc(int[] x, int y)")]),t._v("的描述符为"),s("code",[t._v("([II) I")])]),t._v(" "),s("p",[t._v("补充：虚拟机在加载"),s("code",[t._v("Class")]),t._v("文件时才会进行动态链接，也就是说。"),s("code",[t._v("Class")]),t._v("文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法引用不经过转换时无法直接被虚拟机使用的。当虚拟机运行时，需要从常量池中获得对应的符号引用，在类加载过程中将其替换为直接引用，并翻译到具体的内存地址中")]),t._v(" "),s("p",[t._v("符号引用和直接引用的区别和联系")]),t._v(" "),s("ul",[s("li",[t._v("符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，应用的目标并不一定已经加载到了内存中")]),t._v(" "),s("li",[t._v("直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号一弄可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有个直接引用，那说明引用的目标必定已经存在于内存之中了")])])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("常量池分析")])])]),t._v(" "),s("p",[t._v("对应的常量池字节码")]),t._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210604163037.png"}}),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#1 = Methodref          #4.#18         // java/lang/Object."<init>":()V\n#2 = Fieldref           #3.#19         // com/valid/Demo.num:I\n#3 = Class              #20            // com/valid/Demo\n#4 = Class              #21            // java/lang/Object\n#5 = Utf8               num\n#6 = Utf8               I\n#7 = Utf8               <init>\n#8 = Utf8               ()V\n#9 = Utf8               Code\n#10 = Utf8              LineNumberTable\n#11 = Utf8              LocalVariableTable\n#12 = Utf8              this\n#13 = Utf8              Lcom/valid/Demo;\n#14 = Utf8              add\n#15 = Utf8              ()I\n#16 = Utf8              SourceFile\n#17 = Utf8              Demo.java\n#18 = NameAndType       #7:#8          // "<init>":()V\n#19 = NameAndType       #5:#6          // num:I\n#20 = Utf8              com/valid/Demo\n#21 = Utf8              java/lang/Object\n')])])]),s("p",[t._v("总结：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("常量池：可以理解为"),s("code",[t._v("Class")]),t._v("文件之中的资源仓库，它是"),s("code",[t._v("Class")]),t._v("文件结构中与其他项目关联最多的数据类型(后面的很多数据类型都会指向此处)，也是占用"),s("code",[t._v("Class")]),t._v("文件空间最大的数据项目之一")])]),t._v(" "),s("li",[s("p",[t._v("常量池中为什么要包含这些内容?")]),t._v(" "),s("p",[s("code",[t._v("java")]),t._v("代码在进行"),s("code",[t._v("Javac")]),t._v("编译的时候，并不像"),s("code",[t._v("C/C++")]),t._v("那样有“连接”这一步骤，而是在虚拟机加载"),s("code",[t._v("Class")]),t._v("文件的时候进行动态链接。也就是说，在"),s("code",[t._v("Class")]),t._v("文件中不会保存各个方法、字段的最终内存布局信息，因此这些字段、方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机使用。当虚拟机运行的时候，需要从常量池中获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。")])])]),t._v(" "),s("h4",{attrs:{id:"_1-2-4-访问标识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-访问标识"}},[t._v("#")]),t._v(" 1.2.4 访问标识")]),t._v(" "),s("p",[t._v("访问标识("),s("code",[t._v("access_flag")]),t._v("、访问标志、访问标记)：在常量池后，紧跟着访问标记。该标记使用两个字节表示，用于识别一些类或者接口层次的访问信息，包括：这个"),s("code",[t._v("Class")]),t._v("是类还是接口；是否定义为"),s("code",[t._v("public")]),t._v("类型；是否定位为"),s("code",[t._v("abstract")]),t._v("类型；如果是类的话，是否被声明为"),s("code",[t._v("final")]),t._v("等。各种访问标记如下")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("标志名称")]),t._v(" "),s("th",[t._v("标志值")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ACC_PUBLIC")]),t._v(" "),s("td",[t._v("0x0001")]),t._v(" "),s("td",[t._v("标志为public类型")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_FINAL")]),t._v(" "),s("td",[t._v("0x0010")]),t._v(" "),s("td",[t._v("标志被声明为final，只有类可以设置")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_SUPER")]),t._v(" "),s("td",[t._v("0x0020")]),t._v(" "),s("td",[t._v("标志允许使用invokespecial字节码指令的新语义，JDK1.0.2之后编译出的文件这个标志为默认为真(使增强方法调用父类方法)")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_INTERFACE")]),t._v(" "),s("td",[t._v("0x0200")]),t._v(" "),s("td",[t._v("标志这是一个接口")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_ABSTRACT")]),t._v(" "),s("td",[t._v("0x0400")]),t._v(" "),s("td",[t._v("是否为abstract类型，对于接口或者抽象类来说，次标志值为真，其他类型为假")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_SYNTHETIC")]),t._v(" "),s("td",[t._v("0x1000")]),t._v(" "),s("td",[t._v("标志此类并非由用户代码产生(即：由编译器产生的类，没有源码对应)")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_ANNOTATION")]),t._v(" "),s("td",[t._v("0x2000")]),t._v(" "),s("td",[t._v("标志这是一个注解")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_ENUM")]),t._v(" "),s("td",[t._v("0x4000")]),t._v(" "),s("td",[t._v("标志这是一个枚举")])])])]),t._v(" "),s("p",[t._v("类的访问权限通常为"),s("code",[t._v("ACC_")]),t._v("开头的常量")]),t._v(" "),s("p",[t._v("每一种类型的都表示是通过设置访问标记的32位中的特定位来实现的。比如，若是"),s("code",[t._v("public final")]),t._v("的类，则该标记为"),s("code",[t._v("ACC_PUBLIC | ACC_FINAL")])]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("ACC_SUPER")]),t._v("可以让类更准确地定位到父类的方法"),s("code",[t._v("super.method()")]),t._v("，现代编译器都会设置并且使用这个标记")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("补充说明")])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("带有"),s("code",[t._v("ACC_INTERFACE")]),t._v("标志的"),s("code",[t._v("class")]),t._v("文件表示的是接口而不是类，反之则表示的是类而不是接口")]),t._v(" "),s("p",[t._v("如果一个"),s("code",[t._v("class")]),t._v("文件被设置了"),s("code",[t._v("ACC_INTERFACE")]),t._v("标志，那么同时也得设置"),s("code",[t._v("ACC_ABSTRACT")]),t._v("标志。同时它不能再设置"),s("code",[t._v("ACC_FINAL")]),t._v("、"),s("code",[t._v("ACC_SUPER")]),t._v("或"),s("code",[t._v("ACC_ENUM")]),t._v("标志")]),t._v(" "),s("p",[t._v("如果没有设置"),s("code",[t._v("ACC_INTERFACE")]),t._v("标志，那么这个"),s("code",[t._v("class")]),t._v("文件可以具有上表除"),s("code",[t._v("ACC_ANNOTATION")]),t._v("外的其他的所有标志。当然，"),s("code",[t._v("ACC_FINAL")]),t._v("和"),s("code",[t._v("ACC_ABSTRACT")]),t._v("这类互斥的标志除外。这两个标志不得同时设置")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("ACC_SUPER")]),t._v("标志用于确定类或接口里面的"),s("code",[t._v("invokespecial")]),t._v("指令使用的哪一种执行语义。针对"),s("code",[t._v("Java")]),t._v("虚拟机指令集的编译器都应当设置这个标志。对于"),s("code",[t._v("JDK8")]),t._v("及后续版本来说，无论"),s("code",[t._v("class")]),t._v("文件中这个标志的实际值是什么，也不管"),s("code",[t._v("class")]),t._v("文件的版本")])]),t._v(" "),s("li",[s("p",[t._v("注解类型必须设置"),s("code",[t._v("ACC_ANNOTATION")]),t._v("标志。如果设置了"),s("code",[t._v("ACC_ANNOTATION")]),t._v("标志，那么也必须设置"),s("code",[t._v("ACC_INTERFACE")]),t._v("标志")])])]),t._v(" "),s("h4",{attrs:{id:"_1-2-5-类、父类、接口索引集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-类、父类、接口索引集合"}},[t._v("#")]),t._v(" 1.2.5 类、父类、接口索引集合")]),t._v(" "),s("p",[t._v("在访问标记之后，会指定该类的类型、父类类别以及实现的接口")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("长度")]),t._v(" "),s("th",[t._v("符号")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("this_class")]),t._v(" "),s("td",[t._v("当前类索引")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("super_class")]),t._v(" "),s("td",[t._v("父类索引")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("interfaces_count")]),t._v(" "),s("td",[t._v("接口数量")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("interfaces[interfaces_count]")]),t._v(" "),s("td",[t._v("接口索引集合")])])])]),t._v(" "),s("p",[t._v("这三项数据来确定这个类的继承关系")]),t._v(" "),s("ol",[s("li",[t._v("类索引用于确定这个类的全限定名")]),t._v(" "),s("li",[t._v("父类索引用于确定这个类的父类的全限定名。由于"),s("code",[t._v("Java")]),t._v("语言不允许多重继承，所以父类索引只有一个，除了"),s("code",[t._v("java.lang.Object")]),t._v("之外，所有的"),s("code",[t._v("Java")]),t._v("类都有父类，因此出了"),s("code",[t._v("java.lang.Object")]),t._v("外，所有"),s("code",[t._v("Java")]),t._v("类的父类索引都不为0")]),t._v(" "),s("li",[t._v("接口索引集合就是用来描述这个类实现了哪些接口，这些被实现的接口将按"),s("code",[t._v("implements")]),t._v("语句(如果这个类本身是一个接口，则应当是"),s("code",[t._v("extends")]),t._v("语句)后的接口顺序从左到右排列在接口索引集合中")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("this_class(类索引)")])])]),t._v(" "),s("p",[t._v("2字节无符号整数，指向常量池的索引。它提供了类的全限定名。如"),s("code",[t._v("com/valid/Demo")]),t._v("。"),s("code",[t._v("this_class")]),t._v("的值必须是对常量池表中某项的一个有效索引值。常量池在这个索引处必须为"),s("code",[t._v("CONSTANT_Class_info")]),t._v("累心结构体，该结构体表示这个"),s("code",[t._v("class")]),t._v("文件所定义的类或接口")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("super_class(父类索引)")])])]),t._v(" "),s("p",[t._v("2字节无符号整数，指向常量池的索引。它提供了当前类的父类的全限定名。如果我们没有继承任何类，其默认继承的是"),s("code",[t._v("java/lang/Object")]),t._v("类，同时，由于"),s("code",[t._v("java")]),t._v("不支持多继承，所以其父类只能有一个")]),t._v(" "),s("p",[s("code",[t._v("super_class")]),t._v("指向的父类不能是"),s("code",[t._v("final")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("interfaces")])])]),t._v(" "),s("p",[t._v("指向常量池索引集合，它提供了一个符号引用到所有已实现的接口")]),t._v(" "),s("p",[t._v("由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引，表示接口的每个索引也是一个指向常量池的"),s("code",[t._v("CONSTANT_CLASS")]),t._v("(当然这里必须是接口，而不是类)")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("interfaces_count")]),t._v("接口计数器：值表示当前类或接口的直接接口数量")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("interfaces[]")]),t._v("接口索引集合")]),t._v(" "),s("p",[s("code",[t._v("interfaces[]")]),t._v("中每个成员的值必须是对常量池表中某项的有效索引值，它的长度为"),s("code",[t._v("interfaces_count")]),t._v("。每个成员"),s("code",[t._v("interfaces[i]")]),t._v("必须为"),s("code",[t._v("CONSTANT_Class_info")]),t._v("结构，其中"),s("code",[t._v("0 <= i < interfaces_count")]),t._v("。在"),s("code",[t._v("intefaces[]")]),t._v("中，个成员所表示的接口顺序和对应的源代码中给定的接口顺序(从左至右)一样，即"),s("code",[t._v("interfaces[0]")]),t._v("对应的是源代码中最左边的接口")])])]),t._v(" "),s("h4",{attrs:{id:"_1-2-6-字段表集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-6-字段表集合"}},[t._v("#")]),t._v(" 1.2.6 字段表集合")]),t._v(" "),s("p",[s("code",[t._v("fields")]),t._v("字段表集合")]),t._v(" "),s("p",[t._v("用于描述接口或类中声明的变量。字段"),s("code",[t._v("field")]),t._v("包括类级变量以及实例变量，但是不包括方法内部、代码块内部声明的局部变量")]),t._v(" "),s("p",[t._v("字段叫什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述")]),t._v(" "),s("p",[t._v("它指向常量池索引集合，它描述了每个字段的完整信息。比如字段的标识符、访问修饰符("),s("code",[t._v("public")]),t._v("、"),s("code",[t._v("private")]),t._v("或"),s("code",[t._v("protected")]),t._v(")、是类变量还是实例变量("),s("code",[t._v("static")]),t._v("修饰符)、是否是常量("),s("code",[t._v("final")]),t._v("修饰符)")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意")])])]),t._v(" "),s("p",[t._v("字段表集合中不会列出从父类或者实现的接口中继承而来的字段，但有可能列出原本"),s("code",[t._v("Java")]),t._v("代码中不存的字段。譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部实例的字段")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java")]),t._v("语言中字段是无法重载的，两个字段的数据类型、修饰符不管是否相同，都必须使用不一样的名称，但是对于字节码来讲，如果两个字段的描述符不一致，那字段重名就是合法的")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("字段计数器")])])]),t._v(" "),s("p",[s("code",[t._v("fields_count")]),t._v("字段计数器")]),t._v(" "),s("p",[s("code",[t._v("fields_count")]),t._v("的值表示当前"),s("code",[t._v("class")]),t._v("文件"),s("code",[t._v("fields")]),t._v("表的成员个数。使用两个字节来表示")]),t._v(" "),s("p",[s("code",[t._v("fields")]),t._v("表中每个成员都是一个"),s("code",[t._v("field_info")]),t._v("结构，用于表示该类或接口所声明的所有类字段或者实例字段，不包括方法内部声明的变量，也不包括从父类或从父接口继承的那些字段")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("字段表")])])]),t._v(" "),s("p",[s("code",[t._v("fields[]")]),t._v("字段表")]),t._v(" "),s("p",[s("code",[t._v("fields")]),t._v("表中的每个成员都必须是一个"),s("code",[t._v("fields_info")]),t._v("结构的数据项，用于表示当前类或接口中某个字段的完整描述")]),t._v(" "),s("p",[t._v("一个字段的信息包括如下信息，这些信息中国年，各个修饰符都是布尔值，要么有，要么没有")]),t._v(" "),s("ul",[s("li",[t._v("作用域("),s("code",[t._v("public")]),t._v("、"),s("code",[t._v("private")]),t._v("、"),s("code",[t._v("protected")]),t._v("修饰符)")]),t._v(" "),s("li",[t._v("是实例变量还是类变量(是否有"),s("code",[t._v("static")]),t._v("修饰)")]),t._v(" "),s("li",[t._v("可变性")]),t._v(" "),s("li",[t._v("并发可见性("),s("code",[t._v("volatile")]),t._v("修饰符，是否强制从主存读写)")]),t._v(" "),s("li",[t._v("是否可序列化("),s("code",[t._v("transient")]),t._v("修饰符)")]),t._v(" "),s("li",[t._v("字段数据类型(基本数据类型、对象、数组)")]),t._v(" "),s("li",[t._v("字段名称")])]),t._v(" "),s("p",[t._v("字段表结构")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("含义")]),t._v(" "),s("th",[t._v("数量")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("access_flages")]),t._v(" "),s("td",[t._v("访问标志")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("name_index")]),t._v(" "),s("td",[t._v("字段名索引")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("descriptor_index")]),t._v(" "),s("td",[t._v("描述符索引")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("attributes_count")]),t._v(" "),s("td",[t._v("属性计数器")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("attribute_info")]),t._v(" "),s("td",[t._v("attributes")]),t._v(" "),s("td",[t._v("属性集合")]),t._v(" "),s("td",[t._v("attributes_count")])])])]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("访问标识")]),t._v("：这些访问标识用于记录字段是否被某个关键字所修饰")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("标志名称")]),t._v(" "),s("th",[t._v("标志值")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ACC_PUBLIC")]),t._v(" "),s("td",[t._v("0x0001")]),t._v(" "),s("td",[t._v("字段是否为public")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_PRIVATE")]),t._v(" "),s("td",[t._v("0x0002")]),t._v(" "),s("td",[t._v("字段是否为private")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_PROTECTED")]),t._v(" "),s("td",[t._v("0x0004")]),t._v(" "),s("td",[t._v("字段是否为protected")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_STATIC")]),t._v(" "),s("td",[t._v("0x0008")]),t._v(" "),s("td",[t._v("字段是否为static")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_FINAL")]),t._v(" "),s("td",[t._v("0x0010")]),t._v(" "),s("td",[t._v("字段是否为final")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_VOLATILE")]),t._v(" "),s("td",[t._v("0x0040")]),t._v(" "),s("td",[t._v("字段是否为volatile")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_TRANSTENT")]),t._v(" "),s("td",[t._v("0x0080")]),t._v(" "),s("td",[t._v("字段是否为transient")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_SYNCHETIC")]),t._v(" "),s("td",[t._v("0x1000")]),t._v(" "),s("td",[t._v("字段是否由编译器产生")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_ENUM")]),t._v(" "),s("td",[t._v("ox4000")]),t._v(" "),s("td",[t._v("字段是否为enum")])])])])]),t._v(" "),s("li",[s("p",[t._v("字段名索引：根据字段名索引的值，查询常量池中的指定索引项即可")])]),t._v(" "),s("li",[s("p",[t._v("描述符索引")]),t._v(" "),s("p",[t._v("描述符的作用是用来描述字段的数据类型、方法的参数列表(包含数量、类型以及顺序)和返回值。根据描述符的规则，基本数据类型("),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("char")]),t._v("、"),s("code",[t._v("double")]),t._v("、"),s("code",[t._v("float")]),t._v("、"),s("code",[t._v("int")]),t._v("、"),s("code",[t._v("long")]),t._v("、"),s("code",[t._v("short")]),t._v("、"),s("code",[t._v("boolean")]),t._v(")及代表无返回值的"),s("code",[t._v("void")]),t._v("类型都用一个大写字母来表示，而对象则用字符"),s("code",[t._v("L")]),t._v("加对象的全限定名来表示")])]),t._v(" "),s("li",[s("p",[t._v("属性表集合")]),t._v(" "),s("p",[t._v("一个字段还可能拥有一些属性，用于存储更多的额外信息，比如初始化值、一些注释信息等。属性个数存放在"),s("code",[t._v("attribute_count")]),t._v("中，属性具体内容存放在"),s("code",[t._v("attributes")]),t._v("数组中")]),t._v(" "),s("p",[t._v("以常属性为例，结构为：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ConstantValue_attribute{\n\tu2 attribute_name_index;\n\tu4 attribute_length;\n\tu2 constantValue_index;\n}\n")])])]),s("p",[t._v("对于常属性而言，"),s("code",[t._v("attribute_length")]),t._v("值恒为2")])])]),t._v(" "),s("h4",{attrs:{id:"_1-2-7-方法表集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-7-方法表集合"}},[t._v("#")]),t._v(" 1.2.7 方法表集合")]),t._v(" "),s("p",[t._v("方法表集合"),s("code",[t._v("methods")]),t._v("：指向常量池索引集合，它完整描述了每个方法的签名")]),t._v(" "),s("ul",[s("li",[t._v("在解码文件中，每一个"),s("code",[t._v("method_info")]),t._v("项都对应着一个类或者接口中的方法信息。比如方法的访问修饰符("),s("code",[t._v("public")]),t._v("、"),s("code",[t._v("private")]),t._v("、"),s("code",[t._v("protected")]),t._v(")，方法的返回值类型以及方法的参数信息等")]),t._v(" "),s("li",[t._v("如果这个方法不是抽象的或者不是"),s("code",[t._v("native")]),t._v("的，那么字节码中会体现出来")]),t._v(" "),s("li",[t._v("一方面，"),s("code",[t._v("method")]),t._v("表只描述当前类或接口中声明的方法，不包括从父类或父接口继承的方法。另一方面，"),s("code",[t._v("methods")]),t._v("表有可能会出现由编译器自动添加的方法，最典型的便是编译器产生的方法信息(比如：类(接口)初始化方法<clinit>()和实例初始化方法<init>())")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意")])])]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java")]),t._v("语言中，要重载"),s("code",[t._v("overload")]),t._v("一个方法，出了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名，特征签名就是一个方法中各个参数在常量池中的字段符号引用的集合，也就是因为返回值不会包含在特征签名之中，因此"),s("code",[t._v("Java")]),t._v("语言里无法仅仅依靠返回值的不同来对一个已有的方法进行重载。但是在"),s("code",[t._v("Class")]),t._v("文件格式中，特征签名的范围更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法共存于同一个"),s("code",[t._v("class")]),t._v("文件中国年")]),t._v(" "),s("p",[t._v("也就是说，尽管"),s("code",[t._v("Java")]),t._v("语法规范中并不允许在一个类或者接口中声明多个方法签名相同的方法，但是和"),s("code",[t._v("Java")]),t._v("语法规范相反，字节码文件中却恰恰允许存放多个方法签名相同的方法，唯一的条件就是这些方法之间的返回值不能相同")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("方法表")])])]),t._v(" "),s("p",[s("code",[t._v("methods[]")]),t._v("方法表")]),t._v(" "),s("p",[s("code",[t._v("methods")]),t._v("表中的每个成员都必须是一个"),s("code",[t._v("method_info")]),t._v("结构，用于表示当前类或接口中某个方法的完整描述。如果某个"),s("code",[t._v("method_info")]),t._v("结构的"),s("code",[t._v("access_flags")]),t._v("项既没有设置"),s("code",[t._v("ACC_MATIVE")]),t._v("标志也没有设置"),s("code",[t._v("ACC_ABSTRACT")]),t._v("标志，那么该结构中也应包含实现这个方法所用的"),s("code",[t._v("Java")]),t._v("虚拟机指令")]),t._v(" "),s("p",[s("code",[t._v("method_info")]),t._v("结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法和类或接口初始化方法")]),t._v(" "),s("p",[t._v("方法表的结构实际跟字段表是一样的，方法表结构如下")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("含义")]),t._v(" "),s("th",[t._v("数量")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("access_flages")]),t._v(" "),s("td",[t._v("访问标志")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("name_index")]),t._v(" "),s("td",[t._v("方法名索引")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("descriptior_index")]),t._v(" "),s("td",[t._v("描述符索引")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("attributes_count")]),t._v(" "),s("td",[t._v("属性计数器")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("attribute_info")]),t._v(" "),s("td",[t._v("attributes")]),t._v(" "),s("td",[t._v("属性集合")]),t._v(" "),s("td",[t._v("attributes_count")])])])]),t._v(" "),s("p",[t._v("方法表访问标志，跟字段表一样，方法表也有访问标志，而且他们的标志有部分相同，部分不同，方法表的具体访问标志如下")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("标记名")]),t._v(" "),s("th",[t._v("值")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ACC_PUBLIC")]),t._v(" "),s("td",[t._v("0x0001")]),t._v(" "),s("td",[t._v("public，方法可以从包外访问")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_PRIVATE")]),t._v(" "),s("td",[t._v("0x0002")]),t._v(" "),s("td",[t._v("private，方法只能本类中访问")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_PROTECTED")]),t._v(" "),s("td",[t._v("0x0004")]),t._v(" "),s("td",[t._v("protected，方法在自身和子类可以访问")])]),t._v(" "),s("tr",[s("td",[t._v("ACC_STATIC")]),t._v(" "),s("td",[t._v("0x0008")]),t._v(" "),s("td",[t._v("static，静态方法")])])])]),t._v(" "),s("h4",{attrs:{id:"_1-2-8-属性表集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-8-属性表集合"}},[t._v("#")]),t._v(" 1.2.8 属性表集合")]),t._v(" "),s("p",[t._v("属性表集合"),s("code",[t._v("attributes")])]),t._v(" "),s("p",[t._v("方法表集合之后的属性表集合，指的是"),s("code",[t._v("class")]),t._v("文件所携带的辅助信息，比如该"),s("code",[t._v("class")]),t._v("文件的源文件的名称。以及任何带有"),s("code",[t._v("RetentionPolicy.CLASS")]),t._v("或者"),s("code",[t._v("RetentionPolicy.RUNTIME")]),t._v("的注解。这类信息通常被用于"),s("code",[t._v("Java")]),t._v("虚拟机的验证和运行，以及"),s("code",[t._v("Java")]),t._v("程序的调试，一般无需深入了解")]),t._v(" "),s("p",[t._v("此外，字段表、方法表都可以有自己的属性表。用于描述某些场景专有的信息")]),t._v(" "),s("p",[t._v("属性表集合的限制没有那么严格，不要求各个属性具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息，但是"),s("code",[t._v("Java")]),t._v("虚拟机运行时会忽略它不认识的属性")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("属性的通用格式")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("数量")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("attribute_name_index")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("属性名索引")])]),t._v(" "),s("tr",[s("td",[t._v("u4")]),t._v(" "),s("td",[t._v("attribute_length")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("属性长度")])]),t._v(" "),s("tr",[s("td",[t._v("u1")]),t._v(" "),s("td",[t._v("info")]),t._v(" "),s("td",[t._v("attribute_length")]),t._v(" "),s("td",[t._v("属性表")])])])]),t._v(" "),s("p",[t._v("只需说明属性的名称以及占用位数的长度即可，属性表具体的结构可以去自定义")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("属性类型")])])]),t._v(" "),s("p",[t._v("属性表实际上可以有很多类型，上面看到的"),s("code",[t._v("Code")]),t._v("属性只是其中一种，"),s("code",[t._v("Java8")]),t._v("里面定义了23中属性，下面这些属性是虚拟机中预定义的属性")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("属性名称")]),t._v(" "),s("th",[t._v("使用位置")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Code")]),t._v(" "),s("td",[t._v("方法表")]),t._v(" "),s("td",[t._v("Java代码编译成的字节码指令")])]),t._v(" "),s("tr",[s("td",[t._v("ConstantValue")]),t._v(" "),s("td",[t._v("字段表")]),t._v(" "),s("td",[t._v("final关键字定义的常量池")])]),t._v(" "),s("tr",[s("td",[t._v("Deprecated")]),t._v(" "),s("td",[t._v("类、方法，字段表")]),t._v(" "),s("td",[t._v("被声明为deprecated的方法和字段")])]),t._v(" "),s("tr",[s("td",[t._v("Exceptions")]),t._v(" "),s("td",[t._v("方法表")]),t._v(" "),s("td",[t._v("方法抛出的异常")])]),t._v(" "),s("tr",[s("td",[t._v("EnclosingMethod")]),t._v(" "),s("td",[t._v("类文件")]),t._v(" "),s("td",[t._v("仅当一个类为局部类或者匿名类时才能拥有这个属性，这个属性用于标识这个类所在的外围方法")])]),t._v(" "),s("tr",[s("td",[t._v("InnerClass")]),t._v(" "),s("td",[t._v("类文件")]),t._v(" "),s("td",[t._v("内部类列表")])]),t._v(" "),s("tr",[s("td",[t._v("LineNumberTable")]),t._v(" "),s("td",[t._v("Code属性")]),t._v(" "),s("td",[t._v("Java源码的行号与字节码指令的对应关系")])]),t._v(" "),s("tr",[s("td",[t._v("LocalVariableTable")]),t._v(" "),s("td",[t._v("Code属性")]),t._v(" "),s("td",[t._v("方法的局部变量描述")])]),t._v(" "),s("tr",[s("td",[t._v("StackMapTable")]),t._v(" "),s("td",[t._v("Code属性")]),t._v(" "),s("td",[t._v("JDK1.6中新增的属性，提供新的类型检查检验器和处理目标方法的局部变量和操作数与所需要的类是否匹配")])]),t._v(" "),s("tr",[s("td",[t._v("Signature")]),t._v(" "),s("td",[t._v("类，方法表，字段表")]),t._v(" "),s("td",[t._v("用于支持泛型情况下的方法签名")])]),t._v(" "),s("tr",[s("td",[t._v("SourceFile")]),t._v(" "),s("td",[t._v("类文件")]),t._v(" "),s("td",[t._v("记录源文件名称")])]),t._v(" "),s("tr",[s("td",[t._v("SourceDebugExtension")]),t._v(" "),s("td",[t._v("类文件")]),t._v(" "),s("td",[t._v("用于存储额外的调试信息")])]),t._v(" "),s("tr",[s("td",[t._v("Synthetic")]),t._v(" "),s("td",[t._v("类，方法表，字段表")]),t._v(" "),s("td",[t._v("标志方法或字段为编译器自动生成的")])]),t._v(" "),s("tr",[s("td",[t._v("LocalVariableTypeTable")]),t._v(" "),s("td",[t._v("类")]),t._v(" "),s("td",[t._v("使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加的")])]),t._v(" "),s("tr",[s("td",[t._v("RuntimeVisibleAnnotations")]),t._v(" "),s("td",[t._v("类，方法表，字段表")]),t._v(" "),s("td",[t._v("为动态注解提供支持")])]),t._v(" "),s("tr",[s("td",[t._v("RuntimeInvisibleAnnotations")]),t._v(" "),s("td",[t._v("类，方法表，字段表")]),t._v(" "),s("td",[t._v("用于指明哪些注解是运行时不可见的")])]),t._v(" "),s("tr",[s("td",[t._v("RuntimeVisibleParameterAnnotation")]),t._v(" "),s("td",[t._v("方法表")]),t._v(" "),s("td",[t._v("作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法")])]),t._v(" "),s("tr",[s("td",[t._v("RuntimeInvisibleParameterAnnotation")]),t._v(" "),s("td",[t._v("方法表")]),t._v(" "),s("td",[t._v("作用与RuntimeInvisibleAnnotations属性类似，作用对象哪个为方法参数")])]),t._v(" "),s("tr",[s("td",[t._v("AnnotationDefault")]),t._v(" "),s("td",[t._v("方法表")]),t._v(" "),s("td",[t._v("用于记录注解类元素的默认值")])]),t._v(" "),s("tr",[s("td",[t._v("BootstrapMethods")]),t._v(" "),s("td",[t._v("类文件")]),t._v(" "),s("td",[t._v("用于保存invokeddynamic指令引用的引导方法限定符")])])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Code属性")])])]),t._v(" "),s("p",[s("code",[t._v("Code")]),t._v("属性就是存放方法体里面的代码。但是，并非所有方法表都有"),s("code",[t._v("Code")]),t._v("属性。像接口或者抽象方法，它们没有具体的方法体，因此也就不会有"),s("code",[t._v("Code")]),t._v("属性了")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("数量")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("attribute_name_index")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("属性名索引")])]),t._v(" "),s("tr",[s("td",[t._v("u4")]),t._v(" "),s("td",[t._v("attribute_length")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("属性长度")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("max_stack")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("操作数栈深度的最大值")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("max_locals")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("局部变量所需的存续空间")])]),t._v(" "),s("tr",[s("td",[t._v("u4")]),t._v(" "),s("td",[t._v("code_length")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("字节码指令的长度")])]),t._v(" "),s("tr",[s("td",[t._v("u1")]),t._v(" "),s("td",[t._v("code")]),t._v(" "),s("td",[t._v("code_length")]),t._v(" "),s("td",[t._v("存储字节码指令")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("exception_table_length")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("异常表长度")])]),t._v(" "),s("tr",[s("td",[t._v("exception_info")]),t._v(" "),s("td",[t._v("exception_table")]),t._v(" "),s("td",[t._v("exception_length")]),t._v(" "),s("td",[t._v("异常表")])]),t._v(" "),s("tr",[s("td",[t._v("u2")]),t._v(" "),s("td",[t._v("attributes_count")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("属性集合计数器")])]),t._v(" "),s("tr",[s("td",[t._v("attribute_info")]),t._v(" "),s("td",[t._v("attributes")]),t._v(" "),s("td",[t._v("attributes_count")]),t._v(" "),s("td",[t._v("属性集合")])])])]),t._v(" "),s("h3",{attrs:{id:"_1-3-javap的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-javap的使用"}},[t._v("#")]),t._v(" 1.3 javap的使用")]),t._v(" "),s("h4",{attrs:{id:"_1-3-1-javac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-javac"}},[t._v("#")]),t._v(" 1.3.1 javac")]),t._v(" "),s("p",[t._v("解析字节码文件得到的信息中，有些信息(如局部变量表，指令和代码偏移量映射表、常量池中方法的参数名称等等)需要在使用"),s("code",[t._v("javac")]),t._v("编译成"),s("code",[t._v("class")]),t._v("文件时，指定参数才能输出")]),t._v(" "),s("p",[t._v("比如："),s("code",[t._v("javac xx.java")]),t._v("，就不会生成对应的局部变量表信息，如果使用"),s("code",[t._v("javac -g xx.java")]),t._v("就可以生成所有相关的信息了")]),t._v(" "),s("h4",{attrs:{id:"_1-3-2-javap的参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-javap的参数"}},[t._v("#")]),t._v(" 1.3.2 javap的参数")]),t._v(" "),s("p",[t._v("格式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("javap [options] xx.class\n")])])]),s("p",[t._v("具体的参数")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("-version \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前JDK的版本")]),t._v("\n-public \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 仅显示公共类和成员")]),t._v("\n-protected\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示受保护的/公共类和成员")]),t._v("\n-p/-private\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有类和成员")]),t._v("\n-package\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示程序包/受保护的/公共类和成员(默认)")]),t._v("\n-sysinfo\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示正在处理的类的系统信息(路径、大小、日期、MD5，散列，源文件名)")]),t._v("\n\n-s\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出内部类型签名")]),t._v("\n-l\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出行号和本地变量表")]),t._v("\n-c\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对代码进行反汇编")]),t._v("\n-v/-verbose "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出附加信息")]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-字节码指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-字节码指令"}},[t._v("#")]),t._v(" 2. 字节码指令")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("字节码对于虚拟机，就好像汇编语言对于计算机，属于基本执行指令")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("虚拟机的指令由"),s("strong",[t._v("一个字节")]),t._v("长度、代表着某种特定操作含义的数字(操作码)以及紧跟其后的零或多个代表此操作所需的参数(称为操作数)而构成。由于"),s("code",[t._v("Java")]),t._v("虚拟机采用面向操作数栈而不是寄存器的结构，所以大多数指令都不包含操作数，只有一个操作码")]),t._v(" "),s("p",[t._v("由于限制了"),s("code",[t._v("Java")]),t._v("虚拟机操作码的长度为一个字节(即0~255)，这意味着指令集的操作码总数不可能超过256条")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方地址"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"_2-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-概述"}},[t._v("#")]),t._v(" 2.1 概述")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java")]),t._v("虚拟机的指令集中，大多数的指令都包含了其操作所对应的数据类型信息。例如，"),s("code",[t._v("iload")]),t._v("指令用于从局部变量表中加载"),s("code",[t._v("int")]),t._v("型的数据到操作数栈中，而"),s("code",[t._v("fload")]),t._v("指令加载的则是"),s("code",[t._v("float")]),t._v("类型的数据")]),t._v(" "),s("p",[t._v("对于大部分与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("i")]),t._v("代表对"),s("code",[t._v("int")]),t._v("类型的数据操作")]),t._v(" "),s("li",[s("code",[t._v("l")]),t._v("代表"),s("code",[t._v("long")])]),t._v(" "),s("li",[s("code",[t._v("s")]),t._v("代表"),s("code",[t._v("short")])]),t._v(" "),s("li",[s("code",[t._v("b")]),t._v("代表"),s("code",[t._v("byte")])]),t._v(" "),s("li",[s("code",[t._v("c")]),t._v("代表"),s("code",[t._v("char")])]),t._v(" "),s("li",[s("code",[t._v("f")]),t._v("代表"),s("code",[t._v("float")])]),t._v(" "),s("li",[s("code",[t._v("d")]),t._v("代表"),s("code",[t._v("double")])]),t._v(" "),s("li",[s("code",[t._v("a")]),t._v("引用类型")])]),t._v(" "),s("p",[t._v("也有一些指令的助记符中没有明确地指明操作类型的字母，如"),s("code",[t._v("arraylength")]),t._v("指令，它没有代表数据类型的特殊字符，但操作数永远只能是一个数组类型的对象")]),t._v(" "),s("p",[t._v("还有另外一些指令，如无条件跳转指令"),s("code",[t._v("goto")]),t._v("则是与数据类型无关的")]),t._v(" "),s("p",[t._v("大部分的指令都没有支持数据类型"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("char")]),t._v("和"),s("code",[t._v("short")]),t._v("，甚至没有任何指令支持"),s("code",[t._v("boolean")]),t._v("类型。编译器会在编译期或运行期将"),s("code",[t._v("byte")]),t._v("和"),s("code",[t._v("short")]),t._v("类型的数据待符号扩展"),s("code",[t._v("Sign-Extend")]),t._v("为相应的"),s("code",[t._v("int")]),t._v("类型数据，将"),s("code",[t._v("boolean")]),t._v("和"),s("code",[t._v("char")]),t._v("类型数据零位扩展"),s("code",[t._v("Zero-Extend")]),t._v("为相应的"),s("code",[t._v("int")]),t._v("类型数据。与之相似，在处理"),s("code",[t._v("boolean")]),t._v("、"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("short")]),t._v("和"),s("code",[t._v("char")]),t._v("类型的数组时，也会转换为使用对应的"),s("code",[t._v("int")]),t._v("类型的字节码指令来处理。因此，大多数对于"),s("code",[t._v("boolean")]),t._v("、"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("short")]),t._v("、"),s("code",[t._v("char")]),t._v("类型数据的操作，实际上都使用相应的"),s("code",[t._v("int")]),t._v("类型作为运算符类型")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("指令分类")])])]),t._v(" "),s("p",[t._v("按用途大致分为9类")]),t._v(" "),s("ul",[s("li",[t._v("加载与存储指令")]),t._v(" "),s("li",[t._v("算术指令")]),t._v(" "),s("li",[t._v("类型转换指令")]),t._v(" "),s("li",[t._v("对象的创建与访问指令")]),t._v(" "),s("li",[t._v("方法调用与返回指令")]),t._v(" "),s("li",[t._v("操作数栈管理指令")]),t._v(" "),s("li",[t._v("比较控制指令")]),t._v(" "),s("li",[t._v("异常处理指令")]),t._v(" "),s("li",[t._v("同步控制指令")])]),t._v(" "),s("p",[t._v("一个指令，可以从局部变量表、常量池、堆中对象、方法调用、系统调用中取得数据，这些数据(可能是指，可能是对象的引用)被压入操作数栈")]),t._v(" "),s("p",[t._v("一个指令，也可以从操作数栈中国年取出一到多个值("),s("code",[t._v("pop")]),t._v("多次)，完成赋值、加减乘除、方法传参、系统调用等等操作")]),t._v(" "),s("h3",{attrs:{id:"_2-2-加载与存储指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-加载与存储指令"}},[t._v("#")]),t._v(" 2.2 加载与存储指令")]),t._v(" "),s("p",[s("strong",[t._v("作用")]),t._v("：加载和存储指令用于将数据从栈帧的局部变量表和操作数栈之间来回传递")]),t._v(" "),s("p",[s("strong",[t._v("常用指令")])]),t._v(" "),s("ol",[s("li",[t._v("局部变量压栈指令：将一个局部变量加载到操作数栈："),s("code",[t._v("xload")]),t._v("、"),s("code",[t._v("xload_<n>")]),t._v("(其中"),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("l")]),t._v("、"),s("code",[t._v("f")]),t._v("、"),s("code",[t._v("d")]),t._v("、"),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("n")]),t._v("为"),s("code",[t._v("0~3")]),t._v(")")]),t._v(" "),s("li",[t._v("常用入栈指令：将一个常量加载到操作数栈："),s("code",[t._v("bipush")]),t._v("、"),s("code",[t._v("sipush")]),t._v("、"),s("code",[t._v("ldc")]),t._v("、"),s("code",[t._v("ldc_w")]),t._v("、"),s("code",[t._v("ldc2_w")]),t._v("、"),s("code",[t._v("aconst_null")]),t._v("、"),s("code",[t._v("iconst_m1")]),t._v("、"),s("code",[t._v("iconst_<i>")]),t._v("、"),s("code",[t._v("fconst_<f>")]),t._v("、"),s("code",[t._v("dconst_<d>")])]),t._v(" "),s("li",[t._v("出栈装入局部变量表指令：将一个数值从操作数栈存储到局部变量表中："),s("code",[t._v("xstore")]),t._v("、"),s("code",[t._v("xstore_<n>")]),t._v("(其中"),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("l")]),t._v("、"),s("code",[t._v("f")]),t._v("、"),s("code",[t._v("d")]),t._v("、"),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("n")]),t._v("为"),s("code",[t._v("0~3")]),t._v(")；"),s("code",[t._v("xastore")]),t._v("(其中"),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("l")]),t._v("、"),s("code",[t._v("f")]),t._v("、"),s("code",[t._v("d")]),t._v("、"),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("b")]),t._v("、"),s("code",[t._v("c")]),t._v("、"),s("code",[t._v("s")]),t._v(")")]),t._v(" "),s("li",[t._v("扩充局部变量表的访问索引的指令"),s("code",[t._v("wide")])])]),t._v(" "),s("h4",{attrs:{id:"_2-2-1-局部变量压栈指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-局部变量压栈指令"}},[t._v("#")]),t._v(" 2.2.1 局部变量压栈指令")]),t._v(" "),s("p",[s("code",[t._v("load")]),t._v("局部变量压栈指令：将给定的局部变量表中的数据压入栈中")]),t._v(" "),s("p",[t._v("测试方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 getstatic \t\t#2 <java/lang/System.out>\n 3 iload_1\t\t\t\t# 将num加载到栈中\n 4 invokevirtual \t#3 <java/io/PrintStream.println>\n 7 getstatic \t\t#2 <java/lang/System.out>\n10 aload_2\t\t\t\t# 将obj加载到栈中\n11 invokevirtual \t#4 <java/io/PrintStream.println>\n14 getstatic \t\t#2 <java/lang/System.out>\n17 lload_3\t\t\t\t# 将count加载到栈中\n18 invokevirtual \t#5 <java/io/PrintStream.println>\n21 getstatic \t\t#2 <java/lang/System.out>\n24 iload 5\t\t\t\t# 将flag加载到栈中\n26 invokevirtual \t#6 <java/io/PrintStream.println>\n29 getstatic \t\t#2 <java/lang/System.out>\n32 aload 6\t\t\t\t# 将数组arr加载到栈中\n34 invokevirtual \t#4 <java/io/PrintStream.println>\n37 return\n")])])]),s("p",[t._v("局部变量表")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210605102015.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-2-2-常量入栈指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-常量入栈指令"}},[t._v("#")]),t._v(" 2.2.2 常量入栈指令")]),t._v(" "),s("p",[t._v("常量入栈指令的功能是将常数压入操作数栈，根据数据类型和入栈内容的不同，又可以分为"),s("code",[t._v("const")]),t._v("系列、"),s("code",[t._v("push")]),t._v("系列和"),s("code",[t._v("ldc")]),t._v("指令")]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("const")]),t._v("系列：拥有对特定的常量入栈，入栈的常量隐含在指令本身里。指令有："),s("code",[t._v("iconst_<i>")]),t._v("("),s("code",[t._v("i")]),t._v("的范围为"),s("code",[t._v("-1~5")]),t._v(")、"),s("code",[t._v("lconst_<1>")]),t._v("("),s("code",[t._v("l")]),t._v("的范围"),s("code",[t._v("0~1")]),t._v(")、"),s("code",[t._v("fconst_<f>")]),t._v("("),s("code",[t._v("f")]),t._v("的范围"),s("code",[t._v("0~2")]),t._v(")、"),s("code",[t._v("dconst_<d>")]),t._v("("),s("code",[t._v("d")]),t._v("的范围"),s("code",[t._v("0~1")]),t._v(")、"),s("code",[t._v("aconst_null")])]),t._v(" "),s("p",[t._v("比如，")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("inconst_m1")]),t._v("将"),s("code",[t._v("-1")]),t._v("压入栈")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("inconst_x")]),t._v("("),s("code",[t._v("x")]),t._v("的范围为"),s("code",[t._v("0~5")]),t._v(")将"),s("code",[t._v("x")]),t._v("压入栈")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("lconst_0")]),t._v("、"),s("code",[t._v("lconst_1")]),t._v("分别将长整数"),s("code",[t._v("0")]),t._v("和"),s("code",[t._v("1")]),t._v("压入栈")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("fconst_0")]),t._v("、"),s("code",[t._v("fconst_1")]),t._v("、"),s("code",[t._v("fconst_2")]),t._v("分别将浮点数"),s("code",[t._v("0~2")]),t._v("压入栈")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("dconst_0")]),t._v("和"),s("code",[t._v("dconst_1")]),t._v("分别将"),s("code",[t._v("double")]),t._v("型的"),s("code",[t._v("0")]),t._v("和"),s("code",[t._v("1")]),t._v("入栈")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("aconst_null")]),t._v("将"),s("code",[t._v("null")]),t._v("压入操作数栈")])])]),t._v(" "),s("p",[t._v("从指令的命名上不难找出规律，指令助记符的第一个字符总喜欢表示数据类型，"),s("code",[t._v("i")]),t._v("表示整数，"),s("code",[t._v("l")]),t._v("表示长整数，"),s("code",[t._v("f")]),t._v("表示浮点数，"),s("code",[t._v("d")]),t._v("表示双精度浮点，习惯上用"),s("code",[t._v("a")]),t._v("表示对象引用。如果指令隐含操作的参数，会以下划线的形式给出")]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("push")]),t._v("系列：主要包括"),s("code",[t._v("bipush")]),t._v("和"),s("code",[t._v("sipush")]),t._v("。它们的区别在于接收数据类型的不同，"),s("code",[t._v("bipush")]),t._v("接受8位整数作为参数，"),s("code",[t._v("sipush")]),t._v("接受16位整数，它们都将参数压入栈")]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("ldc")]),t._v("系列：如果以上指令都不能满足需求，则可以使用万能的"),s("code",[t._v("ldc")]),t._v("指令，它可以接受一个8位的参数，该参数指向常量池中的"),s("code",[t._v("int")]),t._v("、"),s("code",[t._v("float")]),t._v("或者"),s("code",[t._v("String")]),t._v("的索引，将指定的内容压入堆栈")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("常数指令")]),t._v(" "),s("th",[t._v("范围")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("int(boolean, byte, char, short)")]),t._v(" "),s("td",[t._v("iconst")]),t._v(" "),s("td",[t._v("[-1,5]")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("bipush")]),t._v(" "),s("td",[t._v("[-128,127]")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("sipush")]),t._v(" "),s("td",[t._v("[-32768,32767]")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("ldc")]),t._v(" "),s("td",[t._v("任何数据")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("lconst")]),t._v(" "),s("td",[t._v("0, 1")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("ldc")]),t._v(" "),s("td",[t._v("任何数据")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("dconst")]),t._v(" "),s("td",[t._v("0, 1")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("ldc")]),t._v(" "),s("td",[t._v("任何数据")])]),t._v(" "),s("tr",[s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("aconst")]),t._v(" "),s("td",[t._v("null")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("ldc")]),t._v(" "),s("td",[t._v("String literal, Class literal")])])])]),t._v(" "),s("p",[t._v("整型")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushConstLdc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32767")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32768")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iconst_5\n 1 istore_1\n 2 bipush 6\n 4 istore_2\n 5 bipush 127\n 7 istore_3\n 8 sipush 128\n11 istore 4\n13 sipush 32767\n16 istore 5\n18 ldc #7 <32768>\n20 istore 6\n22 return\n")])])]),s("p",[t._v("长整型")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constLdc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" a2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" b2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 lconst_1\n 1 lstore_1\n 2 ldc2_w #8 <2>\n 5 lstore_3\n 6 fconst_2\n 7 fstore 5\n 9 ldc #10 <3.0>\n11 fstore 6\n13 dconst_1\n14 dstore 7\n16 ldc2_w #11 <2.0>\n19 dstore 9\n21 aconst_null\n22 astore 11\n24 return\n")])])]),s("h4",{attrs:{id:"_2-2-3-出栈装入局部变量表指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-出栈装入局部变量表指令"}},[t._v("#")]),t._v(" 2.2.3 出栈装入局部变量表指令")]),t._v(" "),s("p",[t._v("出栈装入局部变量表指令用于将操作数栈中栈顶元素弹出后，装入局部变量表的指定位置，用于给出局部变量赋值")]),t._v(" "),s("p",[t._v("这类指令主要以"),s("code",[t._v("store")]),t._v("的形式存在，比如"),s("code",[t._v("xstore")]),t._v("("),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("l")]),t._v("、"),s("code",[t._v("d")]),t._v("、"),s("code",[t._v("a")]),t._v(")、"),s("code",[t._v("xstore_n")]),t._v("("),s("code",[t._v("x")]),t._v("为"),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("l")]),t._v("、"),s("code",[t._v("f")]),t._v("、"),s("code",[t._v("d")]),t._v("、"),s("code",[t._v("a")]),t._v("、"),s("code",[t._v("n")]),t._v("的范围为"),s("code",[t._v("0~3")]),t._v(")")]),t._v(" "),s("ul",[s("li",[t._v("其中，指令"),s("code",[t._v("istore_n")]),t._v("将从操作数栈中弹出一个整数，并把它赋值给局部变量索引"),s("code",[t._v("n")]),t._v("位置")]),t._v(" "),s("li",[t._v("指令"),s("code",[t._v("xstore")]),t._v("由于没有隐含参数信息，故需要提供一个"),s("code",[t._v("byte")]),t._v("类型的参数类指定目标局部变量表的位置")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")])])]),t._v(" "),s("p",[t._v("一般来说，类似像"),s("code",[t._v("store")]),t._v("这样的命令需要带一个参数，用来指明将弹出的元素放在局部变量表的第几个位置。但是，为了尽可能压缩指令的大小，使用专门的"),s("code",[t._v("istore_1")]),t._v("指令表示将弹出的元素放置在局部变量表第一个位置。类似的还有"),s("code",[t._v("istore_0")]),t._v("、"),s("code",[t._v("istore_2")]),t._v("、"),s("code",[t._v("istore_3")]),t._v("，他们分表表示从操作数栈顶弹出一个元素，存放在局部变量表第"),s("code",[t._v("0")]),t._v("、"),s("code",[t._v("2")]),t._v("、"),s("code",[t._v("3")]),t._v("个位置")]),t._v(" "),s("p",[t._v("由于局部变量表前几个位置总是非常常用，因此这种做法虽然增加了指令的数量，但是可以大大压缩生成的字节码的体积。如果局部变量表很大，需要存储的槽位大于3，那么可以使用"),s("code",[t._v("istore")]),t._v("指令，另加一个参数，用来表示需要存放的槽位位置")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0F")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iload_1\n 1 iconst_2\n 2 iadd\n 3 istore 4\n 5 ldc2_w #13 <12>\n 8 lstore 5\n10 ldc #15 <Hello World>\n12 astore 7\n14 ldc #16 <10.0>\n16 fstore 8\n18 ldc2_w #17 <10.0>\n21 dstore_2\n22 return\n")])])]),s("h3",{attrs:{id:"_2-3-算术指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-算术指令"}},[t._v("#")]),t._v(" 2.3 算术指令")]),t._v(" "),s("p",[t._v("算术指令用于对两个操作数栈上的值进行某种特定的运算，并把结果重新压入操作数栈。大体上算术指令可以分为两种：对整型数据进行运算的指令与对浮点类型数据进行运算的指令")]),t._v(" "),s("p",[s("strong",[t._v("类型说明")]),t._v("：在每一 大类中，都有针对"),s("code",[t._v("Java")]),t._v("虚拟机具体数据类型的专用运算指令。但没有直接支持"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("short")]),t._v("、"),s("code",[t._v("char")]),t._v("和"),s("code",[t._v("boolean")]),t._v("类型的算术指令，对于这些数据的运算，都使用"),s("code",[t._v("int")]),t._v("类型的指令来处理。此外，在处理"),s("code",[t._v("boolean")]),t._v("、"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("short")]),t._v("和"),s("code",[t._v("char")]),t._v("类型的数组时，也会转换为使用对应的"),s("code",[t._v("int")]),t._v("类型的字节码指令来处理")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("实际类型")]),t._v(" "),s("th",[t._v("运算符类型")]),t._v(" "),s("th",[t._v("分类")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("int")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("float")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("returnAddress")]),t._v(" "),s("td",[t._v("returnAddress")]),t._v(" "),s("td",[t._v("一")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("long")]),t._v(" "),s("td",[t._v("二")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("double")]),t._v(" "),s("td",[t._v("二")])])])]),t._v(" "),s("p",[s("strong",[t._v("运算时的溢出")]),t._v("：数据运算可能会导致溢出，例如两个很大的正整数相加，结果可能是一个负数。其实"),s("code",[t._v("Java")]),t._v("虚拟机规范并无明确规定过整型数据溢出的具体结果，仅规定了在处理整型数据时，只有除法指令以及求余指令中出现除数为0时会导致虚拟机抛出异常"),s("code",[t._v("ArithmeticException")])]),t._v(" "),s("p",[s("strong",[t._v("运算模式")])]),t._v(" "),s("ol",[s("li",[t._v("向最接近数舍入模式："),s("code",[t._v("JVM")]),t._v("要求在进行浮点数计算时，所有的运算结果都必须舍入到适当的精度，非精确结果必须舍入为可表示的最接近的精确值，如果有两种可表示的形式与该值一样接近，将优先选择最低有效位为零的")]),t._v(" "),s("li",[t._v("向零舍入模式：将浮点数转换为整数时，采用该模式，该模式将在目标数值类型中选择一个最接近但是不大于原值的数字作为最精确的舍入结果")])]),t._v(" "),s("p",[s("strong",[t._v("NaN值的使用")]),t._v("：当一个操作产生溢出时，将会使用有符号的无穷大表示，如果某个操作没有明确的数学定义的话，将会使用"),s("code",[t._v("NaN")]),t._v("值来表示。而且所有使用"),s("code",[t._v("NaN")]),t._v("值作为操作数的算术操作，结果都会返回"),s("code",[t._v("NaN")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@DisplayName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试运算溢出"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" num1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity 无穷大")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" num2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("分类")]),t._v(" "),s("th",[t._v("符号")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("加法指令")]),t._v(" "),s("td",[t._v("iadd、ladd、fadd、dadd")])]),t._v(" "),s("tr",[s("td",[t._v("减法指令")]),t._v(" "),s("td",[t._v("isub、lsub、fsub、dsub")])]),t._v(" "),s("tr",[s("td",[t._v("乘法指令")]),t._v(" "),s("td",[t._v("imul、lmul、fmul、dmul")])]),t._v(" "),s("tr",[s("td",[t._v("除法指令")]),t._v(" "),s("td",[t._v("idiv、ldiv、fdiv、ddiv")])]),t._v(" "),s("tr",[s("td",[t._v("求余指令")]),t._v(" "),s("td",[t._v("irem、lrem、frem、drem")])]),t._v(" "),s("tr",[s("td",[t._v("取反指令")]),t._v(" "),s("td",[t._v("ineg、lneg、fneg、dneg")])]),t._v(" "),s("tr",[s("td",[t._v("自增指令")]),t._v(" "),s("td",[t._v("iinc")])]),t._v(" "),s("tr",[s("td",[t._v("位移指令")]),t._v(" "),s("td",[t._v("ishl、ishr、iushr、lshl、lshr、lushr")])]),t._v(" "),s("tr",[s("td",[t._v("按位或指令")]),t._v(" "),s("td",[t._v("ior、lor")])]),t._v(" "),s("tr",[s("td",[t._v("按位与指令")]),t._v(" "),s("td",[t._v("iand、land")])]),t._v(" "),s("tr",[s("td",[t._v("按位异或指令")]),t._v(" "),s("td",[t._v("ixor、lxor")])]),t._v(" "),s("tr",[s("td",[t._v("比较指令")]),t._v(" "),s("td",[t._v("dcmpg、dcmpl、fcmpg、fcmpl、lcmp")])])])]),t._v(" "),s("h4",{attrs:{id:"_2-3-1-示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-示例"}},[t._v("#")]),t._v(" 2.3.1 示例")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 bipush 100\n2 istore_1\n3 iload_1\n4 bipush 10\n6 iadd\n7 istore_1\n8 return\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" bipush "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" istore_1\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" iinc "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" by "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-3-2-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-操作"}},[t._v("#")]),t._v(" 2.3.2 ++操作")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("不涉及运算，前置++和后置++相同")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 bipush 10\n2 istore_1\n3 iinc 1 by 1\n6 return\n")])])])]),t._v(" "),s("li",[s("p",[t._v("覆盖情况")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 bipush 10\n 2 istore_1\n 3 iload_1\n 4 iinc 1 by 1\n 7 istore_1\n 8 getstatic #2 <java/lang/System.out>\n11 iload_1\n12 invokevirtual #3 <java/io/PrintStream.println>\n15 return\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"_2-3-3-比较指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-比较指令"}},[t._v("#")]),t._v(" 2.3.3 比较指令")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")])])]),t._v(" "),s("ul",[s("li",[t._v("比较指令的作用是比较栈顶两个元素的大小，并将比较结果入栈")]),t._v(" "),s("li",[t._v("对于"),s("code",[t._v("double")]),t._v("和"),s("code",[t._v("float")]),t._v("类型的数字，由于"),s("code",[t._v("NaN")]),t._v("的存在，各有两个版本的比较指令。以"),s("code",[t._v("float")]),t._v("为例，有"),s("code",[t._v("fcmpg")]),t._v("和"),s("code",[t._v("fcmpl")]),t._v("两个指令，它们的区别在于数字比较时，若遇到"),s("code",[t._v("NaN")]),t._v("值，处理结果不同。"),s("code",[t._v("double")]),t._v("的"),s("code",[t._v("fcmpg")]),t._v("和"),s("code",[t._v("dcmpl")]),t._v("类似")]),t._v(" "),s("li",[t._v("指令"),s("code",[t._v("lcmp")]),t._v("针对"),s("code",[t._v("long")]),t._v("型整数，由于"),s("code",[t._v("long")]),t._v("型整数没有"),s("code",[t._v("NaN")]),t._v("值，故无需准备两套指令")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("举例")])])]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("fcmpl")]),t._v("和"),s("code",[t._v("fcmpg")]),t._v("都从占中弹出两个操作数，并将它们做比较，设栈顶的元素为"),s("code",[t._v("v2")]),t._v("，栈顶顺序第二位的元素为"),s("code",[t._v("v1")]),t._v("，若"),s("code",[t._v("v1=v2")]),t._v("，则压入0；若"),s("code",[t._v("v1<v2")]),t._v("则压入"),s("code",[t._v("-1")]),t._v("。")]),t._v(" "),s("p",[t._v("两个指令的不同之处在于，如果遇到"),s("code",[t._v("NaN")]),t._v("值，"),s("code",[t._v("fcmpg")]),t._v("会压入1，而"),s("code",[t._v("fcmpl")]),t._v("会压入-1")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" d2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        d1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        d2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 dload_1\n 1 dload_3\n 2 dcmpl\n 3 ifle 13 (+10)\n 6 ldc2_w #6 <20.0>\n 9 dstore_1\n10 goto 17 (+7)\n13 ldc2_w #6 <20.0>\n16 dstore_3\n17 return\n")])])]),s("h3",{attrs:{id:"_2-4-类型转换指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-类型转换指令"}},[t._v("#")]),t._v(" 2.4 类型转换指令")]),t._v(" "),s("p",[t._v("类型转换指令可以将两种不同的数值类型进行相互转换")]),t._v(" "),s("p",[t._v("这些转换操作一般用于实现用户代码中的"),s("strong",[t._v("显式类型转换")]),t._v("操作，或者用来处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题")]),t._v(" "),s("h4",{attrs:{id:"_2-4-1-宽化类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-宽化类型转换"}},[t._v("#")]),t._v(" 2.4.1 宽化类型转换")]),t._v(" "),s("p",[t._v("宽化类型转换"),s("code",[t._v("Widening Numeric Conversions")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("转换规则")])])]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("虚拟机直接支持以下数值的宽化类型转换(小范围类型向大范围类型的安全转换)。并不需要指令执行")]),t._v(" "),s("ul",[s("li",[t._v("从"),s("code",[t._v("int")]),t._v("类型到"),s("code",[t._v("long")]),t._v("、"),s("code",[t._v("float")]),t._v("或者"),s("code",[t._v("double")]),t._v("类型。对应的指令为："),s("code",[t._v("i2l")]),t._v("、"),s("code",[t._v("i2f")]),t._v("、"),s("code",[t._v("i2d")])]),t._v(" "),s("li",[t._v("从"),s("code",[t._v("long")]),t._v("类型到"),s("code",[t._v("float")]),t._v("、"),s("code",[t._v("double")]),t._v("类型。对应的指令为："),s("code",[t._v("l2f")]),t._v("、"),s("code",[t._v("l2d")])]),t._v(" "),s("li",[t._v("从"),s("code",[t._v("float")]),t._v("类型到"),s("code",[t._v("double")]),t._v("类型。对应的指令为："),s("code",[t._v("f2d")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("upCast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 bipush 10\n 2 istore_1\n 3 iload_1\n 4 i2l\n 5 lstore_2\n 6 iload_1\n 7 i2f\n 8 fstore 4\n10 iload_1\n11 i2d\n12 dstore 5\n14 lload_2\n15 l2f\n16 fstore 7\n18 lload_2\n19 l2d\n20 dstore 8\n22 fload 7\n24 f2d\n25 dstore 10\n27 return\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("精度损失问题")])])]),t._v(" "),s("p",[t._v("宽化类型转化是不会因为超过目标类型最大值而丢失信息，例如，从"),s("code",[t._v("int")]),t._v("转换到"),s("code",[t._v("long")]),t._v("，或者从"),s("code",[t._v("int")]),t._v("转换到"),s("code",[t._v("double")]),t._v("，都不会丢失任何信息，转换前后的值是精确相等的")]),t._v(" "),s("p",[t._v("从"),s("code",[t._v("int")]),t._v("、"),s("code",[t._v("long")]),t._v("类型数值转换到"),s("code",[t._v("float")]),t._v("，或者"),s("code",[t._v("long")]),t._v("类型数值转换到"),s("code",[t._v("double")]),t._v("时，可能会发生精度丢失，转换后的浮点数值是根据"),s("code",[t._v("IEEE754")]),t._v("最接近舍入模式所得的正确整数值")]),t._v(" "),s("p",[t._v("尽管宽化类型转换实际上是可能发生精度丢失的，但是这种转化永远不会导致"),s("code",[t._v("Java")]),t._v("虚拟机抛出运行时异常")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("补充说明")])])]),t._v(" "),s("p",[t._v("从"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("char")]),t._v("和"),s("code",[t._v("short")]),t._v("类型到"),s("code",[t._v("int")]),t._v("类型的宽化类型转换实际上是不存在的。对于"),s("code",[t._v("byte")]),t._v("类型转换为"),s("code",[t._v("int")]),t._v("，虚拟机并没有做实质性的转换处理，只是简单地通过操作数栈交换了两个数据。而将"),s("code",[t._v("byte")]),t._v("转换为"),s("code",[t._v("long")]),t._v("时，使用的是"),s("code",[t._v("i2l")]),t._v("，可以看到内部"),s("code",[t._v("byte")]),t._v("在这里已经等同于"),s("code",[t._v("int")]),t._v("类型处理，类似的还有"),s("code",[t._v("short")]),t._v("类型，这种处理方式有两个特点")]),t._v(" "),s("ol",[s("li",[t._v("可以减少实际的数据类型，如果为"),s("code",[t._v("short")]),t._v("和"),s("code",[t._v("byte")]),t._v("都准备一套指令，那么指令的数量就会大增，而虚拟机目前的设计上，只愿意使用一个字节来表示指令，因此指令的总数不能超过256个，为了节省指令资源，将short和byte当做int处理也在情理之中")]),t._v(" "),s("li",[t._v("由于局部变量表中的槽位固定为32位，无论是byte或者short存入局部变量表，都会占用32位空间，从这个角度来说，也没有必要特意区分这几种数据类型")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("upCast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 iload_1\n1 istore_2\n2 iload_1\n3 i2l\n4 lstore_3\n5 iload_1\n6 i2d\n7 dstore 5\n9 return\n")])])]),s("h4",{attrs:{id:"_2-4-2-窄化类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-窄化类型转换"}},[t._v("#")]),t._v(" 2.4.2 窄化类型转换")]),t._v(" "),s("p",[t._v("窄化类型转换"),s("code",[t._v("Narrowing Numeric Conversion")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("转换规则")])])]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("虚拟机支持以下的窄化类型转换")]),t._v(" "),s("ol",[s("li",[t._v("从"),s("code",[t._v("int")]),t._v("类型至"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("short")]),t._v("和"),s("code",[t._v("char")]),t._v("类型。对应的指令有："),s("code",[t._v("i2b")]),t._v("、"),s("code",[t._v("i2c")]),t._v("、"),s("code",[t._v("i2s")])]),t._v(" "),s("li",[t._v("从"),s("code",[t._v("long")]),t._v("类型到"),s("code",[t._v("int")]),t._v("类型。对应的指令有"),s("code",[t._v("l2i")])]),t._v(" "),s("li",[t._v("从"),s("code",[t._v("float")]),t._v("类型到"),s("code",[t._v("int")]),t._v("或者"),s("code",[t._v("long")]),t._v("类型。对应的指令有"),s("code",[t._v("f2i")]),t._v("、"),s("code",[t._v("f2l")])]),t._v(" "),s("li",[t._v("从"),s("code",[t._v("double")]),t._v("类型到"),s("code",[t._v("int")]),t._v("、"),s("code",[t._v("long")]),t._v("或者"),s("code",[t._v("float")]),t._v("类型。对应的指令有："),s("code",[t._v("d2i")]),t._v("、"),s("code",[t._v("d2l")]),t._v("、"),s("code",[t._v("d2f")])])]),t._v(" "),s("p",[t._v("示例")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("downCast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iload_1\n 1 i2b\n 2 istore_2\n 3 iload_1\n 4 i2s\n 5 istore_3\n 6 iload_1\n 7 i2c\n 8 istore 4\n10 ldc2_w #4 <10>\n13 lstore 5\n15 lload 5\n17 l2i\n18 istore 7\n20 lload 5\n22 l2i\n23 i2b\n24 istore 8\n26 return\n")])])]),s("p",[t._v("从上述可以看出，"),s("code",[t._v("long")]),t._v("转换为"),s("code",[t._v("byte")]),t._v("的话需要先转换成"),s("code",[t._v("int")]),t._v("再从"),s("code",[t._v("int")]),t._v("转换为"),s("code",[t._v("byte")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("精度损失问题")])])]),t._v(" "),s("p",[t._v("窄化类型转换可能会导致转换结果具备不同的正负号、不同的数量级，因此，转换过程很可能会导致数值丢失精度")]),t._v(" "),s("p",[t._v("尽管数据类型窄化可能会发生上限溢出、下限溢出和精度丢失等问题，但是"),s("code",[t._v("Java")]),t._v("虚拟机规范中明确规定数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("补充说明")])])]),t._v(" "),s("p",[t._v("当一个浮点值窄化转换为整数类型"),s("code",[t._v("T")]),t._v("("),s("code",[t._v("T")]),t._v("限于"),s("code",[t._v("int")]),t._v("或"),s("code",[t._v("long")]),t._v("类型之一)的时候，将遵循以下转换规则")]),t._v(" "),s("ol",[s("li",[t._v("如果浮点值是"),s("code",[t._v("NaN")]),t._v("，那结果就是"),s("code",[t._v("int")]),t._v("或者"),s("code",[t._v("long")]),t._v("类型的"),s("code",[t._v("0")])]),t._v(" "),s("li",[t._v("如果浮点值不是无穷大的话，浮点值使用"),s("code",[t._v("IEEE754")]),t._v("的向零舍入模式取整，获得整数值"),s("code",[t._v("v")]),t._v("，如果"),s("code",[t._v("v")]),t._v("在目标类型"),s("code",[t._v("T")]),t._v("("),s("code",[t._v("int")]),t._v("或"),s("code",[t._v("long")]),t._v(")的表示范围之内，那转换结构就是"),s("code",[t._v("v")]),t._v("。否则，将根据"),s("code",[t._v("v")]),t._v("的符号，转换为"),s("code",[t._v("T")]),t._v("所能表示的最大或者最小整数")])]),t._v(" "),s("p",[t._v("当一个"),s("code",[t._v("double")]),t._v("类型转换为"),s("code",[t._v("float")]),t._v("类型时，将遵循以下转换规则，通过向最接近数舍入模式舍入一个可以使用"),s("code",[t._v("float")]),t._v("类型表示的数字。最后结果根据下面3条规则判断")]),t._v(" "),s("ol",[s("li",[t._v("如果转换结果的绝对值太小而无法使用"),s("code",[t._v("float")]),t._v("来表示，将返回的"),s("code",[t._v("float")]),t._v("类型的正负零")]),t._v(" "),s("li",[t._v("如果转换结果的绝对值太大而无法使用"),s("code",[t._v("float")]),t._v("来表示，将返回的"),s("code",[t._v("float")]),t._v("类型的正负无穷大")]),t._v(" "),s("li",[t._v("对于"),s("code",[t._v("double")]),t._v("类型的"),s("code",[t._v("NaN")]),t._v("值将按规定转换为"),s("code",[t._v("float")]),t._v("类型的"),s("code",[t._v("NaN")]),t._v("值")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("downCast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" d1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" d1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("POSITIVE_INFINITY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" d2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" d2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" d2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 9223372036854775807")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2147483647")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-5-对象的创建与访问指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-对象的创建与访问指令"}},[t._v("#")]),t._v(" 2.5 对象的创建与访问指令")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("是面向对象的程序设计语言，虚拟机平台从字节码底层就对面向对象做了深层次的支持。有一系列指令专门用于对象操作，可进一步细分为创建指令、字段访问指令、数组操作指令")]),t._v(" "),s("h4",{attrs:{id:"_2-5-1-创建指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-创建指令"}},[t._v("#")]),t._v(" 2.5.1 创建指令")]),t._v(" "),s("p",[t._v("虽然类实例和数组都是对象，但"),s("code",[t._v("Java")]),t._v("虚拟机对类实例和数组的创建与操作使用了不同的字节码指令")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("创建类实例的指令")])])]),t._v(" "),s("p",[s("code",[t._v("new")]),t._v("它接受一个操作数，为指向常量池的索引，表示要创建的类型，执行完成后，将对象的引用压入栈")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),t._v(" file "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 new \t\t\t\t#2 <java/lang/Object>\n 3 dup\t\t\t\t\t# 复制一份放入操作数栈中\n 4 invokespecial \t#1 <java/lang/Object.<init>>\n 7 astore_1\n 8 new \t\t\t\t#3 <java/io/File>\n11 dup\n12 ldc \t\t\t\t#4 <test.txt>\n14 invokespecial \t#5 <java/io/File.<init>>\n17 astore_2\n18 return\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("创建数组的指令")])])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("newarray")]),t._v("：创建基本类型数组")]),t._v(" "),s("li",[s("code",[t._v("anewarray")]),t._v("：创建引用类型数组")]),t._v(" "),s("li",[s("code",[t._v("multianewarray")]),t._v("：创建多维数组")])]),t._v(" "),s("p",[t._v("上述创建指令可以用于创建对象或者数组，由于对象和数组在"),s("code",[t._v("Java")]),t._v("中的广泛使用，这些指令的使用频率也非常高")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" intArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" objArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" minArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" strArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 bipush 10\n 2 newarray 10 (int)\n 4 astore_1\n 5 bipush 10\n 7 anewarray #2 <java/lang/Object>\n10 astore_2\n11 bipush 10\n13 bipush 10\n15 multianewarray #6 <[[I> dim 2\n19 astore_3\n20 bipush 10\n22 anewarray #7 <[Ljava/lang/String;>\n25 astore 4\n27 return\n")])])]),s("h4",{attrs:{id:"_2-5-2-字段访问指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-字段访问指令"}},[t._v("#")]),t._v(" 2.5.2 字段访问指令")]),t._v(" "),s("p",[t._v("对象创建后，就可以通过对象访问指令获取对象实例或数组实例中的字段或者数组元素。")]),t._v(" "),s("ul",[s("li",[t._v("访问类字段("),s("code",[t._v("static")]),t._v("字段，或者称为类变量)的指令："),s("code",[t._v("getstatic")]),t._v("、"),s("code",[t._v("putstatic")])]),t._v(" "),s("li",[t._v("访问类实例字段(非"),s("code",[t._v("static")]),t._v("字段，或者称为实例变量)的指令："),s("code",[t._v("getfield")]),t._v("、"),s("code",[t._v("putfield")])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("静态字段")])])]),t._v(" "),s("p",[s("code",[t._v("out")]),t._v("是"),s("code",[t._v("System")]),t._v("中的一个静态字段")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 getstatic #8 <java/lang/System.out>\n3 ldc #9 <hello>\n5 invokevirtual #10 <java/io/PrintStream.println>\n8 return\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("非静态字段")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FieldTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOrderId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ORDER"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 new #11 <com/valid/Order>\n 3 dup\n 4 invokespecial #12 <com/valid/Order.<init>>\n 7 astore_1\n 8 aload_1\n 9 sipush 1001\n12 putfield #13 <com/valid/Order.id>\n15 getstatic #8 <java/lang/System.out>\n18 aload_1\n19 getfield #13 <com/valid/Order.id>\n22 invokevirtual #14 <java/io/PrintStream.println>\n25 ldc #15 <ORDER>\n27 putstatic #16 <com/valid/Order.name>\n30 getstatic #8 <java/lang/System.out>\n33 getstatic #16 <com/valid/Order.name>\n36 invokevirtual #10 <java/io/PrintStream.println>\n39 return\n")])])]),s("h4",{attrs:{id:"_2-5-3-数组操作指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-数组操作指令"}},[t._v("#")]),t._v(" 2.5.3 数组操作指令")]),t._v(" "),s("p",[t._v("数组操作指令主要有："),s("code",[t._v("xastore")]),t._v("和"),s("code",[t._v("xaload")]),t._v("指令。具体为：")]),t._v(" "),s("ol",[s("li",[t._v("把一个数组元素加载到操作数栈的指令："),s("code",[t._v("baload")]),t._v("、"),s("code",[t._v("caload")]),t._v("、"),s("code",[t._v("saload")]),t._v("、"),s("code",[t._v("iaload")]),t._v("、"),s("code",[t._v("laload")]),t._v("、"),s("code",[t._v("faload")]),t._v("、"),s("code",[t._v("daload")]),t._v("、"),s("code",[t._v("aaload")])]),t._v(" "),s("li",[t._v("将一个操作数栈的值存储到数组元素中的指令："),s("code",[t._v("bastore")]),t._v("、"),s("code",[t._v("castore")]),t._v("、"),s("code",[t._v("sastore")]),t._v("、"),s("code",[t._v("iastore")]),t._v("、"),s("code",[t._v("lastore")]),t._v("、"),s("code",[t._v("fastore")]),t._v("、"),s("code",[t._v("dastore")]),t._v("、"),s("code",[t._v("aastore")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("数组类型")]),t._v(" "),s("th",[t._v("加载指令")]),t._v(" "),s("th",[t._v("存储指令")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("byte(boolean)")]),t._v(" "),s("td",[t._v("baload")]),t._v(" "),s("td",[t._v("bastore")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("caload")]),t._v(" "),s("td",[t._v("castore")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("saload")]),t._v(" "),s("td",[t._v("sastore")])]),t._v(" "),s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("iastore")]),t._v(" "),s("td",[t._v("iastore")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("laload")]),t._v(" "),s("td",[t._v("lastore")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("faload")]),t._v(" "),s("td",[t._v("fastore")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("daload")]),t._v(" "),s("td",[t._v("dastore")])]),t._v(" "),s("tr",[s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("aaload")]),t._v(" "),s("td",[t._v("aastore")])])])]),t._v(" "),s("p",[t._v("取数组长度的指令："),s("code",[t._v("arraylength")]),t._v("，该指令弹出栈顶的数组元素，获取数组的长度，将长度压入栈")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")])])]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("xaload")]),t._v("表示将数组的元素压栈，比如"),s("code",[t._v("saload")]),t._v("、"),s("code",[t._v("caload")]),t._v("分别表示压入"),s("code",[t._v("short")]),t._v("数组和"),s("code",[t._v("char")]),t._v("数组。指令"),s("code",[t._v("xaload")]),t._v("在执行时，要求操作数中栈顶元素为数组索引"),s("code",[t._v("i")]),t._v("，栈顶顺位第2个元素为数组引用a，该指令 会弹出栈顶这两个元素，并将"),s("code",[t._v("a[i]")]),t._v("重新压入堆栈")]),t._v(" "),s("p",[s("code",[t._v("xastore")]),t._v("则专门针对数组进行操作，以"),s("code",[t._v("iastore")]),t._v("为例，它用于给一个"),s("code",[t._v("int")]),t._v("数组的给定索引赋值。在"),s("code",[t._v("iastore")]),t._v("执行前，操作数栈顶需要以此准备3个元素：值、索引、数组引用，"),s("code",[t._v("iastore")]),t._v("会弹出这3个值，并将值赋给数组中指定索引的位置")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" intArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    intArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("intArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 bipush 10\n 2 newarray 10 (int)\n 4 astore_1\n 5 aload_1\n 6 iconst_3\n 7 bipush 20\n 9 iastore\n10 getstatic #8 <java/lang/System.out>\n13 aload_1\n14 iconst_1\n15 iaload\n16 invokevirtual #14 <java/io/PrintStream.println>\n19 return\n")])])]),s("h4",{attrs:{id:"_2-5-4-类型检查指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-类型检查指令"}},[t._v("#")]),t._v(" 2.5.4 类型检查指令")]),t._v(" "),s("p",[t._v("检查类实例或数组类型的指令："),s("code",[t._v("instanceof")]),t._v("、"),s("code",[t._v("checkcast")])]),t._v(" "),s("ol",[s("li",[t._v("指令"),s("code",[t._v("checkcast")]),t._v("用于检查类型强制转换是否可以进行。如果可以进行，那么"),s("code",[t._v("checkcast")]),t._v("指令不会改变操作数栈，否则它会抛出"),s("code",[t._v("ClassCastException")]),t._v("异常")]),t._v(" "),s("li",[t._v("指令"),s("code",[t._v("instanceof")]),t._v("用来判断给定对象是否是某一个类的实例，它会将判断结果压入操作数栈")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkCast")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 aload_1\n 1 instanceof #17 <java/lang/String>\n 4 ifeq 12 (+8)\n 7 aload_1\n 8 checkcast #17 <java/lang/String>\n11 areturn\n12 aconst_null\n13 areturn\n")])])]),s("h3",{attrs:{id:"_2-6-方法调用与返回指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-方法调用与返回指令"}},[t._v("#")]),t._v(" 2.6 方法调用与返回指令")]),t._v(" "),s("h4",{attrs:{id:"_2-6-1-方法调用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1-方法调用指令"}},[t._v("#")]),t._v(" 2.6.1 方法调用指令")]),t._v(" "),s("p",[s("code",[t._v("invokevirtual")]),t._v("指令用于调用对象的实例方法，根据对象的实际类型进行分派(虚方法分派)，支持多态。这也是"),s("code",[t._v("Java")]),t._v("语言中最常用的方法分配方式")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("invokeinterface")])])]),t._v(" "),s("p",[s("code",[t._v("invokeinterface")]),t._v("指令用于调用接口方法，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用。接口中默认方法依然是"),s("code",[t._v("invoketerface")]),t._v("，但是如果是接口中的静态方法则是"),s("code",[t._v("invokestatic")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvokeReturnTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// invokeinterface")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" com "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("invoke")]),t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 new #4 <java/lang/Thread>\n 3 dup\n 4 invokespecial #5 <java/lang/Thread.<init>>\n 7 astore_1\n 8 aload_1\n 9 invokeinterface #9 <java/lang/Runnable.run> count 1\n14 aconst_null\n15 astore_2\n16 aload_2\n17 bipush 123\n19 invokestatic #10 <java/lang/Integer.valueOf>\n22 invokeinterface #11 <java/lang/Comparable.compareTo> count 2\n27 pop\n28 return\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("invokespecial静态分派")])])]),t._v(" "),s("p",[s("code",[t._v("invokespecial")]),t._v("指令用于调用一些需要特殊处理的实例方法，包括实例初始方法构造器、私有方法和父类方法。这些方法都是静态类型绑定的，不会调用时进行动态派发")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvokeReturnTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法调用指令：invokespecial")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类实例构造方法 <init>")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" date "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父类方法")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有方法")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodPrivate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodPrivate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("invoke")]),t._v("方法对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 new #2 <java/util/Date>\n 3 dup\n 4 invokespecial #3 <java/util/Date.<init>>\n 7 astore_1\n 8 new #4 <java/lang/Thread>\n11 dup\n12 invokespecial #5 <java/lang/Thread.<init>>\n15 astore_2\n16 aload_0\n17 invokespecial #6 <java/lang/Object.toString>\n20 pop\n21 aload_0\n22 invokespecial #7 <com/valid/MethodInvokeReturnTest.methodPrivate>\n25 return\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("invokestatic静态分派")])])]),t._v(" "),s("p",[s("code",[t._v("invokestatic")]),t._v("指令用于调用命名类中的类方法("),s("code",[t._v("static")]),t._v("方法)。这是静态绑定的")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInvokeReturnTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("invoke")]),t._v("方法对应字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 invokestatic #8 <com/valid/MethodInvokeReturnTest.methodStatic>\n3 return\n")])])]),s("p",[s("code",[t._v("invokedynamic")]),t._v("调用动态绑定的方法，这个是"),s("code",[t._v("JDK7")]),t._v("后新加入的指令。用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在"),s("code",[t._v("Java")]),t._v("虚拟机内部，而"),s("code",[t._v("invokedynamic")]),t._v("指令的分派逻辑是由用户所设定的引导方法决定的")]),t._v(" "),s("h4",{attrs:{id:"_2-6-2-方法返回指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-方法返回指令"}},[t._v("#")]),t._v(" 2.6.2 方法返回指令")]),t._v(" "),s("p",[t._v("方法调用结束前，需要进行返回。方法返回指令是根据返回值的类型区分的")]),t._v(" "),s("ul",[s("li",[t._v("包括"),s("code",[t._v("ireturn")]),t._v("(当返回值是"),s("code",[t._v("boolean")]),t._v("、"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("char")]),t._v("、"),s("code",[t._v("char")]),t._v("、"),s("code",[t._v("short")]),t._v("和"),s("code",[t._v("int")]),t._v("类型时调用)、"),s("code",[t._v("lreturn")]),t._v("、"),s("code",[t._v("freturn")]),t._v("、"),s("code",[t._v("dreturn")]),t._v("和"),s("code",[t._v("areturn")])]),t._v(" "),s("li",[t._v("另外还有一条"),s("code",[t._v("return")]),t._v("指令供声明为"),s("code",[t._v("void")]),t._v("的方法、实例初始化方法及类和接口的类初始化方法使用")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("返回类型")]),t._v(" "),s("th",[t._v("返回指令")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("void")]),t._v(" "),s("td",[t._v("return")])]),t._v(" "),s("tr",[s("td",[t._v("int(boolean, byte, char, short)")]),t._v(" "),s("td",[t._v("ireturn")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("lreturn")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("freturn")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("dreturn")])]),t._v(" "),s("tr",[s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("areturn")])])])]),t._v(" "),s("p",[t._v("通过"),s("code",[t._v("ireturn")]),t._v("指令，将当前函数操作数栈的顶层元素弹出，并将这个元素压入调用者函数的操作数栈中(因为调用者非常关心函数的返回值)，所有在当前函数操作数栈中的其他元素都会被丢弃")]),t._v(" "),s("p",[t._v("如果当前返回的是"),s("code",[t._v("synchronized")]),t._v("方法，那么还会执行一个隐含的"),s("code",[t._v("monitorexit")]),t._v("指令，退出临界区。")]),t._v(" "),s("p",[t._v("最后才会丢弃这个栈帧，返回调用者")]),t._v(" "),s("h3",{attrs:{id:"_2-7-操作数栈管理指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-操作数栈管理指令"}},[t._v("#")]),t._v(" 2.7 操作数栈管理指令")]),t._v(" "),s("p",[t._v("如同操作一个普通数据结构中的堆栈那样，"),s("code",[t._v("JVM")]),t._v("提供的操作数栈管理指令，可以用于直接操作操作数栈的指令")]),t._v(" "),s("p",[t._v("这类指令包含如下内容")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("将一个或两个元素从栈顶弹出，并且直接废弃："),s("code",[t._v("pop")]),t._v("、"),s("code",[t._v("pop2")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 new #2 <java/lang/Object>\n 3 dup\n 4 invokespecial #1 <java/lang/Object.<init>>\n 7 astore_1\n 8 aload_1\n 9 invokevirtual #3 <java/lang/Object.toString>\n12 pop\n13 return\n")])])])]),t._v(" "),s("li",[s("p",[t._v("复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶："),s("code",[t._v("dup")]),t._v("、"),s("code",[t._v("dup2")]),t._v("、"),s("code",[t._v("dup_x1")]),t._v("、"),s("code",[t._v("dup2_x1")]),t._v("、"),s("code",[t._v("dup_x2")]),t._v("、"),s("code",[t._v("dup2_x2")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" info "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 new #2 <java/lang/Object>\n 3 dup\n 4 invokespecial #1 <java/lang/Object.<init>>\n 7 astore_1\n 8 aload_1\n 9 invokevirtual #3 <java/lang/Object.toString>\n12 astore_2\n13 return\n")])])])]),t._v(" "),s("li",[s("p",[t._v("将栈最顶端的两个"),s("code",[t._v("Slot")]),t._v("数值位置交换："),s("code",[t._v("swap")]),t._v("，"),s("code",[t._v("Java")]),t._v("虚拟机没有提供交换两个64位数据类型("),s("code",[t._v("long")]),t._v("、"),s("code",[t._v("double")]),t._v(")数值的指令")])]),t._v(" "),s("li",[s("p",[t._v("指令"),s("code",[t._v("nop")]),t._v("，是一个非常特殊的指令，它的字节码为"),s("code",[t._v("0x00")]),t._v("。和汇编语言中的"),s("code",[t._v("nop")]),t._v("一样，它表示什么都不做。这条指令一般用于调试、占位等")])])]),t._v(" "),s("p",[t._v("这些指令属于通用型，对栈的压入或者弹出无需指明数据类型")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")])])]),t._v(" "),s("p",[t._v("不带"),s("code",[t._v("_x")]),t._v("的指令是复制栈定数据并压入栈顶。包括两个指令，"),s("code",[t._v("dup")]),t._v("和"),s("code",[t._v("dup2")]),t._v("。"),s("code",[t._v("dup")]),t._v("的系数代表要复制的"),s("code",[t._v("Slot")]),t._v("个数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("dup")]),t._v("开头的指令用于复制一个"),s("code",[t._v("Slot")]),t._v("的数据。例如1个"),s("code",[t._v("int")]),t._v("或1个"),s("code",[t._v("reference")]),t._v("类型数据")]),t._v(" "),s("li",[s("code",[t._v("dup2")]),t._v("开头的指令用于复制"),s("code",[t._v("2")]),t._v("个"),s("code",[t._v("Slot")]),t._v("的数据。例如1个"),s("code",[t._v("long")]),t._v("，或2个"),s("code",[t._v("int")]),t._v("，或1个"),s("code",[t._v("int")]),t._v("+1个")])]),t._v(" "),s("p",[t._v("带"),s("code",[t._v("_x")]),t._v("的指令是复制栈顶数据并插入栈顶以下的某个位置。共有四个指令，"),s("code",[t._v("dup_x1")]),t._v("，"),s("code",[t._v("dup2_x1")]),t._v("，"),s("code",[t._v("dup_x2")]),t._v("，"),s("code",[t._v("dup2_x2")]),t._v("，对于带"),s("code",[t._v("_x")]),t._v("的复制插入指令，只要将指令的"),s("code",[t._v("dup")]),t._v("和"),s("code",[t._v("x")]),t._v("的系数相加，结果即为需要插入的位置。因此")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("dup_x1")]),t._v("插入位置："),s("code",[t._v("1+1=2")]),t._v("，即栈顶2个"),s("code",[t._v("Slot")]),t._v("下面")]),t._v(" "),s("li",[s("code",[t._v("dup_x2")]),t._v("插入位置："),s("code",[t._v("1+2=3")]),t._v("，即栈顶3个"),s("code",[t._v("Slot")]),t._v("下面")]),t._v(" "),s("li",[s("code",[t._v("dup2_x1")]),t._v("插入位置："),s("code",[t._v("2+1=3")]),t._v("，即栈顶3个"),s("code",[t._v("Slot")]),t._v("下面")]),t._v(" "),s("li",[s("code",[t._v("dup2_x2")]),t._v("插入位置："),s("code",[t._v("2+2=4")]),t._v("，即栈顶4个"),s("code",[t._v("Slot")]),t._v("下面")])]),t._v(" "),s("p",[s("code",[t._v("pop")]),t._v("：将栈顶的1个"),s("code",[t._v("Slot")]),t._v("数值出栈。例如1个"),s("code",[t._v("short")]),t._v("类型数值")]),t._v(" "),s("p",[s("code",[t._v("pop2")]),t._v("：将栈顶的2个"),s("code",[t._v("Slot")]),t._v("数值出栈。例如1个"),s("code",[t._v("double")]),t._v("类型数值，或者2个"),s("code",[t._v("int")]),t._v("类型数值")]),t._v(" "),s("h3",{attrs:{id:"_2-8-控制转移指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-控制转移指令"}},[t._v("#")]),t._v(" 2.8 控制转移指令")]),t._v(" "),s("p",[t._v("程序流程离不开程序控制，为了支持条件跳转，虚拟机提供了大量字节码指令，大体上可以分为")]),t._v(" "),s("ol",[s("li",[t._v("[比较指令](#2.3.3 比较指令)")]),t._v(" "),s("li",[t._v("条件转移指令")]),t._v(" "),s("li",[t._v("比较条件跳转指令")]),t._v(" "),s("li",[t._v("多条件分支跳转指令")]),t._v(" "),s("li",[t._v("无条件跳转指令等")])]),t._v(" "),s("h4",{attrs:{id:"_2-8-1-条件跳转指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-1-条件跳转指令"}},[t._v("#")]),t._v(" 2.8.1 条件跳转指令")]),t._v(" "),s("p",[t._v("条件跳转指令通常和比较指令结合使用。在条件跳转指令执行前，一般可以用以前指令进行栈顶元素的准备，然后进行条件跳转")]),t._v(" "),s("p",[t._v("条件跳转指令有："),s("code",[t._v("ifeq")]),t._v("、"),s("code",[t._v("iflt")]),t._v("、"),s("code",[t._v("ifle")]),t._v("、"),s("code",[t._v("ifne")]),t._v("、"),s("code",[t._v("ifgt")]),t._v("、"),s("code",[t._v("ifge")]),t._v("、"),s("code",[t._v("ifnull")]),t._v("、"),s("code",[t._v("ifnonnull")]),t._v("。这些指令都接受两个字节的操作数，用于计算跳转的位置(16位符号整数作为当前位置的"),s("code",[t._v("offset")]),t._v(")")]),t._v(" "),s("p",[t._v("它们的统一含义为：弹出栈顶元素，测试它是满足某一条件，如果满足条件，则跳转到给定位置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("指令")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("ifeq")]),t._v(" "),s("td",[t._v("当栈顶int类型数值等于0时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("ifne")]),t._v(" "),s("td",[t._v("当栈顶int类型数值不等于0时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("iflt")]),t._v(" "),s("td",[t._v("当栈顶int类型数值小于0时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("ifgt")]),t._v(" "),s("td",[t._v("当栈顶int类型数组大于0时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("ifge")]),t._v(" "),s("td",[t._v("当栈顶int类型数值大于等于0时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("ifnull")]),t._v(" "),s("td",[t._v("为null时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("ifnonnull")]),t._v(" "),s("td",[t._v("不为null时跳转")])])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意")])])]),t._v(" "),s("p",[t._v("与前面运算规则一致")]),t._v(" "),s("ul",[s("li",[t._v("对于"),s("code",[t._v("boolean")]),t._v("、"),s("code",[t._v("byte")]),t._v("、"),s("code",[t._v("char")]),t._v("、"),s("code",[t._v("short")]),t._v("类型的条件分支比较操作，都是使用"),s("code",[t._v("int")]),t._v("类型的比较指令完成")]),t._v(" "),s("li",[t._v("对于"),s("code",[t._v("long")]),t._v("、"),s("code",[t._v("float")]),t._v("、"),s("code",[t._v("double")]),t._v("类型的条件分支比较操作，则会先执行相应类型的比较运算指令，运算指令会返回一个整型值到操作数栈中，随后再执行"),s("code",[t._v("int")]),t._v("类型的条件分支比较操作来完成整个分支跳转")])]),t._v(" "),s("p",[t._v("由于各类型的比较最终都会转为"),s("code",[t._v("int")]),t._v("类型的比较操作，所以"),s("code",[t._v("java")]),t._v("虚拟机提供的"),s("code",[t._v("int")]),t._v("类型的条件分支指令是最为丰富和强大的")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iconst_0\n 1 istore_1\n 2 iload_1\n 3 ifne 12 (+9)\n 6 bipush 10\n 8 istore_1\n 9 goto 15 (+6)\n12 bipush 20\n14 istore_1\n15 return\n")])])]),s("h4",{attrs:{id:"_2-8-2-比较条件跳转指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-2-比较条件跳转指令"}},[t._v("#")]),t._v(" 2.8.2 比较条件跳转指令")]),t._v(" "),s("p",[t._v("比较条件跳转指令类似于比较指令和条件跳转指令的结合体，它将比较和跳转两个步骤合二为一。这类指令有："),s("code",[t._v("if_icmpeq")]),t._v("、"),s("code",[t._v("if_icmpne")]),t._v("、"),s("code",[t._v("if_icmplt")]),t._v("、"),s("code",[t._v("if_icmpgt")]),t._v("、"),s("code",[t._v("if_icmple")]),t._v("、"),s("code",[t._v("if_acmpeq")]),t._v("和"),s("code",[t._v("if_acmpne")]),t._v("。其中指令助记符加上"),s("code",[t._v("if_")]),t._v('后，以字符"i"开头的指令针对'),s("code",[t._v("int")]),t._v("整数操作(也包括"),s("code",[t._v("short")]),t._v("和"),s("code",[t._v("byte")]),t._v("类型)，以字符"),s("code",[t._v("a")]),t._v("开头的指令表示对象引用的比较")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("指令")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("if_icmpeq")]),t._v(" "),s("td",[t._v("比较栈顶两int类型数值大小，当前者等于后者时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_ifmpne")]),t._v(" "),s("td",[t._v("比较栈顶两int类型数值大小，当前者不等于后者时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_icmplt")]),t._v(" "),s("td",[t._v("比较栈顶两int类型数值大小，当前者小于等于后者时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_icmple")]),t._v(" "),s("td",[t._v("比较栈顶两int类型数值大小，当前者等于后者时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_icmpgt")]),t._v(" "),s("td",[t._v("比较栈顶两int类型数值大小，当前者大于后者时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_ifmpge")]),t._v(" "),s("td",[t._v("比较栈顶两int类型数值大小，当前者大于等于后者时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_acmpeq")]),t._v(" "),s("td",[t._v("比较栈顶两引用类型数值，当结果相等时跳转")])]),t._v(" "),s("tr",[s("td",[t._v("if_acmpne")]),t._v(" "),s("td",[t._v("比较栈顶两引用类型数值，当结果不相等时跳转")])])])]),t._v(" "),s("p",[t._v("这些指令都接受两个字节的操作数作为参数，用于计算跳转的位置。同时在执行指令时，栈顶需要准备两个元素进行比较。指令执行完成后，栈顶的这两个元素被清空，且没有任何数据入栈。如果预设条件成立，则执行跳转，否则，继续执行下一条语句")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 bipush 10\n 2 istore_1\n 3 bipush 20\n 5 istore_2\n 6 getstatic #8 <java/lang/System.out>\n 9 iload_1\n10 iload_2\n11 if_icmpge 18 (+7)\n14 iconst_1\n15 goto 19 (+4)\n18 iconst_0\n19 invokevirtual #9 <java/io/PrintStream.println>\n22 return\n")])])]),s("h4",{attrs:{id:"_2-8-3-多条件分支跳转指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-3-多条件分支跳转指令"}},[t._v("#")]),t._v(" 2.8.3 多条件分支跳转指令")]),t._v(" "),s("p",[t._v("多条件分支跳转指令是专为"),s("code",[t._v("switch-case")]),t._v("语句设计的，主要有"),s("code",[t._v("tableswitch")]),t._v("和"),s("code",[t._v("lookupswitch")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("名称")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("tableswitch")]),t._v(" "),s("td",[t._v("用于switch条件跳转，case值连续")])]),t._v(" "),s("tr",[s("td",[t._v("lookupswitch")]),t._v(" "),s("td",[t._v("用于switch条件跳转，case值不连续")])])])]),t._v(" "),s("p",[t._v("从助记符上看，两者都是"),s("code",[t._v("switch")]),t._v("语句的实现，它们的区别是")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tableswitch")]),t._v("要求多个条件分支值是连续的，它内部值存放起始值和终止值，以及若干个跳转偏移量，通过给定的操作数"),s("code",[t._v("index")]),t._v("，可以立即定位到跳转偏移量位置，因此效率比较高")]),t._v(" "),s("li",[t._v("指令"),s("code",[t._v("lookupswitch")]),t._v("内部存放着各个离散的"),s("code",[t._v("case-offset")]),t._v("对，每次执行都要搜索全部的"),s("code",[t._v("case-offset")]),t._v("对，找到匹配的"),s("code",[t._v("case")]),t._v("值，并根据对应的"),s("code",[t._v("offset")]),t._v("计算跳转地址，因此效率较低")])]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("tableswitch")]),t._v("的示意图如下图所示。由于"),s("code",[t._v("tableswitch")]),t._v("的"),s("code",[t._v("case")]),t._v("值是连续的，因此只需要记录最低值和最高值，以及每一项对应的"),s("code",[t._v("offset")]),t._v("偏移量，根据给定的"),s("code",[t._v("index")]),t._v("值通过简单的计算即可直接定位到"),s("code",[t._v("offset")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("连续"),s("code",[t._v("tableswitch")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("switch1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" select"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iload_1\n 1 tableswitch 1 to 3\t1:  28 (+27)\n\t2:  34 (+33)\n\t3:  40 (+39)\n\tdefault:  46 (+45)\n28 bipush 10\n30 istore_2\n31 goto 49 (+18)\n34 bipush 20\n36 istore_2\n37 goto 49 (+12)\n40 bipush 30\n42 istore_2\n43 goto 49 (+6)\n46 bipush 40\n48 istore_2\n49 return\n")])])])]),t._v(" "),s("li",[s("p",[t._v("不连续"),s("code",[t._v("lookupswitch")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("switch2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" select"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("select"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iload_1\n 1 lookupswitch 3\n\t1:  42 (+41)\n\t3:  36 (+35)\n\t7:  48 (+47)\n\tdefault:  54 (+53)\n36 bipush 30\n38 istore_2\n39 goto 57 (+18)\n42 bipush 10\n44 istore_2\n45 goto 57 (+12)\n48 bipush 70\n50 istore_2\n51 goto 57 (+6)\n54 bipush 100\n56 istore_2\n57 return\n")])])]),s("p",[t._v("指令"),s("code",[t._v("lookupswitch")]),t._v("处理的是离散的"),s("code",[t._v("case")]),t._v("值，但是出于效率的考虑，将"),s("code",[t._v("case-offset")]),t._v("对按照"),s("code",[t._v("case")]),t._v("值大小排序，给定"),s("code",[t._v("index")]),t._v("时，需要查找与"),s("code",[t._v("index")]),t._v("相等的"),s("code",[t._v("case")]),t._v("，获得其"),s("code",[t._v("offset")]),t._v("，如果找不到则跳转"),s("code",[t._v("default")]),t._v("。")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606091452.png"}})])]),t._v(" "),s("h4",{attrs:{id:"_2-8-4-无条件跳转指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-4-无条件跳转指令"}},[t._v("#")]),t._v(" 2.8.4 无条件跳转指令")]),t._v(" "),s("p",[t._v("目前主要的无条件跳转指令为"),s("code",[t._v("goto")]),t._v("。指令"),s("code",[t._v("goto")]),t._v("接受两个字节的操作数，共同组成一个带符号的整数，用于指定指令的偏移量，指令执行的目的就是跳转到偏移量给定的位置处")]),t._v(" "),s("p",[t._v("如果指令偏移量太大，超过双字节的带符号整数的范围，则可以使用指令"),s("code",[t._v("goto_w")]),t._v("，它和"),s("code",[t._v("goto")]),t._v("有相同的作用，但是它接收4个字节的操作数，可以表示更大的地址范围")]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("jsr")]),t._v("、"),s("code",[t._v("jsr_w")]),t._v("、"),s("code",[t._v("ret")]),t._v("虽然也是无条件跳转的，但主要用于"),s("code",[t._v("try-finally")]),t._v("语句，且已经被虚拟机逐渐废弃。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("指令")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("goto")]),t._v(" "),s("td",[t._v("无条件跳转")])]),t._v(" "),s("tr",[s("td",[t._v("got_w")]),t._v(" "),s("td",[t._v("无条件跳转(宽索引)")])]),t._v(" "),s("tr",[s("td",[t._v("jsr")]),t._v(" "),s("td",[t._v("跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶")])]),t._v(" "),s("tr",[s("td",[t._v("jsr_w")]),t._v(" "),s("td",[t._v("跳转至指定32位offset位置，并将jsr_w下一条指令地址压入栈顶")])]),t._v(" "),s("tr",[s("td",[t._v("ret")]),t._v(" "),s("td",[t._v("返回至指定的局部变量所给出的指令位置(一般与jsr、jsr_w)联合使用")])])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("whileTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iconst_0\n 1 istore_1\n 2 iload_1\n 3 bipush 100\n 5 if_icmpge 14 (+9)\n 8 iinc 1 by 1\n11 goto 2 (-9)\n14 return\n")])])]),s("h3",{attrs:{id:"_2-9-异常处理指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-异常处理指令"}},[t._v("#")]),t._v(" 2.9 异常处理指令")]),t._v(" "),s("h4",{attrs:{id:"_2-9-1-抛出异常指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-1-抛出异常指令"}},[t._v("#")]),t._v(" 2.9.1 抛出异常指令")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("athrow")]),t._v("指令")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java")]),t._v("程序中显示抛出异常的操作("),s("code",[t._v("throw")]),t._v("语句)都是由"),s("code",[t._v("athrow")]),t._v("指令来实现。除了使用"),s("code",[t._v("throw")]),t._v("语句显示抛出异常情况之外，"),s("code",[t._v("JVM")]),t._v("规范还规定了许多运行时异常会在其他"),s("code",[t._v("Java")]),t._v("虚拟机指令检测到异常状况时自动抛出。例如，在之前介绍的整数运算时，当除数为零时，虚拟机会在"),s("code",[t._v("idiv")]),t._v("或者"),s("code",[t._v("ldiv")]),t._v("指令中抛出"),s("code",[t._v("ArithmeticException")]),t._v("异常")])]),t._v(" "),s("li",[s("p",[t._v("注意")]),t._v(" "),s("p",[t._v("正常情况下，操作数栈的压入弹出都是一条条指令完成的。唯一的例外情况是在抛异常时，"),s("code",[t._v("Java")]),t._v("虚拟机会清除操作数栈上的所有内容，而后将异常实例压入调用者操作数栈上")])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("throwZero")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数值为0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iload_1\n 1 ifne 14 (+13)\n 4 new #10 <java/lang/RuntimeException>\n 7 dup\n 8 ldc #11 <参数值为0>\n10 invokespecial #12 <java/lang/RuntimeException.<init>>\n13 athrow\n14 return\n")])])]),s("p",[t._v("方法声明处显示抛出的异常会存储在方法的异常属性中")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606100018.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-9-2-异常处理与异常表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-2-异常处理与异常表"}},[t._v("#")]),t._v(" 2.9.2 异常处理与异常表")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java")]),t._v("虚拟机中，处理异常("),s("code",[t._v("catch")]),t._v("语句)不是由字节码指令实现的(早期使用"),s("code",[t._v("jsr")]),t._v("、"),s("code",[t._v("ret")]),t._v("指令)，而是采用异常表来完成的")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("异常表")])])]),t._v(" "),s("p",[t._v("如果一个方法定义了一个"),s("code",[t._v("try-catch")]),t._v("或者"),s("code",[t._v("try-finally")]),t._v("的异常处理，就会创建一个异常表。它包含了每个异常处理或者"),s("code",[t._v("finally")]),t._v("块的信息。异常表保存了每个异常的处理信息。")]),t._v(" "),s("ol",[s("li",[t._v("起始位置")]),t._v(" "),s("li",[t._v("结束位置")]),t._v(" "),s("li",[t._v("程序计数器记录的代码处理的偏移地址")]),t._v(" "),s("li",[t._v("被捕获的异常类在常量池中的索引")])]),t._v(" "),s("p",[t._v("当一个异常被抛出时，"),s("code",[t._v("JVM")]),t._v("会在当前的方法里寻找一个匹配的处理，如果没有找到，这个方法会强制结束并弹出当前栈帧，并且异常会重新抛给上层调用的方法(再调用方法栈帧)。如果所有栈帧弹出前仍然没有找到合适的异常处理，这个线程将终止。如果这个异常在最后一个非守护线程里抛出，将会导致"),s("code",[t._v("JVM")]),t._v("终止，比如这个线程是个"),s("code",[t._v("main")]),t._v("线程")]),t._v(" "),s("p",[t._v("不管什么时候抛出异常，如果异常处理最终匹配了所以异常类型，代码就会继续执行。在这种情况下，如果方法结束后没有抛出异常，仍然执行"),s("code",[t._v("finally")]),t._v("块，在"),s("code",[t._v("return")]),t._v("前，它直接跳到"),s("code",[t._v("finally")]),t._v("块来完成目标")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exceptionTable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 iconst_1\n 1 iconst_0\n 2 idiv\n 3 istore_1\n 4 goto 12 (+8)\n 7 astore_1\n 8 aload_1\n 9 invokevirtual #14 <java/lang/Exception.printStackTrace>\n12 return\n")])])]),s("h3",{attrs:{id:"_2-10-同步控制指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-同步控制指令"}},[t._v("#")]),t._v(" 2.10 同步控制指令")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("虚拟机支持两种同步结构：方法级的同步和方法内部一段指令序列的同步，这两种同步都是使用"),s("code",[t._v("monitor")]),t._v("来支持的")]),t._v(" "),s("h4",{attrs:{id:"_2-10-1-方法级的同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-1-方法级的同步"}},[t._v("#")]),t._v(" 2.10.1 方法级的同步")]),t._v(" "),s("p",[t._v("方法级的同步：是隐式的，即无须通过字节码指令来控制，它实现在方法调用和返回操作之中，虚拟机可以从方法常量池的方法表结构中的"),s("code",[t._v("ACC_SYNCHRONIZED")]),t._v("访问标志得知一个方法是否声明为同步方法")]),t._v(" "),s("p",[t._v("当调用方法时，调用指令将会检查方法的"),s("code",[t._v("ACC_SYNCHRONIZED")]),t._v("访问标志是否设置")]),t._v(" "),s("ol",[s("li",[t._v("如果设置了，执行线程将先持有同步锁，然后执行方法。最后在方法完成(无论是正常完成还是非正常完成)时释放同步锁")]),t._v(" "),s("li",[t._v("在方法执行期间，执行线程持有了同步锁，其他任何线程都无法再获得同一个锁")]),t._v(" "),s("li",[t._v("如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那么这个同步方法所持有的锁将在异常抛到同步方法之外时自动释放")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("0 iinc 1 by 1\n3 return\n")])])]),s("p",[t._v("虽然字节码体现不出同步方法，但是在方法的访问标识中可以看出")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606103715.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"_2-10-2-同步代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-2-同步代码块"}},[t._v("#")]),t._v(" 2.10.2 同步代码块")]),t._v(" "),s("p",[t._v("同步一段指令集序列：通常是由"),s("code",[t._v("java")]),t._v("中的"),s("code",[t._v("synchronized")]),t._v("语句块来表示的。"),s("code",[t._v("JVM")]),t._v("的指令集有"),s("code",[t._v("monitorenter")]),t._v("和"),s("code",[t._v("monitorexit")]),t._v("两条指令来支持"),s("code",[t._v("synchronized")]),t._v("关键字的语义")]),t._v(" "),s("p",[t._v("当一个线程进入同步代码块时，它使用"),s("code",[t._v("monitorenter")]),t._v("指令请求进入。如果当前对象的监视计数器为0，则它会被准许进入，若为1，则判断持有当前监视器的线程是否为自己，如果是则进入，否则等待，知道对象的监视计数器为0，才会被允许进入同步块")]),t._v(" "),s("p",[t._v("当线程退出同步代码块时，需要使用"),s("code",[t._v("monitorexit")]),t._v("声明退出。在"),s("code",[t._v("Java")]),t._v("虚拟机中国年，任何对象都有一个监视器与之关联，用来判断对象是否被锁定，当监视器被持有后，对象处于锁定状态")]),t._v(" "),s("p",[t._v("指令"),s("code",[t._v("monitorenter")]),t._v("和"),s("code",[t._v("monitorexit")]),t._v("在执行时，都需要在操作数栈顶压入对象，之后"),s("code",[t._v("monitorenter")]),t._v("和"),s("code",[t._v("monitorexit")]),t._v("的锁定和释放都是针对这个对象的监视器进行的")]),t._v(" "),s("p",[t._v("下图展示了监视器如何保护临界区代码不会同时被多个线程访问，只有当线程4离开临界区后，线程1、2、3才有可能进入")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606104624.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("示例")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subtract")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对应的字节码")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 0 ldc #3 <java/lang/Object>\n 2 dup\n 3 astore_1\n 4 monitorenter\n 5 aload_0\n 6 dup\n 7 getfield #2 <com/valid/DupTest.i>\n10 iconst_1\n11 isub\n12 putfield #2 <com/valid/DupTest.i>\n15 aload_1\n16 monitorexit\n17 goto 25 (+8)\n20 astore_2\n21 aload_1\n22 monitorexit\n23 aload_2\n24 athrow\n25 return\n")])])]),s("p",[t._v("异常表")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606105634.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_3-类的加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-类的加载"}},[t._v("#")]),t._v(" 3. 类的加载")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java")]),t._v("中数据类型分为基本数据类型和引用数据类型。基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载，是按照"),s("code",[t._v("Java")]),t._v("虚拟机规范，从"),s("code",[t._v("class")]),t._v("文件到加载到内存中的类，到类卸载出内存为止，它的整个声明周期包括如下7个阶段")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606131008.png"}}),t._v(" "),s("p",[t._v("从类的使用角度来看")]),t._v(" "),s("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606131150.png"}}),t._v(" "),s("h3",{attrs:{id:"_3-1-loading加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-loading加载"}},[t._v("#")]),t._v(" 3.1 Loading加载")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("理解")])])]),t._v(" "),s("p",[t._v("所谓的加载，简言之就是将"),s("code",[t._v("Java")]),t._v("类的字节码加载到机器内存中，并在内存中构建出"),s("code",[t._v("Java")]),t._v("类的原型--类模板对象。类模板对象，起始就是"),s("code",[t._v("Java")]),t._v("类在"),s("code",[t._v("JVM")]),t._v("内存中的一个快照，"),s("code",[t._v("JVM")]),t._v("将从字节码文件中解析出的常量池、类字段、类方法等信息存储到类模板中，这样"),s("code",[t._v("JVM")]),t._v("在运行期便能通过类模板而获取"),s("code",[t._v("Java")]),t._v("类中的任意信息，能够对"),s("code",[t._v("Java")]),t._v("类的成员变量进行遍历，也能进行"),s("code",[t._v("Java")]),t._v("方法的调用。反射的机制即基于这一基础。如果"),s("code",[t._v("JVM")]),t._v("没有将"),s("code",[t._v("Java")]),t._v("类的声明信息存储起来，则"),s("code",[t._v("JVM")]),t._v("在运行期间也无法反射")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("加载完成的操作")])])]),t._v(" "),s("p",[t._v("加载阶段，就是查找加载类的二进制数据，生成"),s("code",[t._v("Class")]),t._v("的实例")]),t._v(" "),s("p",[t._v("在加载类时，"),s("code",[t._v("Java")]),t._v("虚拟机必须完成以下3件事")]),t._v(" "),s("ul",[s("li",[t._v("通过类的全名，获取类的二进制流")]),t._v(" "),s("li",[t._v("解析类的二进制数据流为方法区内的数据结构("),s("code",[t._v("java")]),t._v("类模型)")]),t._v(" "),s("li",[t._v("创建"),s("code",[t._v("java.lang.Class")]),t._v("类的实例，表示该类型，作为方法区这个类的各种数据的访问入口")])]),t._v(" "),s("h4",{attrs:{id:"_3-1-1-二进制流的获取方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-二进制流的获取方式"}},[t._v("#")]),t._v(" 3.1.1 二进制流的获取方式")]),t._v(" "),s("p",[t._v("对于类的二进制数据流，虚拟机可以通过多种途径产生或获得")]),t._v(" "),s("ol",[s("li",[t._v("虚拟机从文件系统中读取一个"),s("code",[t._v("class")]),t._v("文件")]),t._v(" "),s("li",[t._v("读入"),s("code",[t._v("jar")]),t._v("、"),s("code",[t._v("zip")]),t._v("等归档数据包，提取类文件")]),t._v(" "),s("li",[t._v("事先存放在数据库中的类的二进制数据")]),t._v(" "),s("li",[t._v("使用类似"),s("code",[t._v("HTTP")]),t._v("之类的协议通过网络进行加载")]),t._v(" "),s("li",[t._v("在运行时生成一段"),s("code",[t._v("Class")]),t._v("的二进制信息等")])]),t._v(" "),s("p",[t._v("在获取到类的二进制信息后，"),s("code",[t._v("Java")]),t._v("虚拟机就会处理这些数据，并最终转换成一个"),s("code",[t._v("java.lang.Class")]),t._v("的实例")]),t._v(" "),s("p",[t._v("如果数据数据不是"),s("code",[t._v("ClassFile")]),t._v("的结构，则会抛出"),s("code",[t._v("ClassFormatError")])]),t._v(" "),s("h4",{attrs:{id:"_3-1-2-类模型与class实例的位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-类模型与class实例的位置"}},[t._v("#")]),t._v(" 3.1.2 类模型与Class实例的位置")]),t._v(" "),s("p",[s("strong",[t._v("类模型的位置")]),t._v("：加载的类在"),s("code",[t._v("JVM")]),t._v("中创建相应的类结构，类结构会存储在方法区("),s("code",[t._v("JDK8")]),t._v("之前：永久代；"),s("code",[t._v("JDK8")]),t._v("之后：元空间)")]),t._v(" "),s("p",[s("code",[t._v("Class")]),t._v("实例的位置：类将"),s("code",[t._v(".class")]),t._v("文件加载至元空间后，会在堆中创建一个"),s("code",[t._v("Java.lang.Class")]),t._v("对象，用来封装类位于方法区内的数据结构，该"),s("code",[t._v("Class")]),t._v("对象是在加载类的过程中创建的，每个类都对应有一个"),s("code",[t._v("Class")]),t._v("类型的对象")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606153919.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("Class")]),t._v("类的构造器是私有的，只有"),s("code",[t._v("JVM")]),t._v("才能够创建")]),t._v(" "),s("p",[s("code",[t._v("java.lang.Class")]),t._v("实例是访问类型元数据的接口，也是实现反射的关键数据、入口。通过"),s("code",[t._v("Class")]),t._v("类提供的接口，可以获得目标所关联的"),s("code",[t._v(".class")]),t._v("文件中具体的数据结构：方法、字段等信息")]),t._v(" "),s("h4",{attrs:{id:"_3-1-3-数组类的加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-数组类的加载"}},[t._v("#")]),t._v(" 3.1.3 数组类的加载")]),t._v(" "),s("p",[t._v("创建数组类的情况稍微有点特殊，因为数组本身并不是由类加载器负责创建，而是由"),s("code",[t._v("JVM")]),t._v("在运行时根据需要而直接创建的，但数组的元素类型仍然需要依靠类加载器去创建。创建数组类(下述简称A)的过程")]),t._v(" "),s("ol",[s("li",[t._v("如果数组的元素类型是引用类型，那么遵循定义的加载过程递归加载和创建数组A的元素类型")]),t._v(" "),s("li",[s("code",[t._v("JVM")]),t._v("使用指定的元素类型和数组维度来创建新的数组类")])]),t._v(" "),s("p",[t._v("如果数组的元素类型是引用类型，数组类的可访问性就由数元素类型的可访问性决定，否则数组类的可访问性将被缺省定义为"),s("code",[t._v("public")])]),t._v(" "),s("h3",{attrs:{id:"_3-2-linking链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-linking链接"}},[t._v("#")]),t._v(" 3.2 Linking链接")]),t._v(" "),s("h4",{attrs:{id:"_3-2-1-验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-验证"}},[t._v("#")]),t._v(" 3.2.1 验证")]),t._v(" "),s("p",[t._v("验证阶段"),s("code",[t._v("Verification")]),t._v("当类加载到系统后，就开始链接操作，验证是连接操作的第一步。它的目的是保证加载的字节码是合法、合理并符合规范的")]),t._v(" "),s("p",[t._v("验证的步骤比较复杂，实际要验证的项目也很多，大体上上"),s("code",[t._v("Java")]),t._v("虚拟机需要做以下检查")]),t._v(" "),s("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606155253.png"}}),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("整体说明")])])]),t._v(" "),s("p",[t._v("验证的内容涵盖了类数据信息的格式验证、语义检查、字节码验证，以及符号引用验证等")]),t._v(" "),s("ul",[s("li",[t._v("其中"),s("strong",[t._v("格式验证会和加载阶段一起执行")]),t._v("。验证通过之后，类加载器才会成功将类的二进制数据信息加载到方法区中")]),t._v(" "),s("li",[t._v("格式验证之外的验证操作将会在方法区中进行")])]),t._v(" "),s("p",[t._v("链接阶段的验证虽然拖慢了加载速度，但是它避免了在字节码运行时还需要进行各种检查")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("具体说明")])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("格式验证：是否以魔数"),s("code",[t._v("oxCAFEBABE")]),t._v("开头，主版本号和副版本号是否在当前"),s("code",[t._v("Java")]),t._v("虚拟机的支持范围，数据中每一项是否都拥有正确的长度等")])]),t._v(" "),s("li",[s("p",[t._v("语义检查："),s("code",[t._v("Java")]),t._v("虚拟机还会进行字节码得到语义检查，但凡在语义上不符合规范的，虚拟机也不会给予验证通过。比如：")]),t._v(" "),s("p",[t._v("是否所有的类都有父类的存在(在"),s("code",[t._v("Java")]),t._v("里，出了"),s("code",[t._v("Object")]),t._v("外，其他类都应该有父类)")]),t._v(" "),s("p",[t._v("是否一些被定义为"),s("code",[t._v("final")]),t._v("的方法或者类被重写或继承了")]),t._v(" "),s("p",[t._v("非抽象类是否实现了所有抽象方法或者接口方法")]),t._v(" "),s("p",[t._v("是否存在不兼容的方法(比如方法的签名除了返回值不同，其他都一样，这种方法会让虚拟机无从下手调度；"),s("code",[t._v("abstract")]),t._v("情况下的方法，就不能是"),s("code",[t._v("final")]),t._v("的了)")])]),t._v(" "),s("li",[s("p",[t._v("字节码验证："),s("code",[t._v("Java")]),t._v("虚拟机还会进行字节码验证，字节码验证也是验证过程中最为复杂的一个过程。它试图通过对字节码流的分心，判断字节码是否可以被正确的执行，比如：")]),t._v(" "),s("p",[t._v("在字节码的执行过程中，是否会跳转到一条不存在的指令")]),t._v(" "),s("p",[t._v("函数的调用是否传递给了正确类型的参数")]),t._v(" "),s("p",[t._v("变量的赋值是不是给了正确的数据类型等")])])]),t._v(" "),s("p",[t._v("栈映射帧"),s("code",[t._v("StackMapTable")]),t._v("就是在这个阶段，用于检测在特定的字节码处，其局部变量表和操作数栈是否有着正确的数据类型。")]),t._v(" "),s("p",[t._v("但遗憾的是，"),s("code",[t._v("100%")]),t._v("准确地判断一段字节码是否可以被安全执行时无法实现的，因此该过程只是尽可能地检查出可以预知的明显的问题。如果在这个阶段无法通过检查，虚拟机也不会正确装载这个类。但是，如果通过了这个阶段的检查，也不能说明这个累是完全没有问题的")]),t._v(" "),s("p",[t._v("在前面的3次检查中，已经排除了文件格式错误语义错误以及字节码的不正确性。但是依然不能确保类是没有问题的")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("校验器还将进行符号引用的验证。"),s("code",[t._v("Class")]),t._v("文件在其常量池会通过字符串记录自己将要使用的其他类或者方法。因此，在校验阶段，虚拟机还会检查这些类或者方法确实是存在的，并且当前类是权限访问这些数据，如果一个需要使用类无法在系统找到，则会抛出"),s("code",[t._v("NoClassDefFoundError")]),t._v("，如果一个方法无法被找到，则会抛出"),s("code",[t._v("NoSuchMethodError")]),t._v("。"),s("strong",[t._v("此阶段在解析环节才会执行")])])]),t._v(" "),s("h4",{attrs:{id:"_3-2-2-准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-准备"}},[t._v("#")]),t._v(" 3.2.2 准备")]),t._v(" "),s("p",[t._v("准备阶段"),s("code",[t._v("Preparation")]),t._v("，简言之，为"),s("strong",[t._v("类的静态变量")]),t._v("分配内存，并将其初始化为默认值")]),t._v(" "),s("p",[t._v("当一个类验证通过时，虚拟机就会进入准备阶段，在这个阶段，虚拟机就会为这个类分配相应的内存空间，并设置默认初始值。"),s("code",[t._v("Java")]),t._v("虚拟机为各类型变量默认的初始值如表所示")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("默认初始值")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("(byte)0")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("(short)0")])]),t._v(" "),s("tr",[s("td",[t._v("int")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("0L")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("0.0f")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("0.0")])]),t._v(" "),s("tr",[s("td",[t._v("char")]),t._v(" "),s("td",[t._v("\\u0000")])]),t._v(" "),s("tr",[s("td",[t._v("boolean")]),t._v(" "),s("td",[t._v("false")])]),t._v(" "),s("tr",[s("td",[t._v("reference")]),t._v(" "),s("td",[t._v("null")])])])]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("并不支持"),s("code",[t._v("boolean")]),t._v("类型，对于"),s("code",[t._v("boolean")]),t._v("类型，内部实现是"),s("code",[t._v("int")]),t._v("，由于"),s("code",[t._v("int")]),t._v("的默认值是"),s("code",[t._v("0")]),t._v("，"),s("code",[t._v("boolean")]),t._v("的默认值就是"),s("code",[t._v("false")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意")])])]),t._v(" "),s("ol",[s("li",[t._v("这里不包含基本数据类型的字段用"),s("code",[t._v("static final")]),t._v("修饰的情况，因为"),s("code",[t._v("final")]),t._v("在编译的时候就会分配了，准备阶段会显式赋值")]),t._v(" "),s("li",[t._v("注意这里不会为实例变量分配初始化，类变量会分配下方法区中，而实例变量是会随着对象一起分配到"),s("code",[t._v("Java")]),t._v("堆中")]),t._v(" "),s("li",[t._v("这个阶段并不会向初始化阶段那样会有初始化或者代码被执行")])]),t._v(" "),s("h4",{attrs:{id:"_3-2-3-resolution解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-resolution解析"}},[t._v("#")]),t._v(" 3.2.3 Resolution解析")]),t._v(" "),s("p",[t._v("解析阶段"),s("code",[t._v("Resolution")]),t._v("，简言之，将类、接口、字段和方法的符号引用转换为直接引用")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("具体描述")])])]),t._v(" "),s("p",[t._v("符号引用就是一些字面量的引用，和虚拟机的内部数据结构和内存布局无关。比较容易理解的就是在"),s("code",[t._v("Class")]),t._v("类文件中，通过常量池进行了大量的符号引用。但是在程序实际运行时，只有符号引用是不够的，比如当下"),s("code",[t._v("println()")]),t._v("方法被调用时，系统需要明确知道该方法的位置")]),t._v(" "),s("p",[t._v("举例：输出操作"),s("code",[t._v("System.out.println()")]),t._v("对应的字节码。"),s("code",[t._v("invokevirtual #24 <java/io/PrintStream.ptintln")])]),t._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210606212138.png"}}),t._v(" "),s("p",[t._v("以方法为例，"),s("code",[t._v("Java")]),t._v("虚拟机为每个类都准备了一张方法表，将 其所有的方法都列在表中，当需要调用一个类的方法的时候，只要知道这个方法在方法表中的位置，从而使得方法被成功调用。通过解析操作，符号引用就可以转变为目标方法在类中方法表中的位置，从而使得方法如果被成功调用")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("小结")])])]),t._v(" "),s("p",[t._v("所谓解析就是将符号引用转为直接引用，也就是得到类、字段、方法在内存中的指针或者偏移量。因此，可以说，如果直接引用存在，那么可以肯定信息系统中存在该类、方法或者字段。但只存在符号引用，不能确定系统中一定存在该结构")]),t._v(" "),s("p",[t._v("不过"),s("code",[t._v("Java")]),t._v("虚拟机规范并没有明确要求解析阶段一定要按照顺序执行。在"),s("code",[t._v("HotSpot VM")]),t._v("中，加载、验证、准备和初始化会按照顺序有条不紊地执行，但链接阶段中的解析操作往往会伴随着"),s("code",[t._v("JVM")]),t._v("在执行完成初始化之后再执行")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("字符串的复习")])])]),t._v(" "),s("p",[t._v("当在"),s("code",[t._v("Java")]),t._v("代码中直接使用字符串常量时，就会在类中出现"),s("code",[t._v("CONSTANT_String")]),t._v("，它表示字符串常量，并且会引用一个"),s("code",[t._v("CONSTANT_UTF8")]),t._v("的常量项。在"),s("code",[t._v("Java")]),t._v("虚拟机内部运行中的常量中，会维护一张字符串拘留表"),s("code",[t._v("intern")]),t._v("，它会保存所有出现过的字符串常量，并且没有重复项，只要以"),s("code",[t._v("CONSTANT_String")]),t._v("形式出现的字符串也都会出现在这张表中。使用"),s("code",[t._v("String.intern()")]),t._v("方法可以得到一个字符串在拘留表中的引用，因为该表中没有重复项，所以任何字面量相同的字符串的"),s("code",[t._v("String.intern()")]),t._v("方法返回总是相等的")]),t._v(" "),s("h3",{attrs:{id:"_3-3-initialization初始化阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-initialization初始化阶段"}},[t._v("#")]),t._v(" 3.3 Initialization初始化阶段")]),t._v(" "),s("p",[t._v("初始化阶段，简言之，为类的静态变量赋予正确的初始值。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("具体描述")])])]),t._v(" "),s("p",[t._v("类的初始化是类装载的最后一个阶段。如果前面的步骤都没有问题，那么表示类可以顺利装载到系统中 。此时，类才会开始执行"),s("code",[t._v("Java")]),t._v("字节码。(即：到了初始化阶段，才真正开始执行类中定义的"),s("code",[t._v("Java")]),t._v("程序代码)")]),t._v(" "),s("p",[t._v("初始化阶段的重要工作是执行类的初始化方法："),s("code",[t._v("<clinit>()")]),t._v("方法")]),t._v(" "),s("ul",[s("li",[t._v("该方法仅能由"),s("code",[t._v("Java")]),t._v("编译器生成并由"),s("code",[t._v("JVM")]),t._v("调用，程序开发者无法自定义一个同名的方法，更无法直接在"),s("code",[t._v("Java")]),t._v("程序中调用该方法，虽然该方法也是由字节码指令所组成")]),t._v(" "),s("li",[t._v("它是由静态成员的赋值语句以及"),s("code",[t._v("static")]),t._v("语句块合并产生的")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")])])]),t._v(" "),s("p",[t._v("在加载一个类之前，虚拟机总是会试图加载该类的父类，因此父类的"),s("code",[t._v("<clinit>")]),t._v("总是在子类"),s("code",[t._v("<clinit>")]),t._v("之前被调用。也就是说，父类的"),s("code",[t._v("static")]),t._v("块优先级高于子类")]),t._v(" "),s("h4",{attrs:{id:"_3-3-1-static与fianl搭配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-static与fianl搭配"}},[t._v("#")]),t._v(" 3.3.1 static与fianl搭配")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("编译器并不会为所有的类都产生"),s("code",[t._v("<clinit>()")]),t._v("初始化方法。哪些类在编译为字节码后，字节码文件中将不会包含"),s("code",[t._v("<clinit>()")]),t._v("方法？")]),t._v(" "),s("ul",[s("li",[t._v("一个类中并没有声明任何的类变量，也没有静态代码块时")]),t._v(" "),s("li",[t._v("一个类中声明类变量，但是没有明确使用类变量的初始化语句以及静态代码块来执行初始化操作时")]),t._v(" "),s("li",[t._v("一个类中包含"),s("code",[t._v("static final")]),t._v("修饰的基本数据类型的字段，这些类字段初始化语句采用编译时常量表达式")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Initialization")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化阶段中赋值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" INT_CONSTANT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备阶段赋值")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" INTEGER_CONSTANT1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化阶段中赋值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" INTEGER_CONSTANT2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化阶段汇总赋值")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                               \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备阶段赋值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化阶段赋值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-3-2-clinit-的线程安全性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-clinit-的线程安全性"}},[t._v("#")]),t._v(" 3.3.2 <clinit>的线程安全性")]),t._v(" "),s("p",[t._v("<clinit>方法的调用，也就是类的初始化，虚拟机会在内部确保其多线程环境中的安全性")]),t._v(" "),s("p",[t._v("虚拟机只会保证一个类的"),s("code",[t._v("<clinit>")]),t._v("方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只有一个线程去执行这个类的"),s("code",[t._v("<clinit>")]),t._v("方法，其他线程都需要阻塞等待，知道活动线程执行"),s("code",[t._v("<clinit>")]),t._v("方法完毕")]),t._v(" "),s("p",[t._v("正是因为函数"),s("code",[t._v("<clinit>")]),t._v("带锁线程安全的，因此，如果一个类的"),s("code",[t._v("<clinit>")]),t._v("方法中有耗时很长的操作，就可能造成多个线程阻塞，引发死锁。并且这种死锁是很难发现的，因为看起来它们并没有可用的锁信息")]),t._v(" "),s("p",[t._v("如果之前的线程成功加载了类，则等在队列中的线程就没有机会再执行"),s("code",[t._v("<clinit>()")]),t._v("方法了。那么，当需要使用这个类时，虚拟机会直接返回给它已经准备好的信息")]),t._v(" "),s("h4",{attrs:{id:"_3-3-3-主动使用与被动使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-3-主动使用与被动使用"}},[t._v("#")]),t._v(" 3.3.3 主动使用与被动使用")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("程序对类的使用分为两种：主动使用(会调用"),s("code",[t._v("<clinit>")]),t._v(")和被动使用(不会调用"),s("code",[t._v("<clinit>")]),t._v(")")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("主动使用")])])]),t._v(" "),s("p",[s("code",[t._v("Class")]),t._v("只有在必须首次使用的时候才会被装载，"),s("code",[t._v("Java")]),t._v("虚拟机不会无条件地装载"),s("code",[t._v("Class")]),t._v("类型。"),s("code",[t._v("Java")]),t._v('虚拟机规定，一个类或接口在初次使用前，必须要进行初始化，。这里的"使用"，是指主动使用，主动使用只有以下几种情况：(即：如果出现如下的情况，则会对类进行初始化操作。而初始化操作之前的加载、验证、准备已经完成)')]),t._v(" "),s("ol",[s("li",[t._v("当创建一个类的实例时，比如使用"),s("code",[t._v("new")]),t._v("关键字，或者通过反射、克隆、反序列化")]),t._v(" "),s("li",[t._v("当调用类的静态方法时，即当使用了"),s("code",[t._v("invokestatic")]),t._v("指令")]),t._v(" "),s("li",[t._v("当使用类、接口的静态字段时("),s("code",[t._v("final")]),t._v("修饰特殊考虑)，比如，使用"),s("code",[t._v("getstatic")]),t._v("或者"),s("code",[t._v("putstatic")]),t._v("指令(对应访问变量、赋值操作)")]),t._v(" "),s("li",[t._v("当使用"),s("code",[t._v("java.lang.reflect")]),t._v("包中的方法反射类的方法时。比如："),s("code",[t._v('Class.forName("xxx.xxx.Xxx")')])]),t._v(" "),s("li",[t._v("当初始化子类时，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化")]),t._v(" "),s("li",[t._v("如果一个借口定义了"),s("code",[t._v("default")]),t._v("方法，那么直接实现或者间接实现该接口的类的初始化，该接口要在其之前被初始化")]),t._v(" "),s("li",[t._v("当虚拟机启动时，用户需要指定一个要执行的主类(包含"),s("code",[t._v("main()")]),t._v("方法的那个类)，虚拟机会先初始化这个主类")]),t._v(" "),s("li",[t._v("当初次调用"),s("code",[t._v("MethodHandle")]),t._v("实例时，初始化该"),s("code",[t._v("MethodHandle")]),t._v("指向的方法所在的类。(涉及解析"),s("code",[t._v("REF_getStatic")]),t._v("、"),s("code",[t._v("REF_putStatic")]),t._v("、"),s("code",[t._v("REF_invokeStatic")]),t._v("方法句柄对应的类)")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("被动使用")])])]),t._v(" "),s("p",[t._v("除了以上的情况属于主动使用，其他情况均属于被动使用。被动使用不会引起类的初始化。也就是说：并不是在代码中出现的类，就一定会被加载或者初始化。如果不符合主动使用的条件，类就不会被初始化")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当访问一个静态字段时，只有真正声明这个字段的类才会被初始化")]),t._v(" "),s("p",[t._v("当通过子类引用父类的静态变量时，不会导致子类的初始化")])]),t._v(" "),s("li",[s("p",[t._v("通过数组定义类引用，不会触发此类的初始化")])]),t._v(" "),s("li",[s("p",[t._v("引用常量不会触发此类或接口的初始化。因为常量在链接阶段就已经被显示赋值了")])]),t._v(" "),s("li",[s("p",[t._v("调用"),s("code",[t._v("ClassLoader")]),t._v("类的"),s("code",[t._v("loadClass()")]),t._v("方法加载一个类，并不是对类的主动使用，不会导致类的初始化")])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("补充说明")])])]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("Java")]),t._v("虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口")]),t._v(" "),s("ul",[s("li",[t._v("在初始化一个类时，并不会先初始化它所实现的接口")]),t._v(" "),s("li",[t._v("在初始化一个接口时，并不会先初始化它的父接口")])]),t._v(" "),s("p",[t._v("因此，一个父接口并不会因为它的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态字段时，才会导致该接口的初始化")]),t._v(" "),s("h3",{attrs:{id:"_3-4-using类的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-using类的使用"}},[t._v("#")]),t._v(" 3.4 Using类的使用")]),t._v(" "),s("p",[t._v("任何一个类在使用之前都必须经过完整的加载、链接和初始化3个类加载步骤。一旦一个类型成功经过之后，开发者就可以使用了")]),t._v(" "),s("h3",{attrs:{id:"_3-5-unloading类的卸载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-unloading类的卸载"}},[t._v("#")]),t._v(" 3.5 Unloading类的卸载")]),t._v(" "),s("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210607124108.png"}}),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("类、类的加载器、类的实例之间的引用关系")])])]),t._v(" "),s("p",[t._v("在类加载器的内部实现中，用一个"),s("code",[t._v("Java")]),t._v("集合来存放所加载类的引用。另一方面，一个"),s("code",[t._v("Class")]),t._v("对象总是会引用它的类加载器，调用"),s("code",[t._v("Class")]),t._v("对象的"),s("code",[t._v("getClassLoader")]),t._v("方法，技能获得它的类加载器。由此可见，代表某个类的"),s("code",[t._v("Class")]),t._v("实例与其类的加载器之间为双向关联关系")]),t._v(" "),s("p",[t._v("一个类的实例总是引用代表这个类的"),s("code",[t._v("Class")]),t._v("对象。在"),s("code",[t._v("Object")]),t._v("类中定义了"),s("code",[t._v("getClass()")]),t._v("方法，这个方法返回值代表对象所属类"),s("code",[t._v("Class")]),t._v("对象的引用。此外，所有的"),s("code",[t._v("Java")]),t._v("类都有一个静态属性"),s("code",[t._v("class")]),t._v("，它引用代表这个类的"),s("code",[t._v("Class")]),t._v("对象")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("类的生命周期")])])]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("Sample")]),t._v("类被加载、链接和初始化后，它的生命周期就开始了。当代表"),s("code",[t._v("Sample")]),t._v("类的"),s("code",[t._v("Class")]),t._v("对象不再被引用，即不可触及时，"),s("code",[t._v("Class")]),t._v("对象就会结束生命周期，"),s("code",[t._v("Sample")]),t._v("类在方法区内的数据也会被卸载，从而结束"),s("code",[t._v("Sample")]),t._v("类的生命周期")]),t._v(" "),s("p",[t._v("一个类生命周期的结束，取决于代表它的"),s("code",[t._v("Class")]),t._v("对象生命周期的结束")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("类的卸载")])])]),t._v(" "),s("ol",[s("li",[t._v("启动类加载器加载的类型在整个运行期间不可能被卸载")]),t._v(" "),s("li",[t._v("被系统类加载器和扩展类加载器加载的类型在运行期间不太可能被卸载，因为系统类加载器实例或者扩展类的实例基本上在整个运行期间总能直接或者简介的访问的到，其达到"),s("code",[t._v("unreachable")]),t._v("的可能性极小")]),t._v(" "),s("li",[t._v("被开发者自定义的类加载器实例加载的类型只有在很简单的上下文环境中才能被卸载，而且一般还要借助于强制调用虚拟机的垃圾收集功能才可以做到。可以预想，稍微复杂点的应用场景中(比如：很多时候用户在开发自定义类加载器实例的时候采用缓存的策略以提高系统性能)，被加载的类型在运行期间也是几乎不太可能被卸载的(至少卸载的时间是不确定的)")])]),t._v(" "),s("h2",{attrs:{id:"_4-类的加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-类的加载器"}},[t._v("#")]),t._v(" 4. 类的加载器")]),t._v(" "),s("p",[t._v("类加载器是"),s("code",[t._v("JVM")]),t._v("执行类加载机制的前提")]),t._v(" "),s("p",[s("code",[t._v("ClassLoader")]),t._v("是"),s("code",[t._v("Java")]),t._v("的核心组件，所有的"),s("code",[t._v("Class")]),t._v("都是由"),s("code",[t._v("ClassLoader")]),t._v("进行加载的，"),s("code",[t._v("ClassLoader")]),t._v("负责通过各种方式将"),s("code",[t._v("Class")]),t._v("信息的二进制数据流读入"),s("code",[t._v("JVM")]),t._v("内部，转换为一个与目标对应的"),s("code",[t._v("java.lang.Class")]),t._v("对象实例。然后交给"),s("code",[t._v("Java")]),t._v("虚拟机进行链接、初始化等操作。因此。"),s("code",[t._v("ClassLoader")]),t._v("在整个装载阶段，只影响到类的加载，而无法通过"),s("code",[t._v("ClassLoader")]),t._v("去改变类的链接和初始化行为。至于它是否可以运行，则由"),s("code",[t._v("Execution Engine")]),t._v("决定")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210607125734.png"}}),t._v(" "),s("p",[t._v("类加载器最早出现在"),s("code",[t._v("Java1.0")]),t._v("版本中，那个时候只是单纯地为了满足"),s("code",[t._v("Java Applet")]),t._v("应用而被研发出来的。但如今类加载器却在"),s("code",[t._v("OSGI")]),t._v("、字节码加密解密领域大放异彩。者主要归功于"),s("code",[t._v("Java")]),t._v("虚拟机的设计者们当初在设计类加载器的时候，并没有考虑把它绑定在"),s("code",[t._v("JVM")]),t._v("内部，这样做的好处就是能够更加灵活和动态地执行类加载操作")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("命名空间")])])]),t._v(" "),s("p",[s("strong",[t._v("类的唯一性")])]),t._v(" "),s("p",[t._v("对于任意一个类，都需要由加载它的类加载器和这个类本身一同确认其在"),s("code",[t._v("Java")]),t._v("虚拟机中的唯一性。每个类加载器，都拥有一个独立的类名称空间：比较两个类是否相等，只有这两个类是由同一个类加载器加载的前提下才有意义。否则，及时这两个类源自同一个"),s("code",[t._v("Class")]),t._v("文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必定不相等")]),t._v(" "),s("p",[s("strong",[t._v("命名空间")])]),t._v(" "),s("ul",[s("li",[t._v("每个类加载器都有自己的命名空间，命名空间由该加载器机器所有父加载器所加载的类组成")]),t._v(" "),s("li",[t._v("在同一个命名空间中，不会出现类的完整名字(包括类的包名)相同的两个类")]),t._v(" "),s("li",[t._v("在不同的名称空间中，有可能会出现类的完整名字(包括类的包名)相同的两个类")])]),t._v(" "),s("p",[t._v("在大型应用中，我们往往借助这一特性，来运行同一个类的不同版本")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("类加载机制的基本特征")])])]),t._v(" "),s("p",[t._v("双亲委派模型。但不是所有类加载都遵循这个模型，有的时候，启动类加载器所加载的类型，是可能要加载用户代码的，比如"),s("code",[t._v("JDK")]),t._v("内部的"),s("code",[t._v("ServiceProvider/ServiceLoader")]),t._v("机制，用户可以在标准"),s("code",[t._v("API")]),t._v("框架上，提供自己的实现，"),s("code",[t._v("JDK")]),t._v("也需要提供些默认的参考实现。例如，"),s("code",[t._v("Java")]),t._v("中"),s("code",[t._v("JNDI")]),t._v("、"),s("code",[t._v("JDBC")]),t._v("、文件系统、"),s("code",[t._v("Cipher")]),t._v("等很多方面，都是利用的这种机制，这种情况就不会用双亲委派模型去加载，而是利用所谓的上下文加载器")]),t._v(" "),s("p",[t._v("可见性，子类加载器可以访问符加载器加载的类型，但是反过来是不允许的。不然，因为缺少必要的隔离，我们就没有办法利用类加载器去实现容器的逻辑")]),t._v(" "),s("p",[t._v("单一性，由于父加载器的类型对于子加载器是可见的，所以父加载器中加载过的类型，就不会在子加载器中重复加载。")]),t._v(" "),s("h3",{attrs:{id:"_4-1-源码解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-源码解析"}},[t._v("#")]),t._v(" 4.1 源码解析")]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608172657.png"}}),t._v(" "),s("h4",{attrs:{id:"_4-1-1-classloader的主要方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-classloader的主要方法"}},[t._v("#")]),t._v(" 4.1.1 ClassLoader的主要方法")]),t._v(" "),s("p",[t._v("抽象类"),s("code",[t._v("ClassLoader")]),t._v("的主要方法：(内部没有抽象方法)")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("返回该类的超类加载器")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("加载名称为"),s("code",[t._v("name")]),t._v("的类，返回结果为"),s("code",[t._v("java.lang.Class")]),t._v("类的实例。如果找不到类，则返回"),s("code",[t._v("ClassNotFoundException")]),t._v("异常。该方法中的逻辑就是双亲委派模块的实现")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("查找二进制名称为"),s("code",[t._v("name")]),t._v("的类，返回结果为"),s("code",[t._v("java.lang.Class")]),t._v("类的实例。这是一个受保护的方法，"),s("code",[t._v("JVM")]),t._v("鼓励我们重写此方法，需要自定义加载器遵循双亲委派机制，该方法会在检查完父类加载器之后被"),s("code",[t._v("loadClass()")]),t._v("方法调用")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v("\n")])])]),s("p",[t._v("在"),s("code",[t._v("JDK2")]),t._v("之前，在自定义类加载时，总会去继承"),s("code",[t._v("ClassLoader")]),t._v("类并重写"),s("code",[t._v("loadClass")]),t._v("方法，从而实现自定义的类加载器。但是在在"),s("code",[t._v("JDK2")]),t._v("之后已经不再建议用户去覆盖"),s("code",[t._v("loadClass()")]),t._v("方法，而是建议把自定义的类加载逻辑写在"),s("code",[t._v("findClass()")]),t._v("方法中，从前面的分析可知，"),s("code",[t._v("findClass()")]),t._v("方法是在"),s("code",[t._v("loadClass()")]),t._v("方法中被调用的，当"),s("code",[t._v("loadClass()")]),t._v("方法中父加载器加载失败后，则会调用z自己的"),s("code",[t._v("findClass()")]),t._v("方法并来完成类加载，这样就可以保证自定义的类加载器也是符号双亲模式")]),t._v(" "),s("p",[t._v("需要注意的是"),s("code",[t._v("ClassLoader")]),t._v("类中并没有实现"),s("code",[t._v("findClass()")]),t._v("方法的具体代码逻辑，取而代之的是抛出"),s("code",[t._v("ClassNotFoundException")]),t._v("异常，同时应该知道的是"),s("code",[t._v("findClass()")]),t._v("方法通常是和"),s("code",[t._v("defineClass")]),t._v("方法一起使用的。一般情况下，在自定义类加载器时，会直接覆盖"),s("code",[t._v("ClassLoader")]),t._v("的"),s("code",[t._v("findClass()")]),t._v("方法并编写加载规则，取得要加载类的字节码后转换为流，然后调用"),s("code",[t._v("defineClass()")]),t._v("方法生成类的"),s("code",[t._v("Class")]),t._v("对象")])]),t._v(" "),s("li",[s("p",[t._v("根据给定的字节数组"),s("code",[t._v("b")]),t._v("转换为"),s("code",[t._v("Class")]),t._v("的实例，"),s("code",[t._v("off")]),t._v("和"),s("code",[t._v("len")]),t._v("参数表示实际"),s("code",[t._v("Class")]),t._v("信息在"),s("code",[t._v("byte")]),t._v("数组中的位置和长度，其中"),s("code",[t._v("byte")]),t._v("数组"),s("code",[t._v("b")]),t._v("是"),s("code",[t._v("ClassLoader")]),t._v("从外部获取的。这是受保护的方法，只有在自定义"),s("code",[t._v("ClassLoader")]),t._v("子类中可以使用")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("defineClass()")]),t._v("方法是用来将"),s("code",[t._v("byte")]),t._v("子节流解析成"),s("code",[t._v("JVM")]),t._v("能够识别的"),s("code",[t._v("Class")]),t._v("对象("),s("code",[t._v("ClassLoader")]),t._v("中已实现该方法逻辑)，通过这个方法不仅能够通过"),s("code",[t._v("class")]),t._v("文件实例化"),s("code",[t._v("class")]),t._v("对象，也可以通过其他方式实例化"),s("code",[t._v("class")]),t._v("对象，如通过网络接受一个类的字节码，然后转换为"),s("code",[t._v("byte")]),t._v("子节流创建对应的"),s("code",[t._v("Class")]),t._v("对象")]),t._v(" "),s("p",[s("code",[t._v("defineClass()")]),t._v("方法通常与"),s("code",[t._v("findClass()")]),t._v("方法一起使用，一般情况下，在自定义类加载器时，会直接覆盖"),s("code",[t._v("ClassLoader")]),t._v("的"),s("code",[t._v("findClass()")]),t._v("方法并编写加载规则，取得要加载累的字节码转换成流，然后调用"),s("code",[t._v("defineClass()")]),t._v("方法生成类的"),s("code",[t._v("Class")]),t._v("对象")])])]),t._v(" "),s("h4",{attrs:{id:"_4-1-2-classloader子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-classloader子类"}},[t._v("#")]),t._v(" 4.1.2 ClassLoader子类")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("SecureClassLoader与URLClassLoader")])])]),t._v(" "),s("p",[t._v("接着"),s("code",[t._v("SecureClassLoader")]),t._v("扩展了"),s("code",[t._v("ClassLoader")]),t._v("，新增了几个与使用相关的代码源(对代码源的位置及其证书的验证)和权限定定义类验证(主要指对"),s("code",[t._v("class")]),t._v("源码的访问权限)的方法，一般我们不会直接跟这个类打交道，更多是与它的子类"),s("code",[t._v("URLClassLoader")]),t._v("有所关联")]),t._v(" "),s("p",[s("code",[t._v("ClassLoader")]),t._v("是一个抽象类，很多方法是空的没有实现，比如"),s("code",[t._v("findClass()")]),t._v("、"),s("code",[t._v("findResource()")]),t._v("等。而"),s("code",[t._v("URLClassLoader")]),t._v("这个实现类为这些方法提供了具体的实现。并新增了"),s("code",[t._v("URLClassPath")]),t._v("类协助取得"),s("code",[t._v("Class")]),t._v("字节码流等功能。在编写自定义类加载器时，如果没有太过复杂的需求，可以直接继承"),s("code",[t._v("URLClassLoader")]),t._v("类，这样就可以避免自己去编写"),s("code",[t._v("findClass()")]),t._v("方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("ExtClassLoader与AppClassLoader")])])]),t._v(" "),s("p",[t._v("了解完"),s("code",[t._v("URLClassLoader")]),t._v("后接着看看剩余的两个类加载器，即拓展类加载器"),s("code",[t._v("ExtClassLoader")]),t._v("和系统类加载器"),s("code",[t._v("AppClassLoader")]),t._v("，这两个类都继承自"),s("code",[t._v("URLClassLoader")]),t._v("，是"),s("code",[t._v("sun.misc.Launcher")]),t._v("的静态内部类。"),s("code",[t._v("sun.misc.Launcher")]),t._v("主要被系统用于启动主应用程序，"),s("code",[t._v("ExtClassLoader")]),t._v("和"),s("code",[t._v("AppClassLoader")]),t._v("都是由"),s("code",[t._v("sun.misc.Launcher")]),t._v("创建的。")]),t._v(" "),s("p",[s("code",[t._v("ExtClassLoader")]),t._v("并没有重写"),s("code",[t._v("loadClass()")]),t._v("方法，这足矣说明遵循双亲委派模式，而"),s("code",[t._v("AppClassLoader")]),t._v("重载了"),s("code",[t._v("loadClass()")]),t._v("方法，但最终调用的还是父类"),s("code",[t._v("loadClass()")]),t._v("方法，因此依然遵循双亲委派模式")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Class.forName()与ClassLoader.loadClass()")])])]),t._v(" "),s("p",[s("code",[t._v("Class.forName()")]),t._v("：是一个静态方法，最常用的是"),s("code",[t._v("Class.forName(String className)")]),t._v("；根据传入的类的全限定名返回一个"),s("code",[t._v("Class")]),t._v("对象。该方法在将"),s("code",[t._v("Class")]),t._v("文件加载到内存的同时，会执行类的初始化。如："),s("code",[t._v('Class.forName("com.valid.HelloWorld")')])]),t._v(" "),s("p",[s("code",[t._v("ClassLoader.loadClass()")]),t._v("：这是一个实例方法，需要一个"),s("code",[t._v("ClassLoader")]),t._v("对象来调用该方法。该方法将"),s("code",[t._v("Class")]),t._v("文件加载到内存时，并不会执行类的初始化，直到这个类第一次使用时才进行初始化。该方法因为需要得到一个"),s("code",[t._v("ClassLoader")]),t._v("对象，所以可以根据需要指定使用哪个类加载器。如")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" loader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" xxxxxxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nloader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loaderClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.valid.HelloWorld"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-2-双亲委派模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-双亲委派模型"}},[t._v("#")]),t._v(" 4.2 双亲委派模型")]),t._v(" "),s("p",[t._v("类加载器用来把类加载到"),s("code",[t._v("Java")]),t._v("虚拟机中，从"),s("code",[t._v("JDK2")]),t._v("开始，类加载过程采用双亲委派机制，这种机制能更好地保证"),s("code",[t._v("Java")]),t._v("平台的安全")]),t._v(" "),s("h4",{attrs:{id:"_4-2-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-概述"}},[t._v("#")]),t._v(" 4.2.1 概述")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：如果一个类加载器在接到加载累的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，一次递归，如果附加在其可以完成类加载任务，就成功返回。只有父类加载器可以完成类加载任务，就成功返回。只有父类加载器无法完成加载任务时，才自己去加载")]),t._v(" "),s("p",[s("strong",[t._v("本质")]),t._v("：规定了类加载的顺序是：引导类加载器先加载，若加载不到，由扩展累加载器加载，若还加载不到，才会由系统类加载器或自定义的类加载器进行加载")]),t._v(" "),s("img",{staticStyle:{zoom:"100%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608195655.png"}}),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608194812.png"}}),t._v(" "),s("h4",{attrs:{id:"_4-2-2-优势与劣势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-优势与劣势"}},[t._v("#")]),t._v(" 4.2.2 优势与劣势")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("优势")])])]),t._v(" "),s("p",[t._v("避免类的重复加载，确保一个类的全局唯一性。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Java")]),t._v("类随着它的类加载器一起具备了一种带有优先级的层次关系，通过层级关系可以避免类的重复加载，当父加载器已经加载了该类时，就没有必要子加载器再加载一次")])]),t._v(" "),s("p",[t._v("保护程序安全，防止核心"),s("code",[t._v("API")]),t._v("被随意篡改")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("代码支持")])])]),t._v(" "),s("p",[t._v("双亲委派机制在"),s("code",[t._v("java.lang.ClassLoader.loadClass(String, boolean)")]),t._v("接口中体现。该接口的逻辑如下")]),t._v(" "),s("ol",[s("li",[t._v("先在当前加载器的缓存中查找有无目标类，如果有，直接返回")]),t._v(" "),s("li",[t._v("判断当前加载器的父加载器是否为空，如果不为空，则调用"),s("code",[t._v("parent.loadClass(name, false)")]),t._v("接口进行加载")]),t._v(" "),s("li",[t._v("反之，如果当前加载器的父加载器为空，则调用"),s("code",[t._v("findBootstrapClassOrNull(name)")]),t._v("接口，让引导类加载器进行加载")]),t._v(" "),s("li",[t._v("如果通过以上3条路径都没能成功加载，则调用"),s("code",[t._v("findClass(name)")]),t._v("接口进行加载。该接口最终会调用"),s("code",[t._v("java.lang.ClassLoader")]),t._v("接口的"),s("code",[t._v("defineClass")]),t._v("系列的"),s("code",[t._v("native")]),t._v("接口加载目标"),s("code",[t._v("Java")]),t._v("类")])]),t._v(" "),s("p",[t._v("双亲委派的模型就隐藏在第2和第3步中")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("弊端")])])]),t._v(" "),s("p",[t._v("检查类是否加载的委托过程是单向的，这个方式虽然从结构上说比较清晰，使各个"),s("code",[t._v("ClassLoader")]),t._v("的职责非常明确，但是同时会带来一个问题，即顶层的"),s("code",[t._v("ClassLoader")]),t._v("无法访问底层的"),s("code",[t._v("ClassLoader")]),t._v("所加载的类")]),t._v(" "),s("p",[t._v("通常情况下，启动类加载器中的类为系统核心类，包括一些重要的系统接口，而在应用了类加载器中，为应用类。按照这种模式，应用类访问系统类自然是没有问题，但是系统类访问应用类就会出现问题。比如在系统类中提供了一个接口，该接口需要在应用类中得以实现，该接口还绑定一个工厂方法，用于创建该接口的实例，而接口和工厂方法都在启动类加载器中。这时，就会出现该工厂方法无法创建由应用类加载器加载的应用的实例的问题。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("总结")])])]),t._v(" "),s("p",[t._v("由于"),s("code",[t._v("Java")]),t._v("虚拟机规范并没有明确要求类加载器的加载机制一定要使用双亲委派模型，只是建议采用这种方式而已。比如在"),s("code",[t._v("Tomcat")]),t._v("中，类加载器所采用的加载机制就和传统的双亲委派模型有一定区别，当缺省的类加载器接受到一个类的加载任务时，首先会由它自行加载，当它加载失败时，才会将类的加载任务委派给它的超类加载器去执行，这同时也是"),s("code",[t._v("Servlet")]),t._v("规范推荐的一种做法")]),t._v(" "),s("h4",{attrs:{id:"_4-2-3-破坏双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-破坏双亲委派机制"}},[t._v("#")]),t._v(" 4.2.3 破坏双亲委派机制")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("第一类")])])]),t._v(" "),s("p",[t._v('双亲委派模型的第一次"被破坏"起始发生在双亲委派模型出现之前--即'),s("code",[t._v("JDK2")]),t._v('面世以前的"远古"时代')]),t._v(" "),s("p",[t._v("由于双亲委派模型在"),s("code",[t._v("JDK2")]),t._v("之后才被引入，但是类加载器的概念和抽象类"),s("code",[t._v("java.lang.ClassLoader")]),t._v("则在"),s("code",[t._v("Java")]),t._v("的第一个版本中就已经存在，面对已经存在的用户自定义类加载器的代码，"),s("code",[t._v("Java")]),t._v("设计者们引入双亲委派模型时不得不做出一些妥协，为了兼容这些已有的代码，无法再以技术手段避免"),s("code",[t._v("loadClass()")]),t._v("被子类覆盖的可能性，只能在"),s("code",[t._v("JDK2")]),t._v("之后的"),s("code",[t._v("java.lang.ClassLoader")]),t._v("中添加一个新的"),s("code",[t._v("protected")]),t._v("方法"),s("code",[t._v("findClass()")]),t._v("，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在"),s("code",[t._v("loadClass()")]),t._v("中编写代码。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("第二类")])])]),t._v(" "),s("p",[s("strong",[t._v("线程上下文类加载器")])]),t._v(" "),s("p",[t._v('双亲委派模型的第二次"被破坏"是由这个模型自身的缺陷导致的，双亲委派很友好地解决了各个类加载器协作时基础类型一致性的问题(越是基础的类由越上层的加载器进行加载)，基础类型之所以被称为"基础"，是因为它们总是作为被用户代码继承、调用的'),s("code",[t._v("API")]),t._v("存在，但程序设计往往没有绝对不变的完美规则，如果有基础类型又要调用回用户的代码，那么该怎么办呢？")]),t._v(" "),s("p",[t._v("这并非是不可能出现的事情，一个典型的例子便是"),s("code",[t._v("JNDI")]),t._v("服务，"),s("code",[t._v("JNDI")]),t._v("现在已经是"),s("code",[t._v("Java")]),t._v("的标准服务，它的代码由启动类加载器来完成加载(在"),s("code",[t._v("JDK3")]),t._v("时加入到"),s("code",[t._v("rt.jar")]),t._v("的)，肯定属于"),s("code",[t._v("Java")]),t._v("中很基础的类型了。但"),s("code",[t._v("JNDI")]),t._v("存在的目的就是对资源进行查找和集中管理，它需要调用由其他厂商实现并部署在应用程序的"),s("code",[t._v("ClassPath")]),t._v("下的"),s("code",[t._v("JNDI")]),t._v("服务提供者接口("),s("code",[t._v("Service Provider Interface, SPI")]),t._v(")的代码，现在问题来了，启动类加载器是绝对不可能认识、加载这些代码的，那该怎么办？")]),t._v(" "),s("p",[t._v("为了解决这个困境，"),s("code",[t._v("Java")]),t._v("的设计团队只好引入了一个不太优雅的设计：线程上下文类加载器"),s("code",[t._v("Thread Context ClassLoader")]),t._v("。这个类加载器可以通过"),s("code",[t._v("java.lang.Thread")]),t._v("类的"),s("code",[t._v("setContextClassLoader()")]),t._v("方法进行设置，如果创建时还为设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器")]),t._v(" "),s("p",[t._v('有了线程上下文加载器，程序就可以做一些"舞弊"的事情了。'),s("code",[t._v("JNDI")]),t._v("服务使用这个线程上下文类加载器去加载所需的"),s("code",[t._v("SPI")]),t._v("服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为，这种行为实际上是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般类性原则，但也是无可奈何的事情。"),s("code",[t._v("Java")]),t._v("中涉及"),s("code",[t._v("SPI")]),t._v("的加载基本上都采用这种方式来完成，例如"),s("code",[t._v("JNDI")]),t._v("、"),s("code",[t._v("JDBC")]),t._v("、"),s("code",[t._v("JCE")]),t._v("、"),s("code",[t._v("JAXB")]),t._v("和"),s("code",[t._v("JBI")]),t._v("等。不过，当"),s("code",[t._v("SPI")]),t._v("的服务提供者多于一个的时候，代码就只能根据具体提供者的类型来硬编码判断，为了消除这种极不优雅的实现方式，在"),s("code",[t._v("JDK6")]),t._v("时，"),s("code",[t._v("JDK")]),t._v("提供了"),s("code",[t._v("java.util.ServiceLoader")]),t._v("类，以"),s("code",[t._v("META-INF/services")]),t._v("中的配置信息，辅以责任链模式，这才算是给"),s("code",[t._v("SPI")]),t._v("的加载提供了一种相对合理的解决方案")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("第三类")])])]),t._v(" "),s("p",[t._v('双亲委派模型的第三次"被破坏"是由于用户对程序动态性的追求而导致的。如：'),s("strong",[t._v("代码热替换")]),t._v("("),s("code",[t._v("Hot Swap")]),t._v(")、"),s("strong",[t._v("模块热部署")]),t._v("("),s("code",[t._v("Hot Deployment")]),t._v(")等")]),t._v(" "),s("p",[s("code",[t._v("IBM")]),t._v("公司主导的"),s("code",[t._v("JSR-291")]),t._v("(即"),s("code",[t._v("OSGI R4.2")]),t._v(")实现模块化热部署的关键是它自定义的类加载器机制的实现，每一个程序模块("),s("code",[t._v("OSGI")]),t._v("中称为"),s("code",[t._v("Bundle")]),t._v(")都有一个自己的类加载器，当需要更换一个"),s("code",[t._v("Bundle")]),t._v("时，就把"),s("code",[t._v("Bundle")]),t._v("连同类加载器一起换掉以实现代码的热替换。在"),s("code",[t._v("OSGI")]),t._v("环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构")]),t._v(" "),s("p",[t._v("当收到类加载请求时，"),s("code",[t._v("OSGI")]),t._v("将按照下面的顺序进行类搜索")]),t._v(" "),s("ol",[s("li",[t._v("将以"),s("code",[t._v("java.*")]),t._v("开头的类，委派给父类加载器加载")]),t._v(" "),s("li",[t._v("否则，将委派列表名单内的类，委派给父类加载器加载")]),t._v(" "),s("li",[t._v("否则，将"),s("code",[t._v("Import")]),t._v("列表中的类，委派给"),s("code",[t._v("Export")]),t._v("这个类的"),s("code",[t._v("Bundle")]),t._v("的类加载器加载")]),t._v(" "),s("li",[t._v("否则，查找当前"),s("code",[t._v("Bundle")]),t._v("的"),s("code",[t._v("ClassPath")]),t._v("，使用自己的类加载器加载")]),t._v(" "),s("li",[t._v("否则，查找类是否在自己的"),s("code",[t._v("Fragment Bundle")]),t._v("中，如果在，则委派给"),s("code",[t._v("Fragement Bundle")]),t._v("的类加载器加载")]),t._v(" "),s("li",[t._v("否则，查找"),s("code",[t._v("Dynamic Import")]),t._v("列表的"),s("code",[t._v("Bundle")]),t._v("，委托给对应"),s("code",[t._v("Bundle")]),t._v("的类加载器加载。")]),t._v(" "),s("li",[t._v("否则，类查找失败")])]),t._v(" "),s("p",[t._v("只有开头两点任然符合双亲委派模型的原则，其余的类查找都是在平级的类加载器中进行的")]),t._v(" "),s("h4",{attrs:{id:"_4-2-4-热替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-热替换"}},[t._v("#")]),t._v(" 4.2.4 热替换")]),t._v(" "),s("p",[t._v("热替换是指在程序的运算过程中，不停止服务，只通过替换程序文件来修改程序的行为。热部署的关键需求在于服务不能中断，修改必须立即表现正在运行的系统之中。基本上大部分脚本语言天生都是支持热替换，比如："),s("code",[t._v("PHP")]),t._v("，只要替换了"),s("code",[t._v("PHP")]),t._v("源文件，这种改动就会立即生效，无需重启"),s("code",[t._v("Web")]),t._v("服务器")]),t._v(" "),s("p",[t._v("但对"),s("code",[t._v("Java")]),t._v("来说，热替换并非天生就支持，如果一个类已经加载到系统中，通过修改类文件，并无法让系统再来加载并重定义这个类。因此，在"),s("code",[t._v("Java")]),t._v("中实现这一个功能的一个可行的方法就是灵活运用"),s("code",[t._v("ClassLoader")])]),t._v(" "),s("p",[t._v("注意：由不同"),s("code",[t._v("ClassLoader")]),t._v("加载的同名类属于不同的类型，不能相互转换和兼容。即两个不同的"),s("code",[t._v("ClassLoader")]),t._v("加载同一个类，在虚拟机内部，会认为这2个类是完全不同的")]),t._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608220007.png"}}),t._v(" "),s("h3",{attrs:{id:"_4-3-沙箱安全机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-沙箱安全机制"}},[t._v("#")]),t._v(" 4.3 沙箱安全机制")]),t._v(" "),s("p",[t._v("沙箱安全机制主要有两个作用：保护程序安全、保护"),s("code",[t._v("Java")]),t._v("原生的"),s("code",[t._v("JDK")]),t._v("代码")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("安全模型的核心就是"),s("code",[t._v("Java")]),t._v("沙箱("),s("code",[t._v("sandbox")]),t._v(")。什么是沙箱？沙箱是一个限制程序运行的环境")]),t._v(" "),s("p",[t._v("沙箱机制就是将"),s("code",[t._v("Java")]),t._v("代码限定在虚拟机"),s("code",[t._v("JVM")]),t._v("特定的运行范围中国年，并且严格限制代码对本地系统资源访问。通过这样的措施来保证对代码的有限隔离，防止对本地系统造成破坏。")]),t._v(" "),s("p",[t._v("沙箱主要限制系统资源访问，那系统资源包括什么?"),s("code",[t._v("CPU")]),t._v("、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样")]),t._v(" "),s("p",[t._v("所有的"),s("code",[t._v("Java")]),t._v("程序运行都可以指定沙箱，可以定制安全策略")]),t._v(" "),s("h4",{attrs:{id:"_4-3-1-jdk1-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-jdk1-0"}},[t._v("#")]),t._v(" 4.3.1 JDK1.0")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("java")]),t._v("中执行程序分为本地代码而后远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码，可以访问一切本地资源。而对于非授信的远程代码在早期的"),s("code",[t._v("Java")]),t._v("实现中，安全依赖于沙箱("),s("code",[t._v("Sandbox")]),t._v(")机制。如下图所示"),s("code",[t._v("JDK1.0")])]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608222044.png"}}),t._v(" "),s("h4",{attrs:{id:"_4-3-2-jdk1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-jdk1-1"}},[t._v("#")]),t._v(" 4.3.2 JDK1.1")]),t._v(" "),s("p",[s("code",[t._v("JDK1.0")]),t._v("中如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件的时候，就无法实现。")]),t._v(" "),s("p",[t._v("因此在后续的"),s("code",[t._v("Java1.1")]),t._v("版本中，针对安全机制做了改进，增加了安全策略。允许用户指令指定代码对本地资源的访问权限。如下图所示"),s("code",[t._v("JDK1.1")]),t._v("安全模型")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608222611.png"}}),t._v(" "),s("h4",{attrs:{id:"_4-3-3-jdk1-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-jdk1-2"}},[t._v("#")]),t._v(" 4.3.3 JDK1.2")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("Java1.2")]),t._v("版本中，再次改进了安全机制，增加了代码签名。不论本地代码或是远程代码，都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608222909.png"}}),t._v(" "),s("h4",{attrs:{id:"_4-3-4-jdk1-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-jdk1-6"}},[t._v("#")]),t._v(" 4.3.4 JDK1.6")]),t._v(" "),s("p",[t._v("当前最新的安全机制实现，则引入了域"),s("code",[t._v("Domain")]),t._v("的概念")]),t._v(" "),s("p",[t._v("虚拟机会把所有代码加载到不同的系统域和应用域。系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护的域"),s("code",[t._v("Protected Domain")]),t._v("，对应不一样的权限"),s("code",[t._v("Permission")]),t._v("。存在于不同域中的文件就具有了当前域的全部权限")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210608223054.png"}}),t._v(" "),s("h3",{attrs:{id:"_4-4-自定义类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-自定义类加载器"}},[t._v("#")]),t._v(" 4.4 自定义类加载器")]),t._v(" "),s("h4",{attrs:{id:"_4-4-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-概述"}},[t._v("#")]),t._v(" 4.4.1 概述")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("为什么要自定义类加载器？")])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("隔离加载类")]),t._v(" "),s("p",[t._v("在某些框架内进行中间件与应用的模块隔离，把类加载到不同的环境。")])]),t._v(" "),s("li",[s("p",[t._v("修改类加载方式")]),t._v(" "),s("p",[t._v("类加载模型并非强制，除"),s("code",[t._v("Bootstrap")]),t._v("外，其他的加载并非一定要引入，或者根据实际情况在某个时间点进行按需进行动态加载")])]),t._v(" "),s("li",[s("p",[t._v("扩展加载源")]),t._v(" "),s("p",[t._v("比如从数据库、网络、甚至是电视机顶盒进行加载")])]),t._v(" "),s("li",[s("p",[t._v("防止源码泄漏")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("代码容易被编译和篡改，可以进行编译加密。那么类加载也需要自定义，还原加密的字节码")])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("常见的应用场景")])])]),t._v(" "),s("ol",[s("li",[t._v("实现类似进程内隔离，类加载器实际上用作不同的命名空间，以提供类似容器、模块化的效果。例如，两个模块依赖某个类库的不同版本，如果分别被不同的容器加载，就可以互不干扰。这个方面的集大成者是"),s("code",[t._v("Java EE")]),t._v("和"),s("code",[t._v("OSGI")]),t._v("、"),s("code",[t._v("JPMS")]),t._v("等框架")]),t._v(" "),s("li",[t._v("应用需要从不用的数据源获取类定义信息，例如网络数据源，而不是本地文件系统。或者需要自己操作字节码，动态修改或者生成类型")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("注意")])])]),t._v(" "),s("p",[t._v("一般情况下，使用不同的类加载器去加载不同的功能模块，会提高应用程序的安全性。但是，如果涉及"),s("code",[t._v("Java")]),t._v("类型转换，则加载器反而容易产生不美好的事情。在做"),s("code",[t._v("Java")]),t._v("类型转换时，只有两个类型都是由同一个加载器所加载，才能进行类型转换，否则转换时会发生异常")]),t._v(" "),s("h4",{attrs:{id:"_4-4-2-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-实现"}},[t._v("#")]),t._v(" 4.4.2 实现")]),t._v(" "),s("p",[s("code",[t._v("Java")]),t._v("提供了抽象类"),s("code",[t._v("java.lang.ClassLoader")]),t._v("，所有用户自定义的类加载器都应该继承"),s("code",[t._v("ClassLoader")]),t._v("类")]),t._v(" "),s("p",[t._v("在自定义"),s("code",[t._v("ClassLoader")]),t._v("的子类时候，常见有两种方法")]),t._v(" "),s("ol",[s("li",[t._v("重写"),s("code",[t._v("loadClass()")]),t._v("方法")]),t._v(" "),s("li",[t._v("重写"),s("code",[t._v("findClass()")]),t._v("方法⭐️")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("对比")])])]),t._v(" "),s("p",[t._v("这两种方法本质上差不多，毕竟"),s("code",[t._v("loadClass()")]),t._v("也会调用"),s("code",[t._v("findClass()")]),t._v("，但是从逻辑上讲我们最好不要直接修改"),s("code",[t._v("loadClass()")]),t._v("的内部逻辑。建议的做法是只在"),s("code",[t._v("findClass()")]),t._v("里重写自定义类的加载方法，根据参数指定类的名字，返回对应的"),s("code",[t._v("Class")]),t._v("对象的引用")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("loadClass()")]),t._v("这个方法是实现双亲委派模型逻辑的地方，擅自修改这个方法会导致模型被破坏，容易造成问题。因此我们最好是在双亲委派模型框架内进行小范围的改动，不破坏原有的稳定结构。同时，也避免了自己重写"),s("code",[t._v("loadClass()")]),t._v("方法的过程中必须写双亲委派的重复代码，从代码的复用性来看，不直接修改这个方法始终是比较好的选择")]),t._v(" "),s("li",[t._v("当编写号自定义类加载器后，便可以在程序中调用"),s("code",[t._v("loadClass()")]),t._v("方法来实现类加载操作")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("说明")])])]),t._v(" "),s("p",[t._v("其父类加载器是系统类加载器")]),t._v(" "),s("p",[s("code",[t._v("JVM")]),t._v("中的所有类加载都会使用"),s("code",[t._v("java.lang.ClassLoader(String)")]),t._v("接口(自定义类加载器并重写"),s("code",[t._v("java.lang.ClassLoader.loadClass(String)")]),t._v("接口的除外)，连"),s("code",[t._v("JDK")]),t._v("的核心类库也不能例外")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassLoader")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" className"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" bis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteArrayOutputStream")]),t._v(" bos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" aClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载指定路径下的字节码文件")]),t._v("\n            bis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" className "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".class"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            bos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteArrayOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" buffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                bos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将byte数组转换为Class对象")]),t._v("\n            aClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toByteArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" bos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    bos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" bis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    bis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" aClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassLoaderTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassNotFoundException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassLoader")]),t._v(" loader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"D:\\\\code\\\\java\\\\JVM\\\\chapter12\\\\src\\\\com\\\\valid\\\\"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" aClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Initialization"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4-5-java9新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-java9新特性"}},[t._v("#")]),t._v(" 4.5 Java9新特性")]),t._v(" "),s("p",[t._v("包含关系")]),t._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210609123810.png"}}),t._v(" "),s("p",[t._v("为了保证兼容性，"),s("code",[t._v("JDK9")]),t._v("没有从根本声改变三层类加载器架构和双亲委派模型，但是为了模块化系统的顺利运行，仍然发生了一些值得被注意的变动")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("扩展机制被移除，扩展类加载器由于向后兼容性的原因被保留，不过被重命名为平台类加载器"),s("code",[t._v("platform class loader")]),t._v("。可以通过"),s("code",[t._v("ClassLoader")]),t._v("的新方法"),s("code",[t._v("getPlatformClassLoader()")]),t._v("来获取")]),t._v(" "),s("p",[s("code",[t._v("JDK9")]),t._v("时基于模块化进行构建(原来的"),s("code",[t._v("rt.jar")]),t._v("和"),s("code",[t._v("tools.jar")]),t._v("被拆分为数十个"),s("code",[t._v("JMOD")]),t._v("文件)，其中"),s("code",[t._v("Java")]),t._v("类库就已经天然地满足了可扩展的需求，那自然无需再保留"),s("code",[t._v("<JAVA_HOME>\\lib\\ext")]),t._v("目录，此前使用这个目录或者"),s("code",[t._v("java.ext.dirs")]),t._v("系统变量来扩展"),s("code",[t._v("JDK")]),t._v("功能的机制已经没有继续存在的价值了。")])]),t._v(" "),s("li",[s("p",[t._v("平台类加载器和应用程序类加载器都不再继承自"),s("code",[t._v("java.net.URLClassLoader")]),t._v("。现在启动类加载器、平台类加载器、应用程序类加载器全部继承于"),s("code",[t._v("jdk.internal.loader.BuiltinClassLoader")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210609124116.png",alt:""}})]),t._v(" "),s("p",[t._v("如果有程序直接依赖了这种继承关系，或者依赖了"),s("code",[t._v("URLClassLoader")]),t._v("类的特定方法，那代码很可能会在"),s("code",[t._v("JDK9")]),t._v("或更高的版本中崩溃")])]),t._v(" "),s("li",[s("p",[t._v("在"),s("code",[t._v("Java9")]),t._v("中，类加载器有了名称。该名称在构造方法中指定，可以通过"),s("code",[t._v("getName()")]),t._v("方法来获取。平台类加载器的名称是"),s("code",[t._v("platform")]),t._v("，应用类加载器的名称是"),s("code",[t._v("app")]),t._v("。类加载器的名称在调试与类加载器相关的问题时非常有用")])]),t._v(" "),s("li",[s("p",[t._v("启动类加载器现在是"),s("code",[t._v("JVM")]),t._v("内部和"),s("code",[t._v("java")]),t._v("类库共同协作实现的类加载器(以前是"),s("code",[t._v("C++")]),t._v("实现)，但是为了与之前代码兼容，在获取启动类加载器的场景只能够仍然返回"),s("code",[t._v("null")]),t._v("，而不会得到"),s("code",[t._v("BootClassLoader")]),t._v("的实例")])]),t._v(" "),s("li",[s("p",[t._v("类加载的委派关系也发生了变动")]),t._v(" "),s("p",[t._v("当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载")])])])])}),[],!1,null,null,null);a.default=_.exports}}]);