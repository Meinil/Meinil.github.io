(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{568:function(t,a,s){"use strict";s.r(a);var n=s(8),e=function(t){t.options.__data__block__={mermaid_64a5606e:"graph TD\nA(A) --\x3eB(B)\nA  --\x3eC(C)\nB --\x3eD(D)\nC --\x3eD\n",mermaid_64a56060:"graph TD\nA(虚表指针) --\x3eB(类的成员变量)\nB --\x3eC(基类的成员变量)\n",mermaid_64a55fe6:"graph TD\nA(虚表指针B) --\x3eB(B的类成员)\nB --\x3eC(虚表指针C)\nC --\x3eD(C的类成员)\nD --\x3eE(D的类成员)\nE --\x3eF(虚基类的成员)\n"}},r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),s("p",[t._v("将包裹的代码块按照"),s("code",[t._v("c语言")]),t._v("的方式编译")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码块")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("防止重复引入")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("宏")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("宏 ")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//宏的定义一般是__文件名_H")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码块")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),s("p",[t._v("第二种防止重复引入")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("once")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兼容性不好")]),t._v("\n")])])]),s("h3",{attrs:{id:"内联函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内联函数"}},[t._v("#")]),t._v(" 内联函数")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("inline")]),t._v("所修饰的函数声明或者实现,编译器会将内联函数直接转换为函数代码")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("内联函数的执行不需要分配栈空间，执行了效率")]),t._v(" "),s("p",[t._v("会增大代码的体积")]),t._v(" "),s("p",[t._v("递归函数不会变成内联")]),t._v(" "),s("h3",{attrs:{id:"const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" const")]),t._v(" "),s("p",[s("code",[t._v("const")]),t._v("仅仅修饰其右边的值，被修饰的值为常量不可修改")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p1不是常量，*p1是常量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p2不是常量，*p3是常量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p3是常量，*p3不是")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p4,*p4都是常量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p5,*p5都是常量")]),t._v("\n")])])]),s("h3",{attrs:{id:"引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[t._v("#")]),t._v(" 引用")]),t._v(" "),s("p",[t._v("相当于给变量起别名，对引用做计算就相当于对引用所指向的变量做计算")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义一个引用，")]),t._v("\n")])])]),s("p",[t._v("指针的引用")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("数组的引用")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ref1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两种写法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ref2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("常引用：引用可以被"),s("code",[t._v("const")]),t._v("修饰，这样就无法通过引用修改数据了，可以称为常引用,常引用可以引用常量，也可以引用不同类型的数据，但是不同类型的变量相当于引用指向了一个临时变量")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ref1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ref2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ref3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("对于函数而言：如果形参为引用，则只能接受非const实参，而常引用可以接受任意的实参，常引用与非常引用函数可以构成函数重载")]),t._v(" "),s("p",[t._v("引用定义时必须赋初值")]),t._v(" "),s("p",[t._v("引用一旦定义不可修改其指向")]),t._v(" "),s("p",[t._v("引用的本质就是指针，知识编译器削弱了它的功能，所以引用就是弱化了的指针")]),t._v(" "),s("h3",{attrs:{id:"默认参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认参数"}},[t._v("#")]),t._v(" 默认参数")]),t._v(" "),s("p",[t._v("c++允许函数的参数有默认值")]),t._v(" "),s("p",[t._v("默认参数写在声明里，实现不必写")]),t._v(" "),s("h2",{attrs:{id:"intel-x64汇编"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intel-x64汇编"}},[t._v("#")]),t._v(" intel x64汇编")]),t._v(" "),s("h3",{attrs:{id:"内联汇编"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内联汇编"}},[t._v("#")]),t._v(" 内联汇编")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("__asm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("汇编代码\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄存器"}},[t._v("#")]),t._v(" 寄存器")]),t._v(" "),s("p",[t._v("64位通用寄存器："),s("code",[t._v("RAX")]),t._v("、"),s("code",[t._v("RBX")]),t._v("、"),s("code",[t._v("RCX")]),t._v("、"),s("code",[t._v("RDX")]),t._v("，"),s("code",[t._v("R")]),t._v("开头的寄存器时64位的，占8个字节。"),s("code",[t._v("E")]),t._v("开头的是32位的占四个字节")]),t._v(" "),s("h3",{attrs:{id:"汇编指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#汇编指令"}},[t._v("#")]),t._v(" 汇编指令")]),t._v(" "),s("p",[t._v("将src的内容赋值给dest，类似于dest=src")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("mov dest, src\n")])])]),s("p",[t._v("中括号"),s("code",[t._v("[]")]),t._v("里面放的都是内存地址")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[地址值]\n")])])]),s("p",[s("code",[t._v("word")]),t._v("两个字节，"),s("code",[t._v("dword")]),t._v("是四个字节，"),s("code",[t._v("qword")]),t._v("是八字节")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("mov dword ptr [地址], 值\n;将值放入指定地址的四个字节中\n")])])]),s("p",[t._v("调用函数")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("call 函数地址\n")])])]),s("p",[t._v("取地址")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("lea eax, [地址值]\n")])])]),s("p",[t._v("函数返回")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ret\n")])])]),s("p",[t._v("异或")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("xor op1, op2\n;将op1与op2异或的值赋值给op1\n")])])]),s("p",[t._v("加法")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("add op1, op2\n;op1=op1+op2\n")])])]),s("p",[t._v("减法")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sub op1, op2\n")])])]),s("p",[t._v("自加")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("inc op\n;op++\n")])])]),s("p",[t._v("自减")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dec op\n;op--\n")])])]),s("p",[t._v("跳转")]),t._v(" "),s("div",{staticClass:"language-assembly extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("jmp 内存地址\n")])])]),s("h2",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[t._v("#")]),t._v(" 面向对象")]),t._v(" "),s("h3",{attrs:{id:"内存空间的布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存空间的布局"}},[t._v("#")]),t._v(" 内存空间的布局")]),t._v(" "),s("p",[t._v("每个应用都有自己独立的内存空间，其内存空间一般有以下几个区域")]),t._v(" "),s("ul",[s("li",[t._v("代码段(代码区)：用于存放代码")]),t._v(" "),s("li",[t._v("数据段(全局区)：用于存放全局变量等")]),t._v(" "),s("li",[t._v("栈空间：没调用一个函数就会给它分配一段连续的占空间,等函数调用完毕后自动回收这些栈空间")]),t._v(" "),s("li",[t._v("堆空间：需要主动去申请和释放")])]),t._v(" "),s("h3",{attrs:{id:"内存创建与销毁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存创建与销毁"}},[t._v("#")]),t._v(" 内存创建与销毁")]),t._v(" "),s("p",[s("code",[t._v("malloc/free")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化 将每一个字节都设置为0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("memset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("new/delete")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int *p = new int(0); 初始化为0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 释放")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),s("p",[t._v("c++里可以通过"),s("code",[t._v("struct")]),t._v("、和"),s("code",[t._v("class")]),t._v("来定义类，"),s("code",[t._v("struct")]),t._v("的默认成员是"),s("code",[t._v("public")]),t._v("，而"),s("code",[t._v("class")]),t._v("默认是"),s("code",[t._v("private")])]),t._v(" "),s("h3",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("p",[t._v("对象是类的实例")]),t._v(" "),s("p",[t._v("对象的内存布局是连续的，默认的对象是放在栈空间")]),t._v(" "),s("h3",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),s("p",[t._v("成员变量私有化，提供公共的"),s("code",[t._v("getter")]),t._v("和"),s("code",[t._v("setter")]),t._v("给外界去访问成员变量")]),t._v(" "),s("h3",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v("构造函数也叫构造器，在对象创建的时候自动调用，一般用于完成对象的初始化工作")]),t._v(" "),s("p",[t._v("构造函数的名字和类的名字相同，没有返回值可以有参数，可以重载")]),t._v(" "),s("p",[t._v("一旦定义了构造函数，必须通过其中一个来初始化对象")]),t._v(" "),s("p",[s("code",[t._v("malloc")]),t._v("定义的对象不会调用构造函数")]),t._v(" "),s("p",[t._v("在某些特定的情况下，编译器会为类生成空的无参的构造函数")]),t._v(" "),s("h3",{attrs:{id:"成员变量的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员变量的初始化"}},[t._v("#")]),t._v(" 成员变量的初始化")]),t._v(" "),s("p",[t._v("默认情况下(无构造函数)：全局区的成员变量初始化为0，栈空间不会初始化，堆空间带"),s("code",[t._v("()")]),t._v("的初始化")]),t._v(" "),s("p",[t._v("如果自定义了构造函数，除了全局区都不会初始化")]),t._v(" "),s("h3",{attrs:{id:"析构函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#析构函数"}},[t._v("#")]),t._v(" 析构函数")]),t._v(" "),s("p",[t._v("析构函数在对象销毁之前调用，用于清理内存")]),t._v(" "),s("p",[t._v("析构函数的名字为"),s("code",[t._v("~类名")]),t._v("，不能重载")]),t._v(" "),s("p",[s("code",[t._v("malloc")]),t._v("创建的对象不会调用析构函数")]),t._v(" "),s("p",[t._v("构造函数与析构函数都需要为"),s("code",[t._v("public")]),t._v("才能被对象调用")]),t._v(" "),s("h3",{attrs:{id:"命名空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[t._v("#")]),t._v(" 命名空间")]),t._v(" "),s("p",[t._v("c++可以通过命名空间来防止变量，类等命名冲突的问题")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" 名字 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码块")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("命名空间有一个默认的命名空间，没有名字,所有的代码都嵌套在全局命名空间里面")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("\n")])])]),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),s("p",[t._v("通过继承可以让子类拥有父类的成员变量和函数")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 子类名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 父类名 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("继承默认为私有继承")]),t._v(" "),s("h3",{attrs:{id:"成员访问权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员访问权限"}},[t._v("#")]),t._v(" 成员访问权限")]),t._v(" "),s("p",[s("code",[t._v("public")]),t._v("，成员为公共的成员，即可以任意访问")]),t._v(" "),s("p",[s("code",[t._v("private")]),t._v("成员为私有成员，即意味着只能在类中访问")]),t._v(" "),s("p",[s("code",[t._v("producted")]),t._v("类以及子类里可以访问该成员")]),t._v(" "),s("p",[t._v("访问权限不影响内存布局")]),t._v(" "),s("h3",{attrs:{id:"初始化列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化列表"}},[t._v("#")]),t._v(" 初始化列表")]),t._v(" "),s("p",[t._v("一种便捷的初始换成员变量的方式")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("构造函数"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("m_height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成员变量的初始化顺序只跟定义的顺序有关")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("只能用于构造函数中，声明和实现分离初始化列表放在实现里面")]),t._v(" "),s("p",[t._v("对于构造函数的相互调用只能放在初始化列表中")]),t._v(" "),s("h3",{attrs:{id:"父类构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父类构造函数"}},[t._v("#")]),t._v(" 父类构造函数")]),t._v(" "),s("p",[t._v("子类的构造函数默认回去调用父类的构造函数")]),t._v(" "),s("p",[t._v("如果子类的构造函数显示地调用了父类的有参构造函数，就不会再去默认调用父类的无参构造函数")]),t._v(" "),s("p",[t._v("如果父类没有构造函数，则不会调用父类的构造函数")]),t._v(" "),s("h3",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),s("p",[t._v("父类指针可以指向子类对象(通过public继承)但是只能访问父类的属性和方法，子类指针不可以指向父类对象")]),t._v(" "),s("p",[t._v("同一操作作用域不同的对象，可以有不同的解释，产生不同的结果")]),t._v(" "),s("p",[t._v("子类通过重写父类的虚(virtual)方法，来实现多态")]),t._v(" "),s("p",[t._v("如果父类的函数(方法)为虚函数，则子类重写的函数也为虚函数")]),t._v(" "),s("p",[t._v("虚函数的实现原理是虚表，这个虚表里面存储着最终需要调用的虚函数地址，这个虚表也叫虚函数表，一个对象(如果有虚表)最前的4/8个字节存储的是虚表的地址")]),t._v(" "),s("p",[t._v("在子类中可以调用父类的虚函数")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("函数名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("虚析构函数：如果存在父类指针指向子类对象的情况，应该将析构函数声明为虚函数，否则子类的析构函数不会被调用")]),t._v(" "),s("p",[t._v("纯虚函数：没有函数体且初始化为0的虚函数，用来定义接口规范")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" 函数声明 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("speak")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("只要一个类中包含纯虚函数这个类就称为抽象类，抽象类不能创建对象")]),t._v(" "),s("p",[t._v("如果父类是抽象类，子类没有完全重写纯虚函数，那么这个子类依然是抽象类")]),t._v(" "),s("h3",{attrs:{id:"多继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多继承"}},[t._v("#")]),t._v(" 多继承")]),t._v(" "),s("p",[t._v("C++允许一个类可以有多个父类（不建议使用），内存布局跟继承的顺序有关")]),t._v(" "),s("p",[t._v("如果子类继承的多个父类都有虚函数，那么子类对象就会产生对应的多张虚表")]),t._v(" "),s("p",[t._v("如果成员变量或者方法有同名，默认访问对象本身的变量或方法，访问父类的变量或方法应使用其类名")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("对象名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("父类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("成员\n")])])]),s("h3",{attrs:{id:"虚继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚继承"}},[t._v("#")]),t._v(" 虚继承")]),t._v(" "),s("p",[t._v("菱形继承：B、C继承A，D继承B、C会导致A被D重复继承")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a5606e",graph:t.$dataBlock.mermaid_64a5606e}}),s("p",[t._v("虚继承在"),s("code",[t._v("B")]),t._v("、"),s("code",[t._v("C")]),t._v("类继承时添加"),s("code",[t._v("virtual")]),t._v("关键字修饰，虚继承的后果是BC继承的为同一块"),s("code",[t._v("内存")]),t._v("里的东西")]),t._v(" "),s("p",[t._v("B、C的内存布局")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a56060",graph:t.$dataBlock.mermaid_64a56060}}),s("p",[t._v("虚表指针指向的内存空间里")]),t._v(" "),s("ul",[s("li",[t._v("虚表指针与本类起始的偏移量(一般是0)")]),t._v(" "),s("li",[t._v("虚基类第一个成员变量与本类起始的偏移量")])]),t._v(" "),s("p",[t._v("D的内存布局")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a55fe6",graph:t.$dataBlock.mermaid_64a55fe6}}),s("h3",{attrs:{id:"静态成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态成员"}},[t._v("#")]),t._v(" 静态成员")]),t._v(" "),s("p",[t._v("被"),s("code",[t._v("static")]),t._v("修饰的成员变量称为静态成员")]),t._v(" "),s("p",[t._v("静态成员变量")]),t._v(" "),s("ul",[s("li",[t._v("存储在数据段(全局区，类似于全局变量)，整个程序运行过程中只有一份内存")]),t._v(" "),s("li",[t._v("静态成员变量必须放在类的外面初始化，初始化不需要带"),s("code",[t._v("static")])])]),t._v(" "),s("p",[t._v("静态成员函数")]),t._v(" "),s("ul",[s("li",[t._v("静态成员函数内部没有"),s("code",[t._v("this")])]),t._v(" "),s("li",[t._v("静态成员函数不能用"),s("code",[t._v("virtual")]),t._v("修饰")]),t._v(" "),s("li",[t._v("静态成员函数内部不能访问非静态成员变量/函数")])]),t._v(" "),s("p",[t._v("静态成员也可以通过"),s("code",[t._v("类名::静态成员名")]),t._v("来访问")]),t._v(" "),s("p",[t._v("如果继承的父类含有同名的静态成员则，它们属于不同的变量")]),t._v(" "),s("p",[t._v("应用常见：单例模式，保证某个类只创建一个对象")]),t._v(" "),s("ul",[s("li",[t._v("（拷贝）构造函数私有化")]),t._v(" "),s("li",[t._v("定义一个私有的"),s("code",[t._v("static")]),t._v("成员变量指向唯一的哪个单例对象")]),t._v(" "),s("li",[t._v("提供一个公共的访问单例对象的方法")]),t._v(" "),s("li",[t._v("重载赋值运算符私有化")])]),t._v(" "),s("h3",{attrs:{id:"const成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#const成员"}},[t._v("#")]),t._v(" const成员")]),t._v(" "),s("p",[t._v("只有静态函数成员不能被"),s("code",[t._v("const")]),t._v("修饰")]),t._v(" "),s("p",[s("code",[t._v("const")]),t._v("成员变量")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("const")]),t._v("成员变量必须在定义时或构造函数的初始化列表中初始化")]),t._v(" "),s("li",[s("code",[t._v("static")]),t._v("可以修饰"),s("code",[t._v("const")])])]),t._v(" "),s("p",[s("code",[t._v("const")]),t._v("成员函数")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("const")]),t._v("关键字写在参数列表后面，函数的声明和实现都必须加"),s("code",[t._v("const")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("函数内部不能修改非静态成员变量")])]),t._v(" "),s("li",[s("p",[t._v("函数内部只能调用"),s("code",[t._v("cosnt")]),t._v("、"),s("code",[t._v("static")]),t._v("成员函数")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("const")]),t._v("成员函数可以和非"),s("code",[t._v("const")]),t._v("构成重载，")])]),t._v(" "),s("li",[s("p",[t._v("非"),s("code",[t._v("const")]),t._v("对象优先调用非"),s("code",[t._v("const")]),t._v("函数")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("const")]),t._v("对象只能调用"),s("code",[t._v("const")]),t._v("、"),s("code",[t._v("static")]),t._v("函数")])])]),t._v(" "),s("h3",{attrs:{id:"引用类型成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用类型成员"}},[t._v("#")]),t._v(" 引用类型成员")]),t._v(" "),s("p",[t._v("引用类型成员变量必须初始化，可以在声明的时候初始化，也可以通过初始化列表初始化")]),t._v(" "),s("h3",{attrs:{id:"拷贝构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数"}},[t._v("#")]),t._v(" 拷贝构造函数")]),t._v(" "),s("p",[t._v("拷贝构造函数的语法是固定的，接受一个"),s("code",[t._v("const")]),t._v("引用的对象")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("类名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" 类名 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("变量名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("利用已存在的对象创建一个新对象时，就会调用新对象的拷贝构造函数进行初始化")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("类名 要创建的对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("已经存在的对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("默认情况下(没有定义拷贝构造函数)")]),t._v(" "),s("p",[t._v("会将已存在的对象的成员变量一一赋值给要创建的对象的成员变量")]),t._v(" "),s("p",[t._v("默认的拷贝为浅拷贝")]),t._v(" "),s("h3",{attrs:{id:"对象型参数和返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象型参数和返回值"}},[t._v("#")]),t._v(" 对象型参数和返回值")]),t._v(" "),s("p",[t._v("使用对象类型作为函数的参数或者返回值，可能会产生一些不必要的中间对象")]),t._v(" "),s("p",[t._v("使用对象作为函数参数尽量使用引用")]),t._v(" "),s("h4",{attrs:{id:"匿名对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名对象"}},[t._v("#")]),t._v(" 匿名对象")]),t._v(" "),s("p",[t._v("没有变量名，创建之后即销毁")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("类名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("匿名对象的生命周期仅限于当前行")]),t._v(" "),s("p",[t._v("如果是匿名对象作为函数参数，则仅会调用一次构造函数")]),t._v(" "),s("p",[t._v("c++存在隐式构造，即可以将一个常量赋值给一个对象，默认情况下（必须有单参数的构造函数或者其他参数有默认值）这个常量会隐式生成一个匿名对象将常量值赋值给这个隐式对象，可以通过"),s("code",[t._v("explicit")]),t._v("修饰构造函数来禁止隐式构造")]),t._v(" "),s("h3",{attrs:{id:"编译器自动生成构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译器自动生成构造函数"}},[t._v("#")]),t._v(" 编译器自动生成构造函数")]),t._v(" "),s("p",[t._v("编译器在某些特定的情况下会自动生成构造函数")]),t._v(" "),s("ul",[s("li",[t._v("成员变量在声明的同时进行了初始化")]),t._v(" "),s("li",[t._v("有定义虚函数")]),t._v(" "),s("li",[t._v("虚继承了其他类")]),t._v(" "),s("li",[t._v("包含了对象类型的成员，且这个成员有构造函数")]),t._v(" "),s("li",[t._v("父类有有构造函数")])]),t._v(" "),s("p",[t._v("对象创建后，需要做一些额外的操作(内存操作，函数调用)，编译器会自动生成无参的构造函数")]),t._v(" "),s("h3",{attrs:{id:"友元"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#友元"}},[t._v("#")]),t._v(" 友元")]),t._v(" "),s("p",[t._v("假设有类"),s("code",[t._v("A")]),t._v("、"),s("code",[t._v("B")]),t._v("和函数"),s("code",[t._v("func")])]),t._v(" "),s("p",[t._v("友元函数：")]),t._v(" "),s("p",[t._v("将一个函数在类中声明为友元函数即可在函数内部访问对象的私有成员，通过"),s("code",[t._v("friend")]),t._v("关键字修饰，友元函数不能是成员函数")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在类A中声明")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" 函数返回值 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将函数func声明为A的友元函数")]),t._v("\n")])])]),s("p",[t._v("友元类：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在类A中声明")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将类B声明为类A的友元类")]),t._v("\n")])])]),s("h3",{attrs:{id:"内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[t._v("#")]),t._v(" 内部类")]),t._v(" "),s("p",[t._v("将一个类定义到另一个类的内部称为内部类(嵌套类)")]),t._v(" "),s("p",[t._v("内部类可以设置访问权限，如果为"),s("code",[t._v("public")]),t._v("需要通过外层类的名字进行访问")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("外部类"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("内部类 对象名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("内部类可以访问外部类的成员(包括静态成员)，外部类不能访问内部类的私有成员")]),t._v(" "),s("p",[t._v("内部类不影响外部类的内存布局")]),t._v(" "),s("p",[t._v("内部类可以在外部类中声明，实现放在外面")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token base-clause"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"局部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部类"}},[t._v("#")]),t._v(" 局部类")]),t._v(" "),s("p",[t._v("定义在函数内部的类")]),t._v(" "),s("p",[t._v("局部类声明和实现必须放在内部")]),t._v(" "),s("p",[t._v("局部类不允许定义静态成员变量")]),t._v(" "),s("p",[t._v("局部类不能访问该函数的变量"),s("code",[t._v("static")]),t._v("变量除外")]),t._v(" "),s("p",[t._v("局部类不影响函数的内存布局")]),t._v(" "),s("h3",{attrs:{id:"运算符重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载"}},[t._v("#")]),t._v(" 运算符重载")]),t._v(" "),s("p",[t._v("可以为运算符增加一些新的功能")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" 返回值 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" 重载的运算符"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数列表最好加上const")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("为了参数列表能够接受常量对象，所以参数列表里的参数应声明为"),s("code",[t._v("const")])]),t._v(" "),s("p",[t._v("运算符重载(若有返回值)最好返回一个"),s("code",[t._v("const")]),t._v("变量(对象)，因为运算符重载过后运算的结果是一个临时的变量，不应该能被赋值")]),t._v(" "),s("p",[t._v("又因为"),s("code",[t._v("const")]),t._v("对象只能调用"),s("code",[t._v("const")]),t._v("函数所以函数也应该声明为"),s("code",[t._v("const")])]),t._v(" "),s("p",[t._v("对于"),s("code",[t._v("++")]),t._v("运算符有"),s("code",[t._v("++p")]),t._v("和"),s("code",[t._v("p++")]),t._v("之分")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" 类 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p++, 参数列表必须是int")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" 类"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("成员变量"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n类"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ++p，这种方式应该可以被赋值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成员变量++")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("左移和右移只能重载为全局函数，然后在类中声明友元")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ostream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" 对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cout")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nistream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("istream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cin")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于有继承关系的的重载赋值运算符，应在子类里调用父类的赋值运算符")]),t._v(" "),s("p",[t._v("仿函数即重载"),s("code",[t._v("()")]),t._v("该函数类似于普通的全局函数但，这种函数可以访问成员变量")]),t._v(" "),s("p",[t._v("不可被重载的运算符："),s("code",[t._v(".")]),t._v("、"),s("code",[t._v("::")]),t._v("、"),s("code",[t._v("?:")]),t._v("、"),s("code",[t._v("sizeof")])]),t._v(" "),s("p",[t._v("只能重载为成员函数："),s("code",[t._v("=")]),t._v("、"),s("code",[t._v("[]")]),t._v("、"),s("code",[t._v("()")]),t._v("、"),s("code",[t._v("->")])]),t._v(" "),s("h2",{attrs:{id:"模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),s("p",[t._v("泛型：是一种将类型参数化以达到代码复用的技术，C++中使用模板来实现泛型")]),t._v(" "),s("p",[t._v("模板语法")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("calss T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("calss A"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n函数声明 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用")]),t._v("\n函数名字"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类型名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("模板的声明和实现放在"),s("code",[t._v(".h")]),t._v("、"),s("code",[t._v(".cpp")]),t._v("则会编译出错")]),t._v(" "),s("p",[t._v("一般模板的声明和实现都会放在一个"),s("code",[t._v(".hpp")]),t._v("文件中")]),t._v(" "),s("p",[t._v("对于声明和实现分离的模板类的实现需要添加修饰")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nT 类名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("函数名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于分离的友元函数需要额外的"),s("code",[t._v("<>")]),t._v("修饰")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("返回值 函数名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数列表"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("h3",{attrs:{id:"c语言强制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c语言强制转换"}},[t._v("#")]),t._v(" c语言强制转换")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"c-强制转化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-强制转化"}},[t._v("#")]),t._v(" C++强制转化")]),t._v(" "),s("p",[s("code",[t._v("static_cast")]),t._v("：没有运行时检测，不能交叉转换(两个没有任何联系的变量/对象之间的转换)，常用于基本数据类型的转换，非"),s("code",[t._v("const")]),t._v("、转换为"),s("code",[t._v("const")])]),t._v(" "),s("p",[s("code",[t._v("dynamic_cast")]),t._v("：一般用于多态的转换，有运行时安全检测，如果不安全会将指针置空")]),t._v(" "),s("p",[s("code",[t._v("reinterpret_cast")]),t._v("：属于比较壁层的强制转换，没有任何类型检查和格式转换，仅仅是简单的二进制数据拷贝，它的类型需要有时引用，可以交叉转换，也可以将指针与变量之间进行转换")]),t._v(" "),s("p",[s("code",[t._v("const_cast")]),t._v("：将"),s("code",[t._v("const")]),t._v("转换为非"),s("code",[t._v("const")])]),t._v(" "),s("p",[t._v("格式")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("xx_cast"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("表达式"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"c-11特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-11特性"}},[t._v("#")]),t._v(" C++11特性")]),t._v(" "),s("p",[s("code",[t._v("auto")]),t._v("：可以从初始化表达式中推断出变量的类型，大大简化编程工作")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动推断a为整型")]),t._v("\n")])])]),s("p",[s("code",[t._v("decltype")]),t._v("：获取变量的类型")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("nullptr")]),t._v("：空指针,解决了NULL二义性的问题")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("快速遍历")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("Lambda")]),t._v("表达式，可以定义在函数内部的函数")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义 可以使用auto")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 立即执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 带返回值和参数的表达式，返回值可省略")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("捕获")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 捕获外部的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以传引用，进行地址捕获")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动捕获，值捕获， 将=换成&地址捕获")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("改变捕获的变量的值")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用地址捕获")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用mutable,不会影响表达式外部的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" func "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),s("h3",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可能会抛出异常的代码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抛出异常的代码下面抛出异常之后不会执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (异常类型 变量名)异常类型,异常类型不一样catch可以有多个， ...代表所有异常")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 捕捉到异常需要做的事情")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("主动抛出异常")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"主动抛出"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要try catch 捕捉")]),t._v("\n")])])]),s("p",[s("code",[t._v("throw")]),t._v("异常之后会在当前函数中查找匹配的"),s("code",[t._v("catch")]),t._v("，找不到就终止当前函数代码，去上一层函数中查找，如果到"),s("code",[t._v("main")]),t._v("函数中依然没有匹配的"),s("code",[t._v("catch")]),t._v("程序会被终止")]),t._v(" "),s("p",[t._v("捕捉异常的类型匹配是严谨的，不存在隐式转换")]),t._v(" "),s("h3",{attrs:{id:"异常抛出声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常抛出声明"}},[t._v("#")]),t._v(" 异常抛出声明")]),t._v(" "),s("p",[t._v("为了增强可读性和方便团队协作，如果函数内部可能会抛出异常，建议函数声明异常类型")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可能会抛出任意类型的异常")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会抛出异常")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抛出指定类型的异常")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("异常类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"自定义异常类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常类型"}},[t._v("#")]),t._v(" 自定义异常类型")]),t._v(" "),s("p",[t._v("定义所有异常的基类")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有异常均继承自基类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义一些纯虚函数来规范异常，纯虚函数一般为const")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("定义异常")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" 异常函数名Exception "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Exception"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写父类的虚函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"标准异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准异常"}},[t._v("#")]),t._v(" 标准异常")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("异常")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("std::exception")]),t._v(" "),s("td",[t._v("该异常是所有标准C++异常的父类")])]),t._v(" "),s("tr",[s("td",[t._v("std::bad_alloc")]),t._v(" "),s("td",[t._v("该异常可以通过new抛出")])]),t._v(" "),s("tr",[s("td",[t._v("std::bad_cast")]),t._v(" "),s("td",[t._v("该异常可以通过dynamic_cast抛出")])]),t._v(" "),s("tr",[s("td",[t._v("std::bad_exception")]),t._v(" "),s("td",[t._v("这在处理C++程序中无法预期的异常时")])])])]),t._v(" "),s("p",[t._v("等等。。，C++标准里定义了许多异常")]),t._v(" "),s("h2",{attrs:{id:"智能指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#智能指针"}},[t._v("#")]),t._v(" 智能指针")]),t._v(" "),s("p",[t._v("智能指针指向内存的生命周期跟随指针变量的生命周期，不需要手动销毁，智能指针不要指向栈空间的对象，否则会多次调用析构函数")]),t._v(" "),s("h3",{attrs:{id:"auto-ptr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-ptr"}},[t._v("#")]),t._v(" auto_ptr")]),t._v(" "),s("p",[t._v("不能用于数组，不推荐使用")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("auto_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 变量名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"shared-ptr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shared-ptr"}},[t._v("#")]),t._v(" shared_ptr")]),t._v(" "),s("p",[t._v("支持数组,且多个"),s("code",[t._v("shared_ptr")]),t._v("可以指向同一个指针对象")]),t._v(" "),s("p",[t._v("一个"),s("code",[t._v("shared_ptr")]),t._v("会对一个对象产生强引用，每个对象都有与之对应的强引用技术，记录着当前多少个"),s("code",[t._v("shared_ptr")]),t._v("被墙引用着，可以通过"),s("code",[t._v("shared_ptr")]),t._v("的"),s("code",[t._v("use_count")]),t._v("函数获得强引用计数")]),t._v(" "),s("p",[t._v("当有一个新的"),s("code",[t._v("shared_ptr")]),t._v("指向对象时，对象的强引用计数就会加1，销毁则减一")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("shared_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 变量名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("对于"),s("code",[t._v("shared_ptr")]),t._v("指针而言有循环引用的风险，而"),s("code",[t._v("weak_ptr")]),t._v("弱引用智能指针能解决")]),t._v(" "),s("h3",{attrs:{id:"unique-ptr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unique-ptr"}},[t._v("#")]),t._v(" unique_ptr")]),t._v(" "),s("p",[t._v("也会对一个对象产生强引用，它可以确保同一时间只有一个指针指向对象")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("unique_ptr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 变量名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" 类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("特别情况下可以使用"),s("code",[t._v("std::move()")]),t._v("转移智能指针,原指针被销毁")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("指针"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("move")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("指针"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])],1)}),[],!1,null,null,null);"function"==typeof e&&e(r);a.default=r.exports}}]);