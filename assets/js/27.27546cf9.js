(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{572:function(a,t,s){"use strict";s.r(t);var v=s(8),_=function(a){a.options.__data__block__={mermaid_1a962850:"graph TD\nKotlin --\x3e C[编译器]\nClojure --\x3e C\nGroovy --\x3e C\nScala --\x3e C\nJython --\x3e C\nJRuby --\x3e C\nJavaScript --\x3e C\nC --\x3e 字节码文件\n字节码文件 --\x3e java虚拟机\n",mermaid_382ee1a2:"graph TD\n并行处理 --\x3e Clojure\n展示层 --\x3e JRuby/Rails\n中间层 --\x3e Java\n",mermaid_64a57024:"graph TD\njava程序 --\x3e |编译|A[字节码文件] --\x3e |执行|windows_JVM\nA --\x3e |执行|Linux_JVM\nA --\x3e |执行|Mac_JVM\n",mermaid_64a5673a:"graph LR\nA(加载Loading) --\x3e B(验证Verification) --\x3e C(准备Preparation) --\x3e D(解析Resolution) --\x3e E(初始化Initialization)\n",mermaid_64a5609e:"graph TD\nB(验证Verification) --\x3e C(准备Preparation) --\x3e D(解析Resolution)\n",mermaid_64a5591c:"graph TD\nA[Bootstrap ClassLoader] --\x3e B[Extension Class Loader] --\x3e C[System Class Loader] --\x3e D[User Define Class Loader] --\x3e E[User Defined Class Loader] --\x3e |...|I[....]\nC --\x3e F[User Defined Class Loader] --\x3eG[User Defined Class Loader] --\x3e |...|H[....]\n",mermaid_64a549a8:"classDiagram\nclass ClassLoader{\n\t<<abstract>>\n\t+loadClass(String)\n\t+resolveClass(Class<?>)\n\t+findClass(String)\n\t+defineClass(byte[], int, int)\n}\nclass SecureClassLoader {\n\t\n}\nclass URLClassLoader {\n\t\n}\nclass ExtClassLoader {\n\t\n}\nclass AppClassLoader {\n\t\n}\nClassLoader <|-- SecureClassLoader\nSecureClassLoader <|-- URLClassLoader\nURLClassLoader <|-- ExtClassLoader\nURLClassLoader <|-- AppClassLoader\n"}},e=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-jvm与java体系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm与java体系"}},[a._v("#")]),a._v(" 1. JVM与java体系")]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("是一个跨语言的平台，在"),s("code",[a._v("java7")]),a._v("的发布之后，"),s("code",[a._v("java")]),a._v("虚拟机的设计者们通过"),s("code",[a._v("JSR-292")]),a._v("规范基本实现在"),s("code",[a._v("java")]),a._v("虚拟机上运行非"),s("code",[a._v("java")]),a._v("语言编写的程序")]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_1a962850",graph:a.$dataBlock.mermaid_1a962850}}),s("h3",{attrs:{id:"_1-1-字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-字节码"}},[a._v("#")]),a._v(" 1.1 字节码")]),a._v(" "),s("ul",[s("li",[a._v("对于字节码的理解，任何能在"),s("code",[a._v("jvm")]),a._v("平台上执行的字节码格式都是一样的。所以应该统称为"),s("code",[a._v("jvm")]),a._v("字节码")]),a._v(" "),s("li",[a._v("不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的"),s("code",[a._v("JVM")]),a._v("上运行")]),a._v(" "),s("li",[s("code",[a._v("java")]),a._v("虚拟机与"),s("code",[a._v("java")]),a._v("语言没有必然的联系，它只与特定的二进制文件格式——"),s("code",[a._v("Class")]),a._v("文件格式所关联，"),s("code",[a._v("class")]),a._v("文件中包含了"),s("code",[a._v("java")]),a._v("虚拟机指令集(或者称为字节码"),s("code",[a._v("Bytecodes")]),a._v(")和符号表，还有一些其它辅助信息")])]),a._v(" "),s("h3",{attrs:{id:"_1-2-多语言混合编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-多语言混合编程"}},[a._v("#")]),a._v(" 1.2 多语言混合编程")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("java")]),a._v("平台上，通过特定领域的语言去解决特定领域的问题是当前软件开发的一个趋势")])]),a._v(" "),s("li",[s("p",[a._v("某一个项目")]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee1a2",graph:a.$dataBlock.mermaid_382ee1a2}})],1),a._v(" "),s("li",[s("p",[a._v("各种语言之间的交互不存在任何困难，就像使用自己语言的原生"),s("code",[a._v("API")]),a._v("一样，因为它们最终都运行在一个虚拟机上")])]),a._v(" "),s("li",[s("p",[a._v("对于运行在"),s("code",[a._v("java")]),a._v("虚拟机之上、"),s("code",[a._v("java")]),a._v("之外的语言，来自系统级、底层的支持正在迅速曾倩，以"),s("code",[a._v("JSR-292")]),a._v("为核心的一系列项目和功能改进")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Vinci Machine\nNashorn\nInvokeDynamic\njava.lang.invoke\n")])])])])]),a._v(" "),s("h3",{attrs:{id:"_1-3-虚拟机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-虚拟机"}},[a._v("#")]),a._v(" 1.3 虚拟机")]),a._v(" "),s("h4",{attrs:{id:"_1-3-1-虚拟机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-虚拟机"}},[a._v("#")]),a._v(" 1.3.1 虚拟机")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("所谓虚拟机"),s("code",[a._v("virtual machine")]),a._v("，就是一台虚拟的计算机，它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机")]),a._v(" "),s("p",[s("code",[a._v("virtual box")]),a._v("，"),s("code",[a._v("VMware")]),a._v("就属于系统虚拟机，它们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台")]),a._v(" "),s("p",[a._v("程序虚拟机的典型代表就是"),s("code",[a._v("java")]),a._v("虚拟机，它专门执行单个计算机程序而设计，在"),s("code",[a._v("java")]),a._v("虚拟机中执行的指令我们称为"),s("code",[a._v("java")]),a._v("字节码指令")])]),a._v(" "),s("li",[s("p",[a._v("无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中")])])]),a._v(" "),s("h4",{attrs:{id:"_1-3-2-java虚拟机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-java虚拟机"}},[a._v("#")]),a._v(" 1.3.2 java虚拟机")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("java")]),a._v("虚拟机是一台执行"),s("code",[a._v("java")]),a._v("字节码的虚拟计算机，它拥有独立的运行机制，其运行的"),s("code",[a._v("java")]),a._v("字节码也未必是"),s("code",[a._v("java")]),a._v("语言编译而成")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("JVM")]),a._v("平台的各种语言可以共享"),s("code",[a._v("java")]),a._v("虚拟机带来的跨平台性、优秀的垃圾回收器，以及可靠的即时编译器")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("java")]),a._v("技术的核心就是"),s("code",[a._v("java")]),a._v("虚拟机，因为所有的"),s("code",[a._v("java")]),a._v("程序都运行在"),s("code",[a._v("java")]),a._v("虚拟机内部")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("java")]),a._v("虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条"),s("code",[a._v("java")]),a._v("指令，"),s("code",[a._v("java")]),a._v("虚拟机规范都有详细定义")])]),a._v(" "),s("li",[s("p",[a._v("特点")]),a._v(" "),s("p",[a._v("一次编译，到处运行")]),a._v(" "),s("p",[a._v("自动内存管理")]),a._v(" "),s("p",[a._v("自动垃圾回收机制")])])]),a._v(" "),s("h3",{attrs:{id:"_1-4-java整体结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-java整体结构"}},[a._v("#")]),a._v(" 1.4 java整体结构")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("HotSpot VM")]),a._v("目前市面上高性能虚拟机的代表作之一")]),a._v(" "),s("li",[a._v("它采用解释起与即时编译器并存的架构")])]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210525163204.png"}}),a._v(" "),s("h3",{attrs:{id:"_1-5-java代码执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-java代码执行流程"}},[a._v("#")]),a._v(" 1.5 java代码执行流程")]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a57024",graph:a.$dataBlock.mermaid_64a57024}}),s("h3",{attrs:{id:"_1-6-jvm架构模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-jvm架构模型"}},[a._v("#")]),a._v(" 1.6 JVM架构模型")]),a._v(" "),s("p",[s("code",[a._v("java")]),a._v("编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种指令集架构则是基于寄存器的指令集架构")]),a._v(" "),s("p",[a._v("具体来说：这两种架构之间的区别")]),a._v(" "),s("h4",{attrs:{id:"_1-6-1-基于栈式架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-基于栈式架构"}},[a._v("#")]),a._v(" 1.6.1 基于栈式架构")]),a._v(" "),s("ul",[s("li",[a._v("设计和实现更简单，适用于资源受限的系统")]),a._v(" "),s("li",[a._v("避开了寄存器的分配难题：使用零地址指令方式分配")]),a._v(" "),s("li",[a._v("指令流中的大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现")]),a._v(" "),s("li",[a._v("不需要硬件支持，可移植性好，更好实现跨平台")])]),a._v(" "),s("h4",{attrs:{id:"_1-6-2-基于寄存器架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-基于寄存器架构"}},[a._v("#")]),a._v(" 1.6.2 基于寄存器架构")]),a._v(" "),s("ul",[s("li",[a._v("典型的应用是"),s("code",[a._v("x86")]),a._v("的二进制指令集：比如传统的"),s("code",[a._v("PC")]),a._v("以及"),s("code",[a._v("Android")]),a._v("的"),s("code",[a._v("Davlik")]),a._v("虚拟机")]),a._v(" "),s("li",[a._v("指令集架构则完全依赖硬件，可移植性差")]),a._v(" "),s("li",[a._v("性能优秀和执行高效")]),a._v(" "),s("li",[a._v("花费更少的指令完成一项操作")]),a._v(" "),s("li",[a._v("在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集都是以零地址指令为主")])]),a._v(" "),s("h4",{attrs:{id:"_1-6-3-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-总结"}},[a._v("#")]),a._v(" 1.6.3 总结")]),a._v(" "),s("p",[a._v("由于跨平台性的设计，"),s("code",[a._v("Java")]),a._v("的指令都是根据栈来设计的。")]),a._v(" "),s("h3",{attrs:{id:"_1-7-jvm的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-jvm的生命周期"}},[a._v("#")]),a._v(" 1.7 JVM的生命周期")]),a._v(" "),s("p",[s("strong",[a._v("虚拟机的启动")])]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("虚拟机的启动是通过引导类加载器"),s("code",[a._v("bootstrap class loader")]),a._v("创建一个初始类"),s("code",[a._v("initial class")]),a._v(" 来完成的，这个类是由虚拟机的具体实现指定的")]),a._v(" "),s("p",[s("strong",[a._v("虚拟机的运行")])]),a._v(" "),s("ul",[s("li",[a._v("一个运行中的"),s("code",[a._v("JaVA")]),a._v("虚拟机有着一个清晰的任务：执行"),s("code",[a._v("java")]),a._v("程序")]),a._v(" "),s("li",[a._v("程序开始执行时它才运行，程序结束时它就停止")]),a._v(" "),s("li",[a._v("执行一个所谓的"),s("code",[a._v("Java")]),a._v("程序的时候，真真正正在执行的是一个叫做"),s("code",[a._v("Java")]),a._v("虚拟机的进程")])]),a._v(" "),s("p",[s("strong",[a._v("虚拟机的退出")])]),a._v(" "),s("ul",[s("li",[a._v("程序正常执行结束")]),a._v(" "),s("li",[a._v("程序在执行过程中遇到了异常或者错误而异常终止")]),a._v(" "),s("li",[a._v("由于操作系统出现错误而导致"),s("code",[a._v("Java")]),a._v("虚拟机进程终止")]),a._v(" "),s("li",[a._v("某线程调用"),s("code",[a._v("Runtime")]),a._v("类或"),s("code",[a._v("System")]),a._v("类的"),s("code",[a._v("exit")]),a._v("方法，或"),s("code",[a._v("Runtime")]),a._v("类的"),s("code",[a._v("Halt")]),a._v("方法，并且"),s("code",[a._v("Java")]),a._v("安全管理器也允许这次"),s("code",[a._v("exit")]),a._v("或"),s("code",[a._v("halt")]),a._v("操作")]),a._v(" "),s("li",[a._v("除此之外，"),s("code",[a._v("JNI(Java Native Interface)")]),a._v("规范描述了用"),s("code",[a._v("JNI Invocation API")]),a._v("来加载或卸载"),s("code",[a._v("Java")]),a._v("虚拟机时，"),s("code",[a._v("Java")]),a._v("虚拟机的退出情况")])]),a._v(" "),s("h2",{attrs:{id:"_2-类加载子系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载子系统"}},[a._v("#")]),a._v(" 2. 类加载子系统")]),a._v(" "),s("h3",{attrs:{id:"_2-1-类加载的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-类加载的过程"}},[a._v("#")]),a._v(" 2.1 类加载的过程")]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"D:\\code\\笔记\\java\\JVM.assets\\image-20201123182326389.png",alt:"image-20201123182326389"}}),a._v(" "),s("ul",[s("li",[a._v("类加载子系统负责从文件系统或者网络中加载"),s("code",[a._v("Class")]),a._v("文件，"),s("code",[a._v("class")]),a._v("文件在文件开头有特定的文件标识")]),a._v(" "),s("li",[s("code",[a._v("ClassLoader")]),a._v("只负责"),s("code",[a._v("calss")]),a._v("文件的加载，至于它是否可以运行，则由"),s("code",[a._v("Execution Engine")]),a._v("决定")]),a._v(" "),s("li",[a._v("加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分常量信息是"),s("code",[a._v("Class")]),a._v("文件中常量池部分的内存映射)")])]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a5673a",graph:a.$dataBlock.mermaid_64a5673a}}),s("h4",{attrs:{id:"_2-1-1-加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-加载"}},[a._v("#")]),a._v(" 2.1.1 加载")]),a._v(" "),s("ol",[s("li",[a._v("通过一个类的全限定名获取定义此类的二进制字节流")]),a._v(" "),s("li",[a._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")]),a._v(" "),s("li",[a._v("在内存中生成一个代表这个类的"),s("code",[a._v("java.lang.Class")]),a._v("对象，作为方法区这个类的各种数据的访问入口")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("加载字节码文件的方式")])])]),a._v(" "),s("ol",[s("li",[a._v("从本地系统中直接加载")]),a._v(" "),s("li",[a._v("通过网络获取"),s("code",[a._v("Web Applet")])]),a._v(" "),s("li",[a._v("从压缩包中读取"),s("code",[a._v("zip")]),a._v("、"),s("code",[a._v("jar")]),a._v("、"),s("code",[a._v("war")])]),a._v(" "),s("li",[a._v("运行时计算生成，动态代理技术")]),a._v(" "),s("li",[a._v("由其他文件生成，典型场景："),s("code",[a._v("JSP")]),a._v("应用")]),a._v(" "),s("li",[a._v("从专有数据库中提取"),s("code",[a._v(".class")]),a._v("文件")]),a._v(" "),s("li",[a._v("从加密文件中获取，典型的防"),s("code",[a._v("Class")]),a._v("文件被反编译的保护措施")])]),a._v(" "),s("h4",{attrs:{id:"_2-1-2-链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-链接"}},[a._v("#")]),a._v(" 2.1.2 链接")]),a._v(" "),s("p",[a._v("链接包括")]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a5609e",graph:a.$dataBlock.mermaid_64a5609e}}),s("ul",[s("li",[s("p",[a._v("验证"),s("code",[a._v("Verify")])]),a._v(" "),s("p",[a._v("目的在于确保"),s("code",[a._v("Class")]),a._v("文件的字节流中包含信息符合当前虚拟机的要求，保证加载类的正确性，不会危害虚拟机自身安全")]),a._v(" "),s("p",[a._v("主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证")])]),a._v(" "),s("li",[s("p",[a._v("准备"),s("code",[a._v("Prepare")])]),a._v(" "),s("p",[a._v("为类变量分配内存并且设置该类的默认初始值，即零值")]),a._v(" "),s("p",[a._v("这里包括含用"),s("code",[a._v("final")]),a._v("修饰的"),s("code",[a._v("static")]),a._v("，因为"),s("code",[a._v("final")]),a._v("在编译的时候就会分配了，准备阶段会显式初始化")]),a._v(" "),s("p",[a._v("这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量会随着对象一起分配到"),s("code",[a._v("java")]),a._v("堆中")])]),a._v(" "),s("li",[s("p",[a._v("解析"),s("code",[a._v("Resolve")])]),a._v(" "),s("p",[a._v("将常量池内的符号引用转换为直接引用的过程")]),a._v(" "),s("p",[a._v("事实上，解析操作往往会伴随着"),s("code",[a._v("JVM")]),a._v("在执行完初始化之后再执行")]),a._v(" "),s("p",[a._v("符号引用就是一组符号来描述所引用的目标，符号引用的字面量形式明确定义在"),s("code",[a._v("Java")]),a._v("虚拟机规范的"),s("code",[a._v("Class")]),a._v("文件格式中，直接引用就是目标的指针、相对偏移量或一个间接定位到目标的句柄")]),a._v(" "),s("p",[a._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的"),s("code",[a._v("CONSTANT_Class_info")]),a._v("、"),s("code",[a._v("CONSTANT_Fieldref_info")]),a._v("、"),s("code",[a._v("CONSTANT_Methodref_info")]),a._v("等")])])]),a._v(" "),s("h4",{attrs:{id:"_2-1-3-初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-初始化"}},[a._v("#")]),a._v(" 2.1.3 初始化")]),a._v(" "),s("ul",[s("li",[a._v("初始化阶段就是执行类构造器方法"),s("code",[a._v("<clinit>()")]),a._v("的过程")]),a._v(" "),s("li",[a._v("此方法不需定义，是"),s("code",[a._v("javac")]),a._v("编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来")]),a._v(" "),s("li",[a._v("构造器方法中指令按语句在源文件中出现的顺序执行")]),a._v(" "),s("li",[s("code",[a._v("<clinit>()")]),a._v("不同于类的构造器。(关联：构造器是虚拟机视角下的"),s("code",[a._v("<init>()")]),a._v(")")]),a._v(" "),s("li",[a._v("若该类具有父类，"),s("code",[a._v("JVM")]),a._v("会保证子类的"),s("code",[a._v("<clinit>()")]),a._v("执行前，父类的"),s("code",[a._v("<clinit>()")]),a._v("已执行完毕")]),a._v(" "),s("li",[a._v("虚拟机必须保证一个类的"),s("code",[a._v("<clinit>()")]),a._v("方法在多线程下被同步加锁")])]),a._v(" "),s("h3",{attrs:{id:"_2-2-类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-类加载器"}},[a._v("#")]),a._v(" 2.2 类加载器")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("JVM")]),a._v("支持两种类型的类加载器，分别是引导类加载器"),s("code",[a._v("Bootstrap ClassLoader")]),a._v("和自定义类加载器"),s("code",[a._v("User-Defined ClassLoader")])]),a._v(" "),s("li",[a._v("从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是"),s("code",[a._v("java")]),a._v("虚拟机规范却没有这么定义，而是将所有派生于抽象类"),s("code",[a._v("ClassLoader")]),a._v("的类加载器都划分为自定义类加载器")]),a._v(" "),s("li",[a._v("无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个")])]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a5591c",graph:a.$dataBlock.mermaid_64a5591c}}),s("p",[a._v("四者的关系不是继承而是包含")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoaderTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取系统类加载器")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" systemClassLoader "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSystemClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("systemClassLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取系统类加载器的上层，扩展类加载器")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" extClassLoader "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" systemClassLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("extClassLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jdk.internal.loader.ClassLoaders$PlatformClassLoader@7c30a502")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取扩展类加载器的上层，引导类加载器")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" bootstrapClassLoader "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" extClassLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("bootstrapClassLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// null")]),a._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对于用户自定义类来说，默认使用系统类加载器进行加载")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" classLoader "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoaderTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("classLoader"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("code",[a._v("Java")]),a._v("的核心类库都是使用引导类加载器进行加载的")]),a._v(" "),s("h4",{attrs:{id:"_2-2-1-虚拟机再带的加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-虚拟机再带的加载器"}},[a._v("#")]),a._v(" 2.2.1 虚拟机再带的加载器")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("启动类加载器")])])]),a._v(" "),s("p",[a._v("启动类加载器(引导类加载器，Bootstrap ClassLoader)")]),a._v(" "),s("ol",[s("li",[a._v("这个类加载器是使用"),s("code",[a._v("C/C++")]),a._v("实现，嵌套在"),s("code",[a._v("JVM")]),a._v("内部")]),a._v(" "),s("li",[a._v("并不是继承自"),s("code",[a._v("java.lang.ClassLoader")]),a._v("，没有父加载器")]),a._v(" "),s("li",[a._v("是加载扩展类和应用程序的类加载器，并指定为他们的父类加载器")]),a._v(" "),s("li",[a._v("处于安全的考虑，"),s("code",[a._v("Bootstrap")]),a._v("启动类只加载包名为"),s("code",[a._v("java")]),a._v("、"),s("code",[a._v("javax")]),a._v("、"),s("code",[a._v("sun")]),a._v("等开头的类")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("扩展类加载器")])])]),a._v(" "),s("p",[a._v("扩展类加载器(Extension ClassLoader)")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("Java")]),a._v("语言编写，由"),s("code",[a._v("sun.misc.Lanucher$ExClassLoader")]),a._v("实现")]),a._v(" "),s("li",[a._v("派生于"),s("code",[a._v("ClassLoader")]),a._v("类，父类加载器为启动类加载器")]),a._v(" "),s("li",[a._v("从"),s("code",[a._v("java.ext.dirs")]),a._v("系统属性所指定的目录中加载类库，或从"),s("code",[a._v("JDK")]),a._v("的安装目录的"),s("code",[a._v("jre/lib/ext")]),a._v("子目录下加载类库。如果用户创建的"),s("code",[a._v("JAR")]),a._v("放在此目录下，也会自动由扩展类加载器加载")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("应用程序类加载器")])])]),a._v(" "),s("ol",[s("li",[s("code",[a._v("java")]),a._v("语言编写，由"),s("code",[a._v("sun.misc.Launcher$AppClassLoader")]),a._v("实现")]),a._v(" "),s("li",[a._v("派生于"),s("code",[a._v("ClassLoader")]),a._v("类，父类加载器为扩展类加载器")]),a._v(" "),s("li",[a._v("它负责加载环境变量"),s("code",[a._v("classpath")]),a._v("或系统属性"),s("code",[a._v("java.class.path")]),a._v("指定路径下的类库")]),a._v(" "),s("li",[a._v("该类加载是程序中默认的类加载器，一般来说，"),s("code",[a._v("Java")]),a._v("应用的类都是由它来完成加载")]),a._v(" "),s("li",[a._v("通过"),s("code",[a._v("ClassLoader.getSystemClassLoader()")]),a._v("方法可以获取到该类加载器")])]),a._v(" "),s("h4",{attrs:{id:"_2-2-2-用户自定义的加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-用户自定义的加载器"}},[a._v("#")]),a._v(" 2.2.2 用户自定义的加载器")]),a._v(" "),s("p",[a._v("大部分场景下，类的加载是由上述的三种类加载器相互配合执行，在一些特殊的场景下，可以自定义类加载器来定制类的加载方式")]),a._v(" "),s("ol",[s("li",[a._v("隔离加载类")]),a._v(" "),s("li",[a._v("修改类加载的方式")]),a._v(" "),s("li",[a._v("扩展加载源")]),a._v(" "),s("li",[a._v("防止源码泄露")])]),a._v(" "),s("p",[a._v("自定义类加载器步骤")]),a._v(" "),s("ol",[s("li",[a._v("开发人员可以通过继承抽象类"),s("code",[a._v("java.lang.ClassLoader")]),a._v("类的方式，实现自己的类加载器，一满足一些特殊的需求")]),a._v(" "),s("li",[a._v("继承"),s("code",[a._v("ClassLoader")]),a._v("类名重写"),s("code",[a._v("findClass()方法")])]),a._v(" "),s("li",[a._v("在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承"),s("code",[a._v("URLClassLoader")]),a._v("类，这样就可以避免自己去编写"),s("code",[a._v("findClass()")]),a._v("方法及其获取字节码流的方式，使自定义类加载器编写更加简洁")])]),a._v(" "),s("h4",{attrs:{id:"_2-2-3-classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-classloader"}},[a._v("#")]),a._v(" 2.2.3 ClassLoader")]),a._v(" "),s("p",[s("code",[a._v("ClassLoader")]),a._v("类，它是一个抽象类，其后所有类加载器都继承自"),s("code",[a._v("ClassLoader")]),a._v("(不包括启动类加载器)")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("方法名称")]),a._v(" "),s("th",[a._v("描述")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("getParent()")]),a._v(" "),s("td",[a._v("返回该类加载器的超类加载器")])]),a._v(" "),s("tr",[s("td",[a._v("loadClass(String name)")]),a._v(" "),s("td",[a._v("加载名称为name的类，返回结果java.lang.Class类的实例")])]),a._v(" "),s("tr",[s("td",[a._v("findClass(String name)")]),a._v(" "),s("td",[a._v("查找名称为name的类，返回结果java.lang.Class类的实例")])]),a._v(" "),s("tr",[s("td",[a._v("findLoadedClass(String name)")]),a._v(" "),s("td",[a._v("查找名称为name且已经被加载过的类，返回结果java.lang.Class的实例")])]),a._v(" "),s("tr",[s("td",[a._v("defineClass(String name, byte[] b, int off, int len)")]),a._v(" "),s("td",[a._v("把字节数组b中的内容转换为一个java类，返回结果为java.lang.Class的实例")])]),a._v(" "),s("tr",[s("td",[a._v("resolveClass(Class<?> c)")]),a._v(" "),s("td",[a._v("连接指定的一个java类")])])])]),a._v(" "),s("Mermaid",{attrs:{id:"mermaid_64a549a8",graph:a.$dataBlock.mermaid_64a549a8}}),s("h3",{attrs:{id:"_2-3-双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-双亲委派机制"}},[a._v("#")]),a._v(" 2.3 双亲委派机制")]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("虚拟机对"),s("code",[a._v("class")]),a._v("文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的"),s("code",[a._v("class")]),a._v("文件加载到内存生成"),s("code",[a._v("class")]),a._v("对象。而且加载某个类的"),s("code",[a._v("class")]),a._v("文件时，"),s("code",[a._v("Java")]),a._v("虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式")]),a._v(" "),s("h4",{attrs:{id:"_2-3-1-工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-工作原理"}},[a._v("#")]),a._v(" 2.3.1 工作原理")]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527215556.png"}}),a._v(" "),s("ol",[s("li",[a._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行")]),a._v(" "),s("li",[a._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终到达顶层的启动类加载器")]),a._v(" "),s("li",[a._v("如果父类加载器可以完成类加载器任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式")])]),a._v(" "),s("h4",{attrs:{id:"_2-3-2-双亲委派的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-双亲委派的优点"}},[a._v("#")]),a._v(" 2.3.2 双亲委派的优点")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("避免类的重复加载")])]),a._v(" "),s("li",[s("p",[a._v("保护程序安全，防止核心"),s("code",[a._v("API")]),a._v("被随意篡改")])]),a._v(" "),s("li",[s("p",[a._v("沙箱安全机制")]),a._v(" "),s("p",[a._v("如自定义"),s("code",[a._v("String")]),a._v("类，但是在加载自定义"),s("code",[a._v("String")]),a._v("类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载"),s("code",[a._v("JDK")]),a._v("自己的包，所以就会忽略自定义的类。这样可以保证对"),s("code",[a._v("java")]),a._v("核心源代码的保护")])])]),a._v(" "),s("h3",{attrs:{id:"_2-4-其它"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-其它"}},[a._v("#")]),a._v(" 2.4 其它")]),a._v(" "),s("blockquote",[s("p",[a._v("在"),s("code",[a._v("JVM")]),a._v("中表示两个"),s("code",[a._v("class")]),a._v("对象是否为同一个类的两个必要条件")])]),a._v(" "),s("ol",[s("li",[a._v("类的完整类名必须一致(含包名)")]),a._v(" "),s("li",[a._v("加载这个类的"),s("code",[a._v("ClassLoader")]),a._v("必须相同")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("对类加载器的引用")])])]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("必须知道一个类是由启动类加载器加载的还是用户自定义的类加载器加载的。如果一个类是由用户类加载器加载的，那么"),s("code",[a._v("JVM")]),a._v("会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的饮用个的时候，"),s("code",[a._v("JVM")]),a._v("需要保证这两个类型的类加载器是相同的")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("主动使用和被动使用")])])]),a._v(" "),s("p",[s("strong",[a._v("主动使用")])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("创建类的实例")])]),a._v(" "),s("li",[s("p",[a._v("访问某个类或接口的静态变量，或者对该静态变量赋值")])]),a._v(" "),s("li",[s("p",[a._v("调用类的静态方法")])]),a._v(" "),s("li",[s("p",[a._v('反射(Class.forName("xxxx"))')])]),a._v(" "),s("li",[s("p",[a._v("初始化一个类的子类")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Java")]),a._v("虚拟机启动时被标明为启动类的类")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("JDK7")]),a._v("开始提供的动态语言的支持")]),a._v(" "),s("p",[s("code",[a._v("java.lang.invoke.MethodHandle")]),a._v("实例的解析结果")]),a._v(" "),s("p",[s("code",[a._v("REF_getStatic")]),a._v("、"),s("code",[a._v("REF_putStatic")]),a._v("、"),s("code",[a._v("REF_invokeStatic")]),a._v("句柄对应的类没有初始化则初始化")])])]),a._v(" "),s("p",[s("strong",[a._v("被动使用")])]),a._v(" "),s("p",[a._v("除了以上七种情况，其他使用"),s("code",[a._v("Java")]),a._v("类的方式都被看作是对类的被动使用，都不会导致类的初始化")]),a._v(" "),s("h2",{attrs:{id:"_3-运行时数据区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行时数据区"}},[a._v("#")]),a._v(" 3. 运行时数据区")]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526143644.png"}}),a._v(" "),s("p",[a._v("内存是非常重要的系统资源，是硬盘和"),s("code",[a._v("CPU")]),a._v("的中间仓库及桥梁，承载着操作系统和应用程序的事实运行。"),s("code",[a._v("JVM")]),a._v("内存布局规定了"),s("code",[a._v("Java")]),a._v("在运行过程中内存申请、分配、管理的策略，保证了"),s("code",[a._v("JVM")]),a._v("的高效稳定运行。不同的"),s("code",[a._v("JVM")]),a._v("对于内存的划分方式和管理机制存在着差异")]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526144441.png"}}),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机的启动而创建，随着虚拟机的退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁，比如第一幅图，红色的代表多个线程共享，灰色的代表单独线程私有")]),a._v(" "),s("h3",{attrs:{id:"_3-1-线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-线程"}},[a._v("#")]),a._v(" 3.1 线程")]),a._v(" "),s("ol",[s("li",[a._v("线程是一个程序里的运行单元。"),s("code",[a._v("JVM")]),a._v("允许一个应用有多个线程并行的执行")]),a._v(" "),s("li",[a._v("在"),s("code",[a._v("Hostspot JVM")]),a._v("里，每个线程都与操作系统的本地线程直接映射。当一个"),s("code",[a._v("Java")]),a._v("想成准备好执行以后，此时一个操作系统的 本地线程也同时创建。"),s("code",[a._v("Java")]),a._v("线程执行终止后，本地线程也会回收")]),a._v(" "),s("li",[a._v("操作系统负责所有线程的安排调度到任何一个可用的"),s("code",[a._v("CPU")]),a._v("上。一旦本地线程初始化成功后，它就会调用"),s("code",[a._v("Java")]),a._v("线程中的"),s("code",[a._v("run()")]),a._v("方法")])]),a._v(" "),s("p",[a._v("使用调试工具，能够在后台看到有许多线程在运行，这些后台不包括调用"),s("code",[a._v("public static void main(String[] args)")]),a._v("的"),s("code",[a._v("main")]),a._v("线程以及所有这个"),s("code",[a._v("main")]),a._v("线程自己创建的线程")]),a._v(" "),s("ol",[s("li",[a._v("虚拟机线程：这种线程的操作都是需要"),s("code",[a._v("JVM")]),a._v("达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要"),s("code",[a._v("JVM")]),a._v("达到安全点，这样堆才不会变化。这种线程的执行类型包括"),s("code",[a._v("stop-the-world")]),a._v("的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销")]),a._v(" "),s("li",[a._v("周期任务线程：这种线程是时间周期事件的体现(比如中断)，他们一般用于周期性操作的调度执行")]),a._v(" "),s("li",[s("code",[a._v("GC")]),a._v("线程：这种线程对"),s("code",[a._v("JVM")]),a._v("里不同种类的垃圾收集行为提供了支持")]),a._v(" "),s("li",[a._v("编译线程：这种线程在运行时会将字节码编译成本地代码")]),a._v(" "),s("li",[a._v("信号调度线程：这种线程接受信号并发送给"),s("code",[a._v("JVM")]),a._v("，在它内部通过调用适当的方法进行处理")])]),a._v(" "),s("h3",{attrs:{id:"_3-2-程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-程序计数器"}},[a._v("#")]),a._v(" 3.2 程序计数器")]),a._v(" "),s("h4",{attrs:{id:"_3-2-1-基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-基本介绍"}},[a._v("#")]),a._v(" 3.2.1 基本介绍")]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("中的程序计数寄存器"),s("code",[a._v("Program Counter Register")]),a._v("中，"),s("code",[a._v("Register")]),a._v("的命名源于"),s("code",[a._v("CPU")]),a._v("的寄存器，寄存器存储指令相关的现场信息。"),s("code",[a._v("CPU")]),a._v("只有把数据装载到寄存器才能够运行")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("注意")])])]),a._v(" "),s("p",[a._v("这里并非广义上的物理寄存器，"),s("code",[a._v("JVM")]),a._v("中的"),s("code",[a._v("PC")]),a._v("寄存器是对物理"),s("code",[a._v("PC")]),a._v("寄存器的一种抽象模拟。"),s("code",[a._v("PC")]),a._v("寄存器用来存储指向下一条指令的地址，也就是即将要执行的指令代码。由执行引擎读取下一条指令")]),a._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526193010.png"}}),a._v(" "),s("ol",[s("li",[a._v("它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域")]),a._v(" "),s("li",[a._v("在"),s("code",[a._v("JVM")]),a._v("规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致")]),a._v(" "),s("li",[a._v("任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前正在执行的"),s("code",[a._v("JVM")]),a._v("指令地址。特别地，如果是在执行"),s("code",[a._v("navtive")]),a._v("方法，则是未指定值"),s("code",[a._v("undefined")])]),a._v(" "),s("li",[a._v("它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成")]),a._v(" "),s("li",[a._v("字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令")]),a._v(" "),s("li",[a._v("它是唯一一个在"),s("code",[a._v("Java")]),a._v("虚拟机规范中没有规定任何"),s("code",[a._v("OutOtMemoryError")]),a._v("情况的区域")])]),a._v(" "),s("h4",{attrs:{id:"_3-2-2-实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-实例"}},[a._v("#")]),a._v(" 3.2.2 实例")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v(" 0: bipush        10\n 2: istore_1\n 3: bipush        20\n 5: istore_2\n 6: iload_1\n 7: iload_2\n 8: iadd\n 9: istore_3\n 10: return\n")])])]),s("h4",{attrs:{id:"_3-2-3-常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-常见问题"}},[a._v("#")]),a._v(" 3.2.3 常见问题")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("使用"),s("code",[a._v("PC")]),a._v("寄存器存储字节码指令地址有什么用？")]),a._v(" "),s("p",[a._v("因为"),s("code",[a._v("CPU")]),a._v("需要不停的切换各个线程，这时候切换回来以后，就需要知道接着从哪开始继续执行")]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("的字节码解释器就需要通过改变"),s("code",[a._v("PC")]),a._v("寄存器的值来明确下一条应该执行什么样的字节码指令")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("PC")]),a._v("寄存器为什么被设定为线程私有的?")]),a._v(" "),s("p",[a._v("我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，"),s("code",[a._v("CPU")]),a._v("会不停地做任务切换，这样必然导致经常中断或者恢复。为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法就是为每一个线程都分配一个"),s("code",[a._v("PC")]),a._v("寄存器，这样依赖各个线程之间便可以进行独立计算，而不会出现相互干扰的情况")]),a._v(" "),s("p",[a._v("由于"),s("code",[a._v("CPU")]),a._v("时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。这样必然导致经常中断或恢复，所以每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响")])])]),a._v(" "),s("h2",{attrs:{id:"_4-虚拟机栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚拟机栈"}},[a._v("#")]),a._v(" 4. 虚拟机栈")]),a._v(" "),s("p",[a._v("由于跨平台性的设计，"),s("code",[a._v("Java")]),a._v("的指令都是根据栈来设计的。不同平台"),s("code",[a._v("CPU")]),a._v("架构不同，所以不能设计为基于寄存器的")]),a._v(" "),s("p",[a._v("优点：跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要执行更多的指令")]),a._v(" "),s("h3",{attrs:{id:"_4-1-基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基本介绍"}},[a._v("#")]),a._v(" 4.1 基本介绍")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("java虚拟栈")])])]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("虚拟机栈"),s("code",[a._v("Java Virtual Machine Stack")]),a._v("，早期也叫"),s("code",[a._v("Java")]),a._v("栈。每个线程在创建时都会创建一个虚拟机栈(即线程私有)，其内部保存一个个的栈帧"),s("code",[a._v("Stack Frame")]),a._v("，对应着一次次的"),s("code",[a._v("Java")]),a._v("方法调用。")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("生命周期")])])]),a._v(" "),s("p",[a._v("生命周期和线程一致")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("作用")])])]),a._v(" "),s("p",[a._v("主管"),s("code",[a._v("Java")]),a._v("程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("优点")])])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("JVM")]),a._v("直接对"),s("code",[a._v("Java")]),a._v("栈的操作只有两个：")]),a._v(" "),s("p",[a._v("每个方法执行，伴随着进栈(入栈、压栈)")]),a._v(" "),s("p",[a._v("执行结束后的出栈工作")])]),a._v(" "),s("li",[s("p",[a._v("不存在垃圾回收问题")])])]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526203440.png"}}),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("栈溢出")])])]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("虚拟机规范允许"),s("code",[a._v("Java")]),a._v("栈的大小是动态的或者是固定不变的")]),a._v(" "),s("ol",[s("li",[a._v("如果采用固定大小的"),s("code",[a._v("Java")]),a._v("虚拟机栈，那每一个线程的"),s("code",[a._v("Java")]),a._v("虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过"),s("code",[a._v("Java")]),a._v("虚拟机栈允许的最大容量，"),s("code",[a._v("Java")]),a._v("虚拟机唱会抛出一个"),s("code",[a._v("StackOverflowError")]),a._v("异常")]),a._v(" "),s("li",[a._v("如果"),s("code",[a._v("Java")]),a._v("虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那"),s("code",[a._v("Java")]),a._v("虚拟机将会抛出一个"),s("code",[a._v("OutOfMemoryError")]),a._v("异常")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("设置栈的大小")])])]),a._v(" "),s("p",[a._v("可以使用参数-Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-Xss256K // KB\n-Xss256M // MB\n-Xss256G // GB\n")])])]),s("h3",{attrs:{id:"_4-2-栈的存储单位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-栈的存储单位"}},[a._v("#")]),a._v(" 4.2 栈的存储单位")]),a._v(" "),s("ol",[s("li",[a._v("每个线程都有自己的栈，栈中的数据都是以栈帧"),s("code",[a._v("Stack Frame")]),a._v("的格式存在")]),a._v(" "),s("li",[a._v("在这个线程上正在执行的每个方法都各自对应一个栈帧"),s("code",[a._v("Stack Frame")])]),a._v(" "),s("li",[a._v("栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息")]),a._v(" "),s("li",[a._v("在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧。即只有当前正在执行的方法的栈帧(栈顶栈帧)是有效的，这个栈帧被称为当前栈帧"),s("code",[a._v("Current Frame")]),a._v("，与当前栈帧相对应的方法就是当前方法"),s("code",[a._v("Current Method")]),a._v("，定义这个方法的类就是当前类"),s("code",[a._v("Current Class")])]),a._v(" "),s("li",[a._v("执行引擎运行的所有字节码指令只针对当前栈帧进行操作")]),a._v(" "),s("li",[a._v("如果改方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("运行原理")])])]),a._v(" "),s("ol",[s("li",[a._v("不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧")]),a._v(" "),s("li",[a._v("如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机栈会丢弃当前栈帧，使得前一个栈帧重新称为当前栈帧")]),a._v(" "),s("li",[s("code",[a._v("Java")]),a._v("方法有两种返回函数的方式，一种是正常的函数返回，使用"),s("code",[a._v("return")]),a._v("指令，另外一种抛出异常。不管使用哪种方式，都会导致栈帧被弹出")])]),a._v(" "),s("h3",{attrs:{id:"_4-3-栈帧的内部结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-栈帧的内部结构"}},[a._v("#")]),a._v(" 4.3 栈帧的内部结构")]),a._v(" "),s("ol",[s("li",[a._v("局部变量表"),s("code",[a._v("Local Variables")])]),a._v(" "),s("li",[a._v("操作数栈"),s("code",[a._v("Operand Stack")]),a._v("(表达式栈)")]),a._v(" "),s("li",[a._v("动态链接"),s("code",[a._v("Dynamic Linking")]),a._v("(或指向运行时常量池的方法引用)")]),a._v(" "),s("li",[a._v("方法返回地址"),s("code",[a._v("Return Address")]),a._v("(或方法正常退出或者异常退出的定义)")]),a._v(" "),s("li",[a._v("一些附加信息"),s("code",[a._v("可选")])])]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527125045.png"}}),a._v(" "),s("h4",{attrs:{id:"_4-3-1-局部变量表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-局部变量表"}},[a._v("#")]),a._v(" 4.3.1 局部变量表")]),a._v(" "),s("ol",[s("li",[a._v("局部变量表也称为局部变量数组或本地变量表")]),a._v(" "),s("li",[a._v("定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型、对象引用"),s("code",[a._v("reference")]),a._v("，以及"),s("code",[a._v("returnAddress")]),a._v("类型")]),a._v(" "),s("li",[a._v("由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题")]),a._v(" "),s("li",[a._v("局部变量表所需的容量大小是编译期确定下来的，并保存在方法的"),s("code",[a._v("Code")]),a._v("属性的"),s("code",[a._v("maximum local variables")]),a._v("数据项中。在方法运行期间是不会改变局部变量表的大小的")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("slot")])])]),a._v(" "),s("p",[s("strong",[a._v("简介")])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("参数值的存放总是在局部变量数组的"),s("code",[a._v("index0")]),a._v("开始，到数组长度"),s("code",[a._v("-1")]),a._v("的索引结束")])]),a._v(" "),s("li",[s("p",[a._v("局部变量表，最基本的存储单元是"),s("code",[a._v("slot")])])]),a._v(" "),s("li",[s("p",[a._v("局部变量表种存放编译期可知的各种基本数据类型，引用类型"),s("code",[a._v("reference")]),a._v("，"),s("code",[a._v("returnAddress")]),a._v("类型的变量")])]),a._v(" "),s("li",[s("p",[a._v("在局部变量表里，32位以内的类型只占一个"),s("code",[a._v("slot")]),a._v("(包括"),s("code",[a._v("returnAddress")]),a._v("类型)，64位的类型(long和double)占用两个"),s("code",[a._v("slot")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("byte")]),a._v("、"),s("code",[a._v("short")]),a._v("、"),s("code",[a._v("char")]),a._v("在存储前被转换为"),s("code",[a._v("int")]),a._v("、"),s("code",[a._v("boolean")]),a._v("也被转换为"),s("code",[a._v("int")]),a._v("，0表示"),s("code",[a._v("false")]),a._v("，非零表示"),s("code",[a._v("true")])]),a._v(" "),s("p",[s("code",[a._v("long")]),a._v("和"),s("code",[a._v("double")]),a._v("则占据两个"),s("code",[a._v("slot")])])])]),a._v(" "),s("p",[s("strong",[a._v("理解")])]),a._v(" "),s("ol",[s("li",[s("code",[a._v("JVM")]),a._v("会为局部变量表中的每一个"),s("code",[a._v("slot")]),a._v("都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值")]),a._v(" "),s("li",[a._v("当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个"),s("code",[a._v("slot")]),a._v("上")]),a._v(" "),s("li",[a._v("如果需要访问局部变量表中一个"),s("code",[a._v("64bit")]),a._v("的局部变量值时，只需要使用前一个索引即可")]),a._v(" "),s("li",[a._v("如果当前帧是由构造方法或者实例方法创建的，那么该对象引用"),s("code",[a._v("this")]),a._v("会存放在"),s("code",[a._v("index")]),a._v("为"),s("code",[a._v("0")]),a._v("的"),s("code",[a._v("slot")]),a._v("处，其余的参数按照参数表顺序继续排列")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"测试"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("查看"),s("code",[a._v("test")]),a._v("方法的局部变量表")]),a._v(" "),s("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527094023.png"}}),a._v(" "),s("p",[s("strong",[a._v("注意")]),a._v("：栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期的局部变量的槽位，从而达到节省资源的目的")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("注意")])])]),a._v(" "),s("p",[a._v("在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递")]),a._v(" "),s("p",[a._v("局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收")]),a._v(" "),s("h4",{attrs:{id:"_4-3-2-操作数栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-操作数栈"}},[a._v("#")]),a._v(" 4.3.2 操作数栈")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("基本介绍")])])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出的操作数栈买也可以称为表达式栈"),s("code",[a._v("Expression Stack")])])]),a._v(" "),s("li",[s("p",[a._v("操作数栈，在方法执行过程中，根据字节码指，往栈中国年写入数据或提取数据，即入栈"),s("code",[a._v("push")]),a._v("出栈"),s("code",[a._v("pop")])]),a._v(" "),s("p",[a._v("某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈")]),a._v(" "),s("p",[a._v("比如：执行复制、交换、求和等操作")])]),a._v(" "),s("li",[s("p",[a._v("操作数栈，主要用于保存计算过程的中间结果，同时作为计算机过程中变量临时的存储空间")])]),a._v(" "),s("li",[s("p",[a._v("操作数栈就是"),s("code",[a._v("JVM")]),a._v("执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的")])]),a._v(" "),s("li",[s("p",[a._v("每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的"),s("code",[a._v("Code")]),a._v("属性中，为"),s("code",[a._v("max_stack")]),a._v("的值")])]),a._v(" "),s("li",[s("p",[a._v("栈中的任何一个元素都是可以任意的"),s("code",[a._v("Java")]),a._v("数据类型")]),a._v(" "),s("p",[s("code",[a._v("32bit")]),a._v("的类型占用一个栈单位深度")]),a._v(" "),s("p",[s("code",[a._v("64bit")]),a._v("的类型占用两个栈单位深度")])]),a._v(" "),s("li",[s("p",[a._v("操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈"),s("code",[a._v("push")]),a._v("和出栈"),s("code",[a._v("pop")]),a._v("来完成一次数据访问")])]),a._v(" "),s("li",[s("p",[a._v("如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新"),s("code",[a._v("PC")]),a._v("寄存器中下一条需要执行的字节码指令")])]),a._v(" "),s("li",[s("p",[a._v("操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段再次验证")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Java")]),a._v("虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是"),s("strong",[a._v("操作数栈")])])])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("案例演示")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OperationTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("字节码")]),a._v(" "),s("div",{staticClass:"language-class extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 iconst_0\n1 istore_1\n2 iconst_1\n3 istore_2\n4 iload_1\n5 iload_2\n6 iadd\n7 istore_3\n8 return\n")])])]),s("h4",{attrs:{id:"_4-3-3-栈顶缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-栈顶缓存"}},[a._v("#")]),a._v(" 4.3.3 栈顶缓存")]),a._v(" "),s("p",[a._v("由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，"),s("code",[a._v("HotSpot JVM")]),a._v("的设计者们提出了栈顶缓存"),s("code",[a._v("Top-of-Stack Cashing")]),a._v("技术，将栈顶元素全部缓存在物理"),s("code",[a._v("CPU")]),a._v("的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率")]),a._v(" "),s("h4",{attrs:{id:"_4-3-4-动态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-动态链接"}},[a._v("#")]),a._v(" 4.3.4 动态链接")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("每一个栈帧内部都包含一个"),s("strong",[a._v("指向运行时常量池中该帧所属方法的引用")]),a._v("。包含这个引用的目的就是为了当前方法的代码能够实现动态链接"),s("code",[a._v("Dynamic Linking")]),a._v("。比如："),s("code",[a._v("invokedynamic")]),a._v("指令")])]),a._v(" "),s("li",[s("p",[a._v("在"),s("code",[a._v("Java")]),a._v("源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用"),s("code",[a._v("Symbolic Reference")]),a._v("保存在"),s("code",[a._v("class")]),a._v("文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用")])]),a._v(" "),s("li",[s("p",[a._v("为什么需要常量池？")]),a._v(" "),s("p",[a._v("常量池的作用，就是为了提供一些符号和常量，便于指令的识别")])])]),a._v(" "),s("h4",{attrs:{id:"_4-3-5-方法调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-5-方法调用"}},[a._v("#")]),a._v(" 4.3.5 方法调用")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("JVM")]),a._v("中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("链接方式")])])]),a._v(" "),s("p",[s("strong",[a._v("静态链接")]),a._v("：当一个字节码文件被装载进"),s("code",[a._v("JVM")]),a._v("内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接")]),a._v(" "),s("p",[s("strong",[a._v("动态链接")]),a._v("：如果被调用的方法在编译期无法确定下来，也就是说，只能能够程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就称之为动态链接")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("绑定机制")])])]),a._v(" "),s("p",[a._v("对应的方法绑定机制：早期绑定和晚期绑定。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次")]),a._v(" "),s("p",[s("strong",[a._v("早期绑定")]),a._v("：指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用替换为直接引用")]),a._v(" "),s("p",[s("strong",[a._v("晚期绑定")]),a._v("：如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，珍重绑定方式就称为晚期绑定")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HuntableTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Huntable")]),a._v(" huntable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        huntable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hunt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 晚期绑定")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Huntable")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hunt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"狗吃骨头"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cat")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Huntable")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hunt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"猫吃鱼"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Huntable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hunt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("blockquote",[s("p",[s("strong",[a._v("虚方法与非虚方法")])])]),a._v(" "),s("p",[s("strong",[a._v("非虚方法")]),a._v("：如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法被称为非虚方法")]),a._v(" "),s("p",[a._v("静态方法、私有方法、"),s("code",[a._v("final")]),a._v("方法、实例构造器、父类方法都是非虚方法")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("方法调用指令")])])]),a._v(" "),s("p",[a._v("虚拟机中提供了以下几条方法调用指令")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("普通调用指令")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("invokestatic\t# 调用静态方法，解析阶段确定唯一方法版本\ninvokespecial\t# 调用<init>方法、私有及父类方法，解析阶段确定唯一方法版本\ninvokeVirtual\t# 调用所有虚方法\ninvokeinterface # 调用接口方法\n")])])])]),a._v(" "),s("li",[s("p",[a._v("动态调用指令")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("invokedynamic\t# 动态解析出需要调用的方法，然后执行\n")])])]),s("p",[a._v("前四条指令固化在虚拟机内部，方法的调用执行不可人为干涉，而"),s("code",[a._v("invokedynamic")]),a._v("指令则支持由用户确定方法版本。其中"),s("code",[a._v("invokestatic")]),a._v("指令和"),s("code",[a._v("invokespecial")]),a._v("指令调用的方法称为非虚方法，其余的("),s("code",[a._v("final")]),a._v("修饰的除外)称为虚方法")]),a._v(" "),s("p",[s("code",[a._v("invokedynamic")]),a._v("指令是"),s("code",[a._v("Java7")]),a._v("中出现的指令，这是"),s("code",[a._v("Java")]),a._v("为了实现动态类型语言支持而做的一种改进。但是"),s("code",[a._v("Java7")]),a._v("中并没有提供直接生成"),s("code",[a._v("invokeddynamic")]),a._v("指令的方法，需要借助"),s("code",[a._v("ASM")]),a._v("这种底层字节码工具来产生"),s("code",[a._v("invokeddynamic")]),a._v("指令。直到"),s("code",[a._v("Java8")]),a._v("的"),s("code",[a._v("Lambda")]),a._v("表达式的出现，"),s("code",[a._v("invokedymic")]),a._v("指令的生成，在"),s("code",[a._v("Java")]),a._v("中才有了直接的生成方式")])])]),a._v(" "),s("p",[a._v("示例")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"father的构造器"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("staticTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"father "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("finalTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"father final方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("generalTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"father 普通方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Son")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Father")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Son")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokespecial")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 不是重写的静态方法,因为静态方法不能被重写")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("staticTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"son "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("privateTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"son 私有方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokestatic")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("staticTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"good"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokestatic")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("staticTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokevirtual")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("privateTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokespecial")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("generalTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokevirtual")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("finalTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// invokevirtual")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("generalTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("generalTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"son 普通方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("blockquote",[s("p",[s("strong",[a._v("方法重写的本质")])])]),a._v(" "),s("ol",[s("li",[a._v("找到操作数栈顶的第一个元素所执行的对象的实际类型，记作"),s("code",[a._v("C")])]),a._v(" "),s("li",[a._v("如果类型"),s("code",[a._v("C")]),a._v("中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过则返回"),s("code",[a._v("java.lang.IllegalAccessError")]),a._v("异常")]),a._v(" "),s("li",[a._v("否则按照继承关系从下往上依次对"),s("code",[a._v("C")]),a._v("的各个父类进行第2步的搜索和验证过程")]),a._v(" "),s("li",[a._v("如果始终没有找到合适的方法，则抛出"),s("code",[a._v("java.lang.AbstractMethodError")]),a._v("异常")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("虚方法表")])])]),a._v(" "),s("ol",[s("li",[a._v("在面向对象的编程中，会很频繁的使用到动态分配，如果每次动态分配的过程中都要重新在类的方法元数据中搜索合适的目标的话可能影响到执行效率。因此，为了提高性能，"),s("code",[a._v("JVM")]),a._v("采用在类的方法区建立一个虚方法表"),s("code",[a._v("virtual method table")]),a._v("(非虚方法不会出现在表中)来实现，使用索引表来代替查找")]),a._v(" "),s("li",[a._v("每个类中都有一个虚方法表，表中存放着各个方法的实际入口")]),a._v(" "),s("li",[a._v("创建时机：虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，"),s("code",[a._v("JVM")]),a._v("会把该类的方法表也初始化完毕")])]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527201731.png"}}),a._v(" "),s("h4",{attrs:{id:"_4-3-6-方法返回地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-6-方法返回地址"}},[a._v("#")]),a._v(" 4.3.6 方法返回地址")]),a._v(" "),s("p",[a._v("方法返回地址、动态链接地址和一些附加信息又被称为"),s("strong",[a._v("栈数据区")])]),a._v(" "),s("ol",[s("li",[s("p",[a._v("存放调用该方法的"),s("code",[a._v("PC")]),a._v("寄存器的值")])]),a._v(" "),s("li",[s("p",[a._v("一个方法的结束，有两种方式")]),a._v(" "),s("p",[a._v("正常执行完成")]),a._v(" "),s("p",[a._v("出现未处理的异常，非正常退出")])]),a._v(" "),s("li",[s("p",[a._v("无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的"),s("code",[a._v("PC")]),a._v("计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息")])]),a._v(" "),s("li",[s("p",[a._v("一个方法在正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定")])]),a._v(" "),s("li",[s("p",[a._v("在字节码指令中，返回指令包含"),s("code",[a._v("ireturn")]),a._v("(当返回值是"),s("code",[a._v("boolean")]),a._v("、"),s("code",[a._v("byte")]),a._v("、"),s("code",[a._v("char")]),a._v("、"),s("code",[a._v("short")]),a._v("和"),s("code",[a._v("int")]),a._v("类型时使用)、"),s("code",[a._v("lreturn")]),a._v("、"),s("code",[a._v("freturn")]),a._v("、"),s("code",[a._v("dreturn")]),a._v("以及"),s("code",[a._v("areturn")]),a._v("，另外还有一个"),s("code",[a._v("return")]),a._v("指令提供声明为"),s("code",[a._v("void")]),a._v("的方法、实例初始化方法、类和接口的初始化方法使用")])]),a._v(" "),s("li",[s("p",[a._v("在方法执行的过程中国年遇到了异常"),s("code",[a._v("Exception")]),a._v("，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称异常完成出口")]),a._v(" "),s("p",[a._v("方法执行过程中抛出异常时的异常处理，存储一个异常处理表，方便在发生异常的时候找到处理异常的代码")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ReturnAddressTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 3")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("methodA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 4")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 5")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 6")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 7")]),a._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 8")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 9")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 10")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 11")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527204544.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527204609.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_5-本地方法接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-本地方法接口"}},[a._v("#")]),a._v(" 5. 本地方法接口")]),a._v(" "),s("h3",{attrs:{id:"_5-1-什么是本地方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-什么是本地方法"}},[a._v("#")]),a._v(" 5.1 什么是本地方法")]),a._v(" "),s("p",[a._v("本地方法"),s("code",[a._v("Native Method")]),a._v("：一个"),s("code",[a._v("Native Method")]),a._v("就是一个"),s("code",[a._v("Java")]),a._v("调用非"),s("code",[a._v("Java")]),a._v("代码的接口。")]),a._v(" "),s("p",[a._v("一个"),s("code",[a._v("Native Method")]),a._v("是这样的一个"),s("code",[a._v("Java")]),a._v("方法：该方法的实现由非"),s("code",[a._v("Java")]),a._v("语言实现，比如"),s("code",[a._v("C")]),a._v("。这个特征并非"),s("code",[a._v("Java")]),a._v("所特有，有很多其他的编程语言都有这一机制，比如在"),s("code",[a._v("C++")]),a._v("中，可以"),s("code",[a._v("extern")]),a._v("告知"),s("code",[a._v("C++")]),a._v("编译器去调用一个"),s("code",[a._v("C")]),a._v("的函数。本地接口的作用是融合不同的编程语言为"),s("code",[a._v("Java")]),a._v("所用，它的初衷是融合"),s("code",[a._v("C/C++")]),a._v("程序")]),a._v(" "),s("h3",{attrs:{id:"_5-2-为什么使用本地方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-为什么使用本地方法"}},[a._v("#")]),a._v(" 5.2 为什么使用本地方法")]),a._v(" "),s("p",[s("code",[a._v("Java")]),a._v("使用起来非常方便，然而有些层次的任务用"),s("code",[a._v("Java")]),a._v("实现起来不容易，或者我们对程序的效率要求特别高时，就可考虑使用本地方法")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("与Java环境交互")])])]),a._v(" "),s("p",[a._v("有时"),s("code",[a._v("Java")]),a._v("应用需要与"),s("code",[a._v("Java")]),a._v("外面的环境交互，这是本地方法存在的主要原因。"),s("code",[a._v("Java")]),a._v("需要与一些底层系统，如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我么提供了一个非常简洁的接口，而且我们无需去了解"),s("code",[a._v("java")]),a._v("应用之外的繁琐的细节")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("与操作系统交互")])])]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("支持着"),s("code",[a._v("Java")]),a._v("语言本身和运行时库，它是"),s("code",[a._v("Java")]),a._v("程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖与一些底层系统的支持。这些底层系统常常是强大的操作系统。通常使用本地方法，我们得以用"),s("code",[a._v("Java")]),a._v("实现了"),s("code",[a._v("jre")]),a._v("的与底层系统的交互，甚至"),s("code",[a._v("JVM")]),a._v("的一些部分就是使用"),s("code",[a._v("C")]),a._v("写的。还有，如果我们要使用一些"),s("code",[a._v("Java")]),a._v("语言本身没有提供封装的操作系统特性时，我们也需要使用本地方法")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("Sun' s Java")])])]),a._v(" "),s("p",[s("code",[a._v("Sun")]),a._v("的解释器是用"),s("code",[a._v("C")]),a._v("实现的，这使得它能像一些普通的"),s("code",[a._v("C")]),a._v("一样与外部交互。"),s("code",[a._v("jre")]),a._v("大部分是用"),s("code",[a._v("Java")]),a._v("实现的，它也通过一些本地方法与外界交互。例如；类"),s("code",[a._v("java.lang.Thread")]),a._v("的"),s("code",[a._v("setPriority()")]),a._v("方法是用"),s("code",[a._v("java")]),a._v("实现的，但是它实现调用的是该类里的本地方法"),s("code",[a._v("setPriority0()")]),a._v("。这个本地方法是用"),s("code",[a._v("C")]),a._v("实现的，并被植入"),s("code",[a._v("JVM")]),a._v("内部，在"),s("code",[a._v("Windows 95")]),a._v("的平台上，这个本地方法最终调用"),s("code",[a._v("Win32 SetPriority() API")]),a._v("。这是一个本地方法的具体实现由"),s("code",[a._v("JVM")]),a._v("直接提供，更多的情况是本地方法由外部的动态链接库"),s("code",[a._v("external dynamic link library")]),a._v("提供，然后被"),s("code",[a._v("JVM")]),a._v("调用")]),a._v(" "),s("h2",{attrs:{id:"_6-本地方法栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-本地方法栈"}},[a._v("#")]),a._v(" 6. 本地方法栈")]),a._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210527214017.png"}}),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("Java")]),a._v("虚拟机栈用于管理"),s("code",[a._v("Java")]),a._v("方法的调用，而本地方法栈用于管理本地方法的调用")])]),a._v(" "),s("li",[s("p",[a._v("本地方法栈，也是线程私有的")])]),a._v(" "),s("li",[s("p",[a._v("允许被实现成固定或者是可动态扩展的内存大小(在内存溢出方面是相同的)")]),a._v(" "),s("p",[a._v("如果线程请求分配的栈容量超过本地方法栈允许的最大容量，"),s("code",[a._v("Java")]),a._v("虚拟机将会抛出一个"),s("code",[a._v("StackOverflowError")]),a._v("异常。")]),a._v(" "),s("p",[a._v("如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者创建新的线程时没有足够的内存去创建对应的本地方法栈，那么"),s("code",[a._v("java")]),a._v("虚拟机将会抛出一个"),s("code",[a._v("OutOfMemoryError")]),a._v("异常")])]),a._v(" "),s("li",[s("p",[a._v("本地方法是使用"),s("code",[a._v("C")]),a._v("语言实现的")])]),a._v(" "),s("li",[s("p",[a._v("它的具体做法是"),s("code",[a._v("Native Method Stack")]),a._v("中登记"),s("code",[a._v("native")]),a._v("方法，在"),s("code",[a._v("Execution Engine")]),a._v("执行时加载本地方法库")])]),a._v(" "),s("li",[s("p",[a._v("当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限")]),a._v(" "),s("p",[a._v("本地方法可以通过本地方法接口访问虚拟机内部的运行时数据区")]),a._v(" "),s("p",[a._v("它甚至可以直接使用本地处理器中的寄存器")]),a._v(" "),s("p",[a._v("直接从本地内存的堆中分配任意数量的内存")])]),a._v(" "),s("li",[s("p",[a._v("并不是所有的"),s("code",[a._v("JVM")]),a._v("都支持本地方法。因为"),s("code",[a._v("Java")]),a._v("虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等。如果"),s("code",[a._v("JVM")]),a._v("产品不打算支持"),s("code",[a._v("native")]),a._v("方法，也可以无需实现本地方法栈")])]),a._v(" "),s("li",[s("p",[a._v("在"),s("code",[a._v("Hotspot JVM")]),a._v("中，直接将本地方法栈和虚拟机栈合二为一")])])]),a._v(" "),s("h2",{attrs:{id:"_7-堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-堆"}},[a._v("#")]),a._v(" 7. 堆")]),a._v(" "),s("h3",{attrs:{id:"_7-1-基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-基本概念"}},[a._v("#")]),a._v(" 7.1 基本概念")]),a._v(" "),s("h4",{attrs:{id:"_7-1-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-概述"}},[a._v("#")]),a._v(" 7.1.1 概述")]),a._v(" "),s("ol",[s("li",[a._v("一个"),s("code",[a._v("JVM")]),a._v("实例只存在一个堆内存，堆也是"),s("code",[a._v("Java")]),a._v("内存管理的核心区域")]),a._v(" "),s("li",[s("code",[a._v("Java")]),a._v("堆区在"),s("code",[a._v("JVM")]),a._v("启动的时候即被创建，其空间大小也就确定了。是"),s("code",[a._v("JVM")]),a._v("管理的最大一块内存空间(堆内存的大小是可以调整的)")]),a._v(" "),s("li",[a._v("《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的")]),a._v(" "),s("li",[a._v("所有的线程共享"),s("code",[a._v("Java")]),a._v("堆，在这里还可以划分线程私有的缓冲区"),s("code",[a._v("Thread Local Allocation Buffer, TLAB")])]),a._v(" "),s("li",[a._v("《Java虚拟机规范》中对"),s("code",[a._v("Java")]),a._v("堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上")]),a._v(" "),s("li",[a._v("数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置")]),a._v(" "),s("li",[a._v("在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除")]),a._v(" "),s("li",[a._v("堆，是"),s("code",[a._v("GC")]),a._v("("),s("code",[a._v("Garbage Collection")]),a._v("，垃圾收集器)执行垃圾回收的重点区域")])]),a._v(" "),s("h4",{attrs:{id:"_7-1-2-内存细分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-内存细分"}},[a._v("#")]),a._v(" 7.1.2 内存细分")]),a._v(" "),s("p",[a._v("现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为")]),a._v(" "),s("p",[s("code",[a._v("Java 7")]),a._v("及之前堆内存逻辑上分为三部分：新生区+养老区+永久区")]),a._v(" "),s("p",[s("code",[a._v("Java 8")]),a._v("及之后堆内存逻辑上分为三部分：新生区+养老区+元空间")]),a._v(" "),s("h3",{attrs:{id:"_7-2-堆空间大小的设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-堆空间大小的设置"}},[a._v("#")]),a._v(" 7.2 堆空间大小的设置")]),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("Java")]),a._v("堆区用于存储"),s("code",[a._v("Java")]),a._v("对象实例，那么堆的大小在"),s("code",[a._v("JVM")]),a._v("启动时就已经设定好了，可以通过"),s("code",[a._v("-Xmx")]),a._v("和"),s("code",[a._v("-Xms")]),a._v("来进行设置")]),a._v(" "),s("p",[s("code",[a._v("-Xms")]),a._v("堆的起始内存")]),a._v(" "),s("p",[s("code",[a._v("-Xmx")]),a._v("堆的最大内存")])]),a._v(" "),s("li",[s("p",[a._v("一旦堆区中的内存超过"),s("code",[a._v("-Xmx")]),a._v("所指定的最大内存时，将会抛出"),s("code",[a._v("OutOfMemoryError")]),a._v("异常")])]),a._v(" "),s("li",[s("p",[a._v("通常会将"),s("code",[a._v("-Xms")]),a._v("和"),s("code",[a._v("-Xmx")]),a._v("两个参数配置相同的，其目的就是为了能够在"),s("code",[a._v("Java")]),a._v("垃圾回收机制清理完堆区后不需要重新分割计算堆区的大小，从而提高性能")])]),a._v(" "),s("li",[s("p",[a._v("默认情况下")]),a._v(" "),s("p",[a._v("初始内存大小：物理电脑内存大小/64")]),a._v(" "),s("p",[a._v("最大内存大小：物理电脑内存大小/4")])])]),a._v(" "),s("h3",{attrs:{id:"_7-3-年轻代与老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-年轻代与老年代"}},[a._v("#")]),a._v(" 7.3 年轻代与老年代")]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528123057.png"}}),a._v(" "),s("h4",{attrs:{id:"_7-3-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-1-概述"}},[a._v("#")]),a._v(" 7.3.1 概述")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("存储在"),s("code",[a._v("JVM")]),a._v("中的"),s("code",[a._v("Java")]),a._v("对象可以划分为两类")]),a._v(" "),s("p",[a._v("一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速")]),a._v(" "),s("p",[a._v("另外一类对象的声明周期却非常长，在某些极端的情况下还能够与"),s("code",[a._v("JVM")]),a._v("的生命周期保持一致")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Java")]),a._v("堆区进一步细分的话，可以划分为年轻代"),s("code",[a._v("YoungGen")]),a._v("和老年代"),s("code",[a._v("OldGen")])])]),a._v(" "),s("li",[s("p",[a._v("其中年代又可以划分为"),s("code",[a._v("Eden")]),a._v("空间、"),s("code",[a._v("Survivor0")]),a._v("空间和"),s("code",[a._v("Survivor1")]),a._v("空间(有时也叫做"),s("code",[a._v("from")]),a._v("区、"),s("code",[a._v("to")]),a._v("区)")])])]),a._v(" "),s("h4",{attrs:{id:"_7-3-2-默认大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-2-默认大小"}},[a._v("#")]),a._v(" 7.3.2 默认大小")]),a._v(" "),s("img",{staticStyle:{zoom:"70%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528123456.png"}}),a._v(" "),s("ol",[s("li",[a._v("默认"),s("code",[a._v("-XX:NewRatio=2")]),a._v("，表示新生代占1，老年代占2，新生代占整个堆的"),s("code",[a._v("1/3")])]),a._v(" "),s("li",[a._v("可以修改"),s("code",[a._v("-XX:NewRation=4")]),a._v("，表示新生代占1，老年代占4，新生代占整个堆的"),s("code",[a._v("1/5")])])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("Survivor")])])]),a._v(" "),s("ol",[s("li",[a._v("在"),s("code",[a._v("HotSpot")]),a._v("中，"),s("code",[a._v("Eden")]),a._v("空间和另外两个"),s("code",[a._v("Survivor")]),a._v("空间缺省所占的比例是"),s("code",[a._v("8:1:1")])]),a._v(" "),s("li",[a._v("可以通过选项"),s("code",[a._v("-XX:SurvivorRatio")]),a._v("调整整个空间比例。比如"),s("code",[a._v("-XX:SurvivorRatio=8")])]),a._v(" "),s("li",[a._v("几乎所有的"),s("code",[a._v("Java")]),a._v("对象都是在"),s("code",[a._v("Eden")]),a._v("区被"),s("code",[a._v("new")]),a._v("出来的")]),a._v(" "),s("li",[a._v("绝大部分的"),s("code",[a._v("Java")]),a._v("对象的销毁都在新生代进行")]),a._v(" "),s("li",[a._v("可以使用选项"),s("code",[a._v("-Xmn")]),a._v("设置新生代最大内存大小")])]),a._v(" "),s("h3",{attrs:{id:"_7-4-对象分配过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-对象分配过程"}},[a._v("#")]),a._v(" 7.4 对象分配过程")]),a._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528131609.png"}}),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("new")]),a._v("的对象先放伊甸园。此区有大小限制")]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528130750.png"}})]),a._v(" "),s("li",[s("p",[a._v("当伊甸园的空间被填满时，程序又需要创建对象，"),s("code",[a._v("JVM")]),a._v("的垃圾回收器将对伊甸园区进行垃圾回收"),s("code",[a._v("Minor GC")]),a._v("，将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区")]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528131254.png"}})]),a._v(" "),s("li",[s("p",[a._v("然后将伊甸园中剩余对象移动到幸存者0区")])]),a._v(" "),s("li",[s("p",[a._v("如果再次触发垃圾回收，此时在上次幸存下来的放到幸存者0区的对象，如果没有回收，就会放到幸存者1区")])]),a._v(" "),s("li",[s("p",[a._v("如果再次触发垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区")])]),a._v(" "),s("li",[s("p",[a._v("对象在幸存者区中的每一次移动都会使它的年龄加1当年龄达到15时便会移去养老区，可以通过参数"),s("code",[a._v("-XX:MaxTenuringThreshold=<N>")]),a._v("进行设置")]),a._v(" "),s("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528131020.png"}})])]),a._v(" "),s("h3",{attrs:{id:"_7-5-minorgc、major-gc、full-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-minorgc、major-gc、full-gc"}},[a._v("#")]),a._v(" 7.5 MinorGC、Major GC、Full GC")]),a._v(" "),s("p",[s("code",[a._v("JVM")]),a._v("在进行"),s("code",[a._v("GC")]),a._v("，并非每次都对上面三个内存区域(新生代、老年代、方法区)一起回收的，大部分时候回收的都是指新生代")]),a._v(" "),s("p",[a._v("针对"),s("code",[a._v("HotSpot VM")]),a._v("的实现，它里面的"),s("code",[a._v("GC")]),a._v("按照回收区域又分为两大类型：一种是部分收集"),s("code",[a._v("Partial GC")]),a._v("，一种是整体收集"),s("code",[a._v("Full GC")])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("部分收集")])])]),a._v(" "),s("p",[a._v("不是完整收集整个"),s("code",[a._v("Java")]),a._v("堆的垃圾收集。其中又分为")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("新生代收集"),s("code",[a._v("Minor GC / Young GC")]),a._v("：只是新生代的垃圾收集")])]),a._v(" "),s("li",[s("p",[a._v("老年代收集"),s("code",[a._v("Major GC / Old GC")]),a._v("：只是老年代的垃圾收集")]),a._v(" "),s("p",[a._v("目前，只有"),s("code",[a._v("CMS GC")]),a._v("会有单独收集老年代的行为")]),a._v(" "),s("p",[a._v("注意，很多时候"),s("code",[a._v("Major GC")]),a._v("会和"),s("code",[a._v("Full GC")]),a._v("混淆使用，需要具体分辨是老年代回收还是整堆回收")])]),a._v(" "),s("li",[s("p",[a._v("混合收集"),s("code",[a._v("Mixed GC")]),a._v("：收集整个新生代以及部分老年代的垃圾收集")]),a._v(" "),s("p",[a._v("目前，只有"),s("code",[a._v("G1 GC")]),a._v("会有这种行为")])])]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("整堆收集")])])]),a._v(" "),s("p",[a._v("整堆收集"),s("code",[a._v("Full GC")]),a._v("：收集整个"),s("code",[a._v("Java")]),a._v("堆和方法区的垃圾收集")]),a._v(" "),s("h4",{attrs:{id:"_7-5-1-年轻代gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1-年轻代gc"}},[a._v("#")]),a._v(" 7.5.1 年轻代GC")]),a._v(" "),s("p",[a._v("年轻代"),s("code",[a._v("GC(Minor GC)")]),a._v("触发机制")]),a._v(" "),s("ol",[s("li",[a._v("当年轻代空间不足时，就会触发"),s("code",[a._v("Minor GC")]),a._v("，这里的年轻代满指的是"),s("code",[a._v("Eden")]),a._v("区满，"),s("code",[a._v("Survior")]),a._v("满不会引发"),s("code",[a._v("GC")]),a._v("。每次"),s("code",[a._v("Minor GC")]),a._v("会清理年轻代的内存")]),a._v(" "),s("li",[a._v("因为"),s("code",[a._v("Java")]),a._v("对象大多都具备朝生夕灭的特性，所以"),s("code",[a._v("Minor GC")]),a._v("非常频繁，一般回收速度也比较快")]),a._v(" "),s("li",[s("code",[a._v("Minor GC")]),a._v("会引发"),s("code",[a._v("STW")]),a._v("，暂停其他用户的线程，等垃圾回收结束，用户线程才恢复运行")])]),a._v(" "),s("h4",{attrs:{id:"_7-5-2-老年代gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-2-老年代gc"}},[a._v("#")]),a._v(" 7.5.2 老年代GC")]),a._v(" "),s("p",[a._v("老年代"),s("code",[a._v("GC(Major GC/Full GC)")]),a._v("触发机制")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("指发生在老年代的"),s("code",[a._v("GC")]),a._v("，对象从老年代消失时，我们说"),s("code",[a._v("Major GC")]),a._v("或"),s("code",[a._v("Full GC")]),a._v("发生了")])]),a._v(" "),s("li",[s("p",[a._v("出现了"),s("code",[a._v("major GC")]),a._v("，经常会伴随着至少一次的"),s("code",[a._v("minor GC")]),a._v("(但非绝对的，在"),s("code",[a._v("Parallel Scavenge")]),a._v("收集器的收集策略这里就有直接进行"),s("code",[a._v("Major GC")]),a._v("的策略选择过程)")]),a._v(" "),s("p",[a._v("也就是则老年代空间不足时，会先尝试触发"),s("code",[a._v("Minor GC")]),a._v("。如果之后空间还不足，则触发"),s("code",[a._v("Major GC")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Major GC")]),a._v("的速度一般会比"),s("code",[a._v("Minor GC")]),a._v("慢10倍以上，"),s("code",[a._v("STW")]),a._v("的时间更长")])]),a._v(" "),s("li",[s("p",[a._v("如果"),s("code",[a._v("Major GC")]),a._v("后，内存还是不足，就报"),s("code",[a._v("OOM")]),a._v("了")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("Major GC")]),a._v("的速度一般会比"),s("code",[a._v("Minor GC")]),a._v("慢10倍以上")])])]),a._v(" "),s("h4",{attrs:{id:"_7-5-3-full-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-3-full-gc"}},[a._v("#")]),a._v(" 7.5.3 Full GC")]),a._v(" "),s("p",[s("code",[a._v("Full GC")]),a._v("触发机制有以下五种")]),a._v(" "),s("ol",[s("li",[a._v("调用"),s("code",[a._v("System.gc()")]),a._v("时，系统建议执行"),s("code",[a._v("Full GC")]),a._v("，但不是必然执行")]),a._v(" "),s("li",[a._v("老年代空间不足")]),a._v(" "),s("li",[a._v("方法区空间不足")]),a._v(" "),s("li",[a._v("通过"),s("code",[a._v("Minor GC")]),a._v("后进入老年代的平均大小大于老年代的可用内存")]),a._v(" "),s("li",[a._v("由"),s("code",[a._v("Eden")]),a._v("区、"),s("code",[a._v("Survior space0(From Space)")]),a._v("区向"),s("code",[a._v("Survior space1(To Space)")]),a._v("区复制时，对象大小大于"),s("code",[a._v("To Space")]),a._v("可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小")])]),a._v(" "),s("h3",{attrs:{id:"_7-6-堆空间分代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-堆空间分代"}},[a._v("#")]),a._v(" 7.6 堆空间分代")]),a._v(" "),s("p",[a._v("为什么需要把"),s("code",[a._v("Java")]),a._v("堆分代？不分代就不能正常工作了吗？")]),a._v(" "),s("p",[a._v("经研究，不同对象的声明周期不同。"),s("code",[a._v("70%-99%")]),a._v("的对象是临时对象")]),a._v(" "),s("ol",[s("li",[a._v("新生代：有"),s("code",[a._v("Eden")]),a._v("、两块大小相同的"),s("code",[a._v("Survivor")]),a._v("(又称为"),s("code",[a._v("from/to")]),a._v("，"),s("code",[a._v("s0/s1")]),a._v(")构成，"),s("code",[a._v("to")]),a._v("总为空")]),a._v(" "),s("li",[a._v("老年代：存放新生代中经历多次"),s("code",[a._v("GC")]),a._v("仍然存活的对象")])]),a._v(" "),s("p",[a._v("不分代完全可以，分代的唯一理由就是优化"),s("code",[a._v("GC")]),a._v("性能")]),a._v(" "),s("h3",{attrs:{id:"_7-7-内存分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-内存分配策略"}},[a._v("#")]),a._v(" 7.7 内存分配策略")]),a._v(" "),s("p",[a._v("如果对象在"),s("code",[a._v("Eden")]),a._v("出生并经过第一次"),s("code",[a._v("MinorGC")]),a._v("后任然存活，并且能被"),s("code",[a._v("Survior")]),a._v("容纳的话，将被移动到"),s("code",[a._v("Survivor")]),a._v("空间中，并将对象年龄设为1.对象在"),s("code",[a._v("Survivor")]),a._v("区中每熬过一次"),s("code",[a._v("MinorGC")]),a._v("，年龄就增加1岁，当它的年龄增加到一定程度(默认为15岁，其实每个"),s("code",[a._v("JVM")]),a._v("、每个"),s("code",[a._v("GC")]),a._v("都有所不同)时，就会被晋升到老年代中。")]),a._v(" "),s("p",[a._v("内存分配策略(或对象提升)")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("优先分配到"),s("code",[a._v("Eden")])])]),a._v(" "),s("li",[s("p",[a._v("大对象直接分配到老年代")]),a._v(" "),s("p",[a._v("尽量避免程序中出现过多的大对象")])]),a._v(" "),s("li",[s("p",[a._v("长期存活的对象分配到老年代")])]),a._v(" "),s("li",[s("p",[a._v("动态对象年龄判断")]),a._v(" "),s("p",[a._v("如果"),s("code",[a._v("Survivor")]),a._v("区中相同年龄的所有对象大小的总和大于"),s("code",[a._v("Survivor")]),a._v("空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无需等到"),s("code",[a._v("MaxTenuringThreshold")]),a._v("中要求的年龄")])]),a._v(" "),s("li",[s("p",[a._v("空间分配担保")]),a._v(" "),s("p",[s("code",[a._v("-XX:HandlePromotionFailure")])])])]),a._v(" "),s("h3",{attrs:{id:"_7-8-tlab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-tlab"}},[a._v("#")]),a._v(" 7.8 TLAB")]),a._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210528193615.png"}}),a._v(" "),s("p",[a._v("什么是"),s("code",[a._v("TLAB")]),a._v("？")]),a._v(" "),s("ol",[s("li",[a._v("从内存模型而不是垃圾收集的角度，对"),s("code",[a._v("Eden")]),a._v("区域继续进行划分，"),s("code",[a._v("JVM")]),a._v("为每个线程分配了一个私有缓存区域，它包含在"),s("code",[a._v("Eden")]),a._v("空间内")]),a._v(" "),s("li",[a._v("多线程同时分配内存时，使用"),s("code",[a._v("TLAB")]),a._v("可以避免一系列的非线程安全问题。同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称为快速分配策略")])]),a._v(" "),s("p",[a._v("为什么有"),s("code",[a._v("TLAB(Thread Loacl Allocation Buffer)")])]),a._v(" "),s("ol",[s("li",[a._v("堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据")]),a._v(" "),s("li",[a._v("由于对象实例的创建在"),s("code",[a._v("JVM")]),a._v("中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的")]),a._v(" "),s("li",[a._v("为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度")])]),a._v(" "),s("p",[s("code",[a._v("TLAB")]),a._v("的说明")]),a._v(" "),s("ol",[s("li",[a._v("尽管不是所有的对象实例都能够在"),s("code",[a._v("TLAB")]),a._v("中成功分配内存，但"),s("code",[a._v("JVM")]),a._v("确实是将"),s("code",[a._v("TLAB")]),a._v("作为内存分配的首选")]),a._v(" "),s("li",[a._v("在程序中，开发人员可以通过选项"),s("code",[a._v("-XX:UseTLAB")]),a._v("设置是否开启"),s("code",[a._v("TLAB")]),a._v("空间")]),a._v(" "),s("li",[a._v("默认情况下，"),s("code",[a._v("TLAB")]),a._v("空间的内存非常小，仅占有整个"),s("code",[a._v("Eden")]),a._v("空间的"),s("code",[a._v("1%")]),a._v("，当我们可以通过选项"),s("code",[a._v("-XX:TLABWasteTargetPercent")]),a._v("设置"),s("code",[a._v("TLAB")]),a._v("空间所占用空间的百分比大小")]),a._v(" "),s("li",[a._v("一旦对象在"),s("code",[a._v("TLAB")]),a._v("空间分配内存失败时，"),s("code",[a._v("JVM")]),a._v("就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在"),s("code",[a._v("Eden")]),a._v("空间中分配内存")])]),a._v(" "),s("h3",{attrs:{id:"_7-9-堆空间参数设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-堆空间参数设置"}},[a._v("#")]),a._v(" 7.9 堆空间参数设置")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("查看所有的参数的默认初始值")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+PrintFlagesInitial\n")])])])]),a._v(" "),s("li",[s("p",[a._v("查看所有的参数的最终值")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+PrintFlagsFinal\n")])])])]),a._v(" "),s("li",[s("p",[a._v("初始堆空间内存(默认为物理内存的1/64)")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-Xms\n")])])])]),a._v(" "),s("li",[s("p",[a._v("最大堆空间内存(默认为物理内存的1/4)")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-Xmx\n")])])])]),a._v(" "),s("li",[s("p",[a._v("设置新生代的大小")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-Xmn\n")])])])]),a._v(" "),s("li",[s("p",[a._v("配置新生代与老年代在堆结构的占比")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:NewRatio\n")])])])]),a._v(" "),s("li",[s("p",[a._v("设置新生代中"),s("code",[a._v("Eden")]),a._v("和"),s("code",[a._v("S0")]),a._v("和"),s("code",[a._v("S1")]),a._v("空间的比例")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:SurvivorRatio\n")])])])]),a._v(" "),s("li",[s("p",[a._v("设置新生代垃圾的最大年龄")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+MaxTenuringThreshold\n")])])])]),a._v(" "),s("li",[s("p",[a._v("输出详细的"),s("code",[a._v("GC")]),a._v("处理日志")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+PrintGC\n-verbose:gc\n")])])])]),a._v(" "),s("li",[s("p",[a._v("是否设置空间分配担保")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:HandlePromotionFailure\n")])])])])]),a._v(" "),s("p",[a._v("在发生"),s("code",[a._v("Minor GC")]),a._v("之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("如果大于，则此次"),s("code",[a._v("Minor GC")]),a._v("是安全的")])]),a._v(" "),s("li",[s("p",[a._v("如果小于，则虚拟机会查看"),s("code",[a._v("-XX:HandlePromotionFailure")]),a._v("设置值是否允许担保失败")]),a._v(" "),s("p",[a._v("如果"),s("code",[a._v("handlePromotionFailure=true")]),a._v("，那么继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小")]),a._v(" "),s("ol",[s("li",[a._v("如果大于，则尝试进行一次"),s("code",[a._v("Minor GC")]),a._v("，但这次"),s("code",[a._v("Minor GC")]),a._v("依然是有风险的")]),a._v(" "),s("li",[a._v("如果小于，则改为进行一次"),s("code",[a._v("Full GC")])])]),a._v(" "),s("p",[a._v("如果"),s("code",[a._v("HandlePromotionFailure=false")]),a._v("，则改为进行一次"),s("code",[a._v("Full GC")])])])]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("JDK6 Update24")]),a._v("之后，"),s("code",[a._v("HandlePromotionFailure")]),a._v("参数不会影响到虚拟机的空间分配担保策略，观察"),s("code",[a._v("OpenJDK")]),a._v("中的源码变化，虽然源码中还定义了"),s("code",[a._v("HandlePromotionFailure")]),a._v("参数，但是在代码中已经不会在使用它。"),s("code",[a._v("JDK6 Update24")]),a._v("之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行"),s("code",[a._v("Minor GC")]),a._v("，否则将进行"),s("code",[a._v("Full GC")])]),a._v(" "),s("h3",{attrs:{id:"_7-10-堆不是分配对象的唯一选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-堆不是分配对象的唯一选择"}},[a._v("#")]),a._v(" 7.10 堆不是分配对象的唯一选择")]),a._v(" "),s("p",[a._v("在《深入理解Java虚拟机》中：随着"),s("code",[a._v("JIT")]),a._v("编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也就渐渐变得不那么“绝对了”")]),a._v(" "),s("h4",{attrs:{id:"_7-10-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-1-概述"}},[a._v("#")]),a._v(" 7.10.1 概述")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("Java")]),a._v("虚拟机中，对象是在"),s("code",[a._v("Java")]),a._v("堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是若干经过逃逸分析"),s("code",[a._v("Escape Analysis")]),a._v("后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无需进行垃圾回收了。这也是最常见的堆外存储技术")]),a._v(" "),s("p",[a._v("此外，前面提到的基于"),s("code",[a._v("OpenJDK")]),a._v("深度定制的"),s("code",[a._v("TaoBaoVM")]),a._v("，其中创新的"),s("code",[a._v("GCIH(GC invisible heap)")]),a._v("技术实现"),s("code",[a._v("off-heap")]),a._v("，将生命周期较长的"),s("code",[a._v("Java")]),a._v("对象从"),s("code",[a._v("heap")]),a._v("中移至"),s("code",[a._v("heap")]),a._v("外，并且"),s("code",[a._v("GC")]),a._v("不能管理"),s("code",[a._v("GCIH")]),a._v("内部的"),s("code",[a._v("Java")]),a._v("对象，以此达到降低"),s("code",[a._v("GC")]),a._v("的回收频率和提升"),s("code",[a._v("GC")]),a._v("的回收效率的目的")]),a._v(" "),s("h4",{attrs:{id:"_7-10-2-逃逸分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-2-逃逸分析"}},[a._v("#")]),a._v(" 7.10.2 逃逸分析")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("如果将堆上的对象分配到栈，需要使用逃逸分析手段")])]),a._v(" "),s("li",[s("p",[a._v("这是一种可以有效减少"),s("code",[a._v("Java")]),a._v("程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法")])]),a._v(" "),s("li",[s("p",[a._v("通过逃逸分析，"),s("code",[a._v("Java Hotspot")]),a._v("编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上")])]),a._v(" "),s("li",[s("p",[a._v("逃逸分析的基本行为就是对象动态作用域：")]),a._v(" "),s("p",[a._v("当一个对象在方法中被定义后，对象只能在方法内部使用，则认为没有发生逃逸，栈上分配")]),a._v(" "),s("p",[a._v("当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 发生逃逸")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 发生逃逸")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("useEscapeAnalysis1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 没有发生逃逸")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("useEscapeAnalysis2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 发生逃逸")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("code",[a._v("JDK 6u23")]),a._v("之后，"),s("code",[a._v("Hotspot")]),a._v("默认开启逃逸分析")]),a._v(" "),s("h4",{attrs:{id:"_7-10-3-代码优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-3-代码优化"}},[a._v("#")]),a._v(" 7.10.3 代码优化")]),a._v(" "),s("p",[a._v("使用逃逸分析，编译器可以对代码做出如下优化")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("栈上分配")])])]),a._v(" "),s("p",[a._v("栈上分配。将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配")]),a._v(" "),s("p",[s("code",[a._v("JIT")]),a._v("编译器在编译期间根据逃逸分析的结果，发现如果一个对象没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后。继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量也被回收。这样就无需进行垃圾回收了")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("同步省略")])])]),a._v(" "),s("p",[a._v("同步省略。如果一个对象被发现只能从一个线程被访问，那么对于这个对象的操作可以不考虑同步")]),a._v(" "),s("p",[a._v("线程同步的代价是相当高的，同步的后果是降低并发性和性能")]),a._v(" "),s("p",[a._v("在动态编译同步块的时候，"),s("code",[a._v("JIT")]),a._v("编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只够一个线程访问而没有被发布到其他线程。如果没有，那么"),s("code",[a._v("JIT")]),a._v("编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除")]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("分离对象或标量替换")])])]),a._v(" "),s("p",[a._v("分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分(或全部)可以不存储在内存，而是存储在"),s("code",[a._v("CPU")]),a._v("寄存器中")]),a._v(" "),s("p",[a._v("标量"),s("code",[a._v("Scalar")]),a._v("是指一个无法再分解更小的数据的数据。"),s("code",[a._v("Java")]),a._v("中"),s("strong",[a._v("原始的数据类型")]),a._v("就是标量。")]),a._v(" "),s("p",[a._v("相对的，那些还可以分解的数据叫做聚合量"),s("code",[a._v("Agggregate")]),a._v("，"),s("code",[a._v("Java")]),a._v("中的"),s("strong",[a._v("对象")]),a._v("就是聚合量，因为它可以分解成其他聚合量和标量")]),a._v(" "),s("p",[a._v("在"),s("code",[a._v("JIT")]),a._v("阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过"),s("code",[a._v("JIT")]),a._v("优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换")]),a._v(" "),s("p",[a._v("下面"),s("code",[a._v("alloc")]),a._v("方法可以被替换")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ScalarReplace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"标量替换"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("被替换为")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ScalarReplace")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"标量替换"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])])],1)}),[],!1,null,null,null);"function"==typeof _&&_(e);t.default=e.exports}}]);