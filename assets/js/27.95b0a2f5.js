(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{572:function(a,v,_){"use strict";_.r(v);var s=_(8),t=function(a){a.options.__data__block__={mermaid_382ee147:"graph TD\nKotlin --\x3e C[编译器]\nClojure --\x3e C\nGroovy --\x3e C\nScala --\x3e C\nJython --\x3e C\nJRuby --\x3e C\nJavaScript --\x3e C\nC --\x3e 字节码文件\n字节码文件 --\x3e java虚拟机\n",mermaid_382ee1a8:"graph TD\n并行处理 --\x3e Clojure\n展示层 --\x3e JRuby/Rails\n中间层 --\x3e Java\n",mermaid_64a56fee:"graph TD\njava程序 --\x3e |编译|A[字节码文件] --\x3e |执行|windows_JVM\nA --\x3e |执行|Linux_JVM\nA --\x3e |执行|Mac_JVM\n",mermaid_64a5672e:"graph LR\nA(加载Loading) --\x3e B(验证Verification) --\x3e C(准备Preparation) --\x3e D(解析Resolution) --\x3e E(初始化Initialization)\n",mermaid_64a56068:"graph TD\nB(验证Verification) --\x3e C(准备Preparation) --\x3e D(解析Resolution)\n",mermaid_64a558e6:"graph TD\nA[Bootstrap ClassLoader] --\x3e B[Extension Class Loader] --\x3e C[System Class Loader] --\x3e D[User Define Class Loader] --\x3e E[User Defined Class Loader] --\x3e |...|I[....]\nC --\x3e F[User Defined Class Loader] --\x3eG[User Defined Class Loader] --\x3e |...|H[....]\n",mermaid_64a5499c:"classDiagram\nclass ClassLoader{\n\t<<abstract>>\n\t+loadClass(String)\n\t+resolveClass(Class<?>)\n\t+findClass(String)\n\t+defineClass(byte[], int, int)\n}\nclass SecureClassLoader {\n\t\n}\nclass URLClassLoader {\n\t\n}\nclass ExtClassLoader {\n\t\n}\nclass AppClassLoader {\n\t\n}\nClassLoader <|-- SecureClassLoader\nSecureClassLoader <|-- URLClassLoader\nURLClassLoader <|-- ExtClassLoader\nURLClassLoader <|-- AppClassLoader\n"}},e=Object(s.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"jvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),_("p",[a._v("[TOC]")]),a._v(" "),_("h2",{attrs:{id:"_1-jvm与java体系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm与java体系"}},[a._v("#")]),a._v(" 1. JVM与java体系")]),a._v(" "),_("p",[_("code",[a._v("JVM")]),a._v("是一个跨语言的平台，在"),_("code",[a._v("java7")]),a._v("的发布之后，"),_("code",[a._v("java")]),a._v("虚拟机的设计者们通过"),_("code",[a._v("JSR-292")]),a._v("规范基本实现在"),_("code",[a._v("java")]),a._v("虚拟机上运行非"),_("code",[a._v("java")]),a._v("语言编写的程序")]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_382ee147",graph:a.$dataBlock.mermaid_382ee147}}),_("h3",{attrs:{id:"_1-1-字节码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-字节码"}},[a._v("#")]),a._v(" 1.1 字节码")]),a._v(" "),_("ul",[_("li",[a._v("对于字节码的理解，任何能在"),_("code",[a._v("jvm")]),a._v("平台上执行的字节码格式都是一样的。所以应该统称为"),_("code",[a._v("jvm")]),a._v("字节码")]),a._v(" "),_("li",[a._v("不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的"),_("code",[a._v("JVM")]),a._v("上运行")]),a._v(" "),_("li",[_("code",[a._v("java")]),a._v("虚拟机与"),_("code",[a._v("java")]),a._v("语言没有必然的联系，它只与特定的二进制文件格式——"),_("code",[a._v("Class")]),a._v("文件格式所关联，"),_("code",[a._v("class")]),a._v("文件中包含了"),_("code",[a._v("java")]),a._v("虚拟机指令集(或者称为字节码"),_("code",[a._v("Bytecodes")]),a._v(")和符号表，还有一些其它辅助信息")])]),a._v(" "),_("h3",{attrs:{id:"_1-2-多语言混合编程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-多语言混合编程"}},[a._v("#")]),a._v(" 1.2 多语言混合编程")]),a._v(" "),_("ul",[_("li",[_("p",[_("code",[a._v("java")]),a._v("平台上，通过特定领域的语言去解决特定领域的问题是当前软件开发的一个趋势")])]),a._v(" "),_("li",[_("p",[a._v("某一个项目")]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_382ee1a8",graph:a.$dataBlock.mermaid_382ee1a8}})],1),a._v(" "),_("li",[_("p",[a._v("各种语言之间的交互不存在任何困难，就像使用自己语言的原生"),_("code",[a._v("API")]),a._v("一样，因为它们最终都运行在一个虚拟机上")])]),a._v(" "),_("li",[_("p",[a._v("对于运行在"),_("code",[a._v("java")]),a._v("虚拟机之上、"),_("code",[a._v("java")]),a._v("之外的语言，来自系统级、底层的支持正在迅速曾倩，以"),_("code",[a._v("JSR-292")]),a._v("为核心的一系列项目和功能改进")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("Vinci Machine\nNashorn\nInvokeDynamic\njava.lang.invoke\n")])])])])]),a._v(" "),_("h3",{attrs:{id:"_1-3-虚拟机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-虚拟机"}},[a._v("#")]),a._v(" 1.3 虚拟机")]),a._v(" "),_("h4",{attrs:{id:"_1-3-1-虚拟机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-虚拟机"}},[a._v("#")]),a._v(" 1.3.1 虚拟机")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("所谓虚拟机"),_("code",[a._v("virtual machine")]),a._v("，就是一台虚拟的计算机，它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机")]),a._v(" "),_("p",[_("code",[a._v("virtual box")]),a._v("，"),_("code",[a._v("VMware")]),a._v("就属于系统虚拟机，它们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台")]),a._v(" "),_("p",[a._v("程序虚拟机的典型代表就是"),_("code",[a._v("java")]),a._v("虚拟机，它专门执行单个计算机程序而设计，在"),_("code",[a._v("java")]),a._v("虚拟机中执行的指令我们称为"),_("code",[a._v("java")]),a._v("字节码指令")])]),a._v(" "),_("li",[_("p",[a._v("无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中")])])]),a._v(" "),_("h4",{attrs:{id:"_1-3-2-java虚拟机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-java虚拟机"}},[a._v("#")]),a._v(" 1.3.2 java虚拟机")]),a._v(" "),_("ul",[_("li",[_("p",[_("code",[a._v("java")]),a._v("虚拟机是一台执行"),_("code",[a._v("java")]),a._v("字节码的虚拟计算机，它拥有独立的运行机制，其运行的"),_("code",[a._v("java")]),a._v("字节码也未必是"),_("code",[a._v("java")]),a._v("语言编译而成")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("JVM")]),a._v("平台的各种语言可以共享"),_("code",[a._v("java")]),a._v("虚拟机带来的跨平台性、优秀的垃圾回收器，以及可靠的即时编译器")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("java")]),a._v("技术的核心就是"),_("code",[a._v("java")]),a._v("虚拟机，因为所有的"),_("code",[a._v("java")]),a._v("程序都运行在"),_("code",[a._v("java")]),a._v("虚拟机内部")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("java")]),a._v("虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条"),_("code",[a._v("java")]),a._v("指令，"),_("code",[a._v("java")]),a._v("虚拟机规范都有详细定义")])]),a._v(" "),_("li",[_("p",[a._v("特点")]),a._v(" "),_("p",[a._v("一次编译，到处运行")]),a._v(" "),_("p",[a._v("自动内存管理")]),a._v(" "),_("p",[a._v("自动垃圾回收机制")])])]),a._v(" "),_("h3",{attrs:{id:"_1-4-java整体结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-java整体结构"}},[a._v("#")]),a._v(" 1.4 java整体结构")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("HotSpot VM")]),a._v("目前市面上高性能虚拟机的代表作之一")]),a._v(" "),_("li",[a._v("它采用解释起与即时编译器并存的架构")])]),a._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210525163204.png"}}),a._v(" "),_("h3",{attrs:{id:"_1-5-java代码执行流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-java代码执行流程"}},[a._v("#")]),a._v(" 1.5 java代码执行流程")]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_64a56fee",graph:a.$dataBlock.mermaid_64a56fee}}),_("h3",{attrs:{id:"_1-6-jvm架构模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-jvm架构模型"}},[a._v("#")]),a._v(" 1.6 JVM架构模型")]),a._v(" "),_("p",[_("code",[a._v("java")]),a._v("编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种指令集架构则是基于寄存器的指令集架构")]),a._v(" "),_("p",[a._v("具体来说：这两种架构之间的区别")]),a._v(" "),_("h4",{attrs:{id:"_1-6-1-基于栈式架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-基于栈式架构"}},[a._v("#")]),a._v(" 1.6.1 基于栈式架构")]),a._v(" "),_("ul",[_("li",[a._v("设计和实现更简单，适用于资源受限的系统")]),a._v(" "),_("li",[a._v("避开了寄存器的分配难题：使用零地址指令方式分配")]),a._v(" "),_("li",[a._v("指令流中的大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现")]),a._v(" "),_("li",[a._v("不需要硬件支持，可移植性好，更好实现跨平台")])]),a._v(" "),_("h4",{attrs:{id:"_1-6-2-基于寄存器架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-基于寄存器架构"}},[a._v("#")]),a._v(" 1.6.2 基于寄存器架构")]),a._v(" "),_("ul",[_("li",[a._v("典型的应用是"),_("code",[a._v("x86")]),a._v("的二进制指令集：比如传统的"),_("code",[a._v("PC")]),a._v("以及"),_("code",[a._v("Android")]),a._v("的"),_("code",[a._v("Davlik")]),a._v("虚拟机")]),a._v(" "),_("li",[a._v("指令集架构则完全依赖硬件，可移植性差")]),a._v(" "),_("li",[a._v("性能优秀和执行高效")]),a._v(" "),_("li",[a._v("花费更少的指令完成一项操作")]),a._v(" "),_("li",[a._v("在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集都是以零地址指令为主")])]),a._v(" "),_("h4",{attrs:{id:"_1-6-3-总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-总结"}},[a._v("#")]),a._v(" 1.6.3 总结")]),a._v(" "),_("p",[a._v("由于跨平台性的设计，"),_("code",[a._v("Java")]),a._v("的指令都是根据栈来设计的。")]),a._v(" "),_("h3",{attrs:{id:"_1-7-jvm的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-jvm的生命周期"}},[a._v("#")]),a._v(" 1.7 JVM的生命周期")]),a._v(" "),_("p",[_("strong",[a._v("虚拟机的启动")])]),a._v(" "),_("p",[_("code",[a._v("Java")]),a._v("虚拟机的启动是通过引导类加载器"),_("code",[a._v("bootstrap class loader")]),a._v("创建一个初始类"),_("code",[a._v("initial class")]),a._v(" 来完成的，这个类是由虚拟机的具体实现指定的")]),a._v(" "),_("p",[_("strong",[a._v("虚拟机的运行")])]),a._v(" "),_("ul",[_("li",[a._v("一个运行中的"),_("code",[a._v("JaVA")]),a._v("虚拟机有着一个清晰的任务：执行"),_("code",[a._v("java")]),a._v("程序")]),a._v(" "),_("li",[a._v("程序开始执行时它才运行，程序结束时它就停止")]),a._v(" "),_("li",[a._v("执行一个所谓的"),_("code",[a._v("Java")]),a._v("程序的时候，真真正正在执行的是一个叫做"),_("code",[a._v("Java")]),a._v("虚拟机的进程")])]),a._v(" "),_("p",[_("strong",[a._v("虚拟机的退出")])]),a._v(" "),_("ul",[_("li",[a._v("程序正常执行结束")]),a._v(" "),_("li",[a._v("程序在执行过程中遇到了异常或者错误而异常终止")]),a._v(" "),_("li",[a._v("由于操作系统出现错误而导致"),_("code",[a._v("Java")]),a._v("虚拟机进程终止")]),a._v(" "),_("li",[a._v("某线程调用"),_("code",[a._v("Runtime")]),a._v("类或"),_("code",[a._v("System")]),a._v("类的"),_("code",[a._v("exit")]),a._v("方法，或"),_("code",[a._v("Runtime")]),a._v("类的"),_("code",[a._v("Halt")]),a._v("方法，并且"),_("code",[a._v("Java")]),a._v("安全管理器也允许这次"),_("code",[a._v("exit")]),a._v("或"),_("code",[a._v("halt")]),a._v("操作")]),a._v(" "),_("li",[a._v("除此之外，"),_("code",[a._v("JNI(Java Native Interface)")]),a._v("规范描述了用"),_("code",[a._v("JNI Invocation API")]),a._v("来加载或卸载"),_("code",[a._v("Java")]),a._v("虚拟机时，"),_("code",[a._v("Java")]),a._v("虚拟机的退出情况")])]),a._v(" "),_("h2",{attrs:{id:"_2-类加载子系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载子系统"}},[a._v("#")]),a._v(" 2. 类加载子系统")]),a._v(" "),_("h3",{attrs:{id:"_2-1-类加载的过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-类加载的过程"}},[a._v("#")]),a._v(" 2.1 类加载的过程")]),a._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"D:\\code\\笔记\\java\\JVM.assets\\image-20201123182326389.png",alt:"image-20201123182326389"}}),a._v(" "),_("ul",[_("li",[a._v("类加载子系统负责从文件系统或者网络中加载"),_("code",[a._v("Class")]),a._v("文件，"),_("code",[a._v("class")]),a._v("文件在文件开头有特定的文件标识")]),a._v(" "),_("li",[_("code",[a._v("ClassLoader")]),a._v("只负责"),_("code",[a._v("calss")]),a._v("文件的加载，至于它是否可以运行，则由"),_("code",[a._v("Execution Engine")]),a._v("决定")]),a._v(" "),_("li",[a._v("加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分常量信息是"),_("code",[a._v("Class")]),a._v("文件中常量池部分的内存映射)")])]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_64a5672e",graph:a.$dataBlock.mermaid_64a5672e}}),_("h4",{attrs:{id:"_2-1-1-加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-加载"}},[a._v("#")]),a._v(" 2.1.1 加载")]),a._v(" "),_("ol",[_("li",[a._v("通过一个类的全限定名获取定义此类的二进制字节流")]),a._v(" "),_("li",[a._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")]),a._v(" "),_("li",[a._v("在内存中生成一个代表这个类的"),_("code",[a._v("java.lang.Class")]),a._v("对象，作为方法区这个类的各种数据的访问入口")])]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("加载字节码文件的方式")])])]),a._v(" "),_("ol",[_("li",[a._v("从本地系统中直接加载")]),a._v(" "),_("li",[a._v("通过网络获取"),_("code",[a._v("Web Applet")])]),a._v(" "),_("li",[a._v("从压缩包中读取"),_("code",[a._v("zip")]),a._v("、"),_("code",[a._v("jar")]),a._v("、"),_("code",[a._v("war")])]),a._v(" "),_("li",[a._v("运行时计算生成，动态代理技术")]),a._v(" "),_("li",[a._v("由其他文件生成，典型场景："),_("code",[a._v("JSP")]),a._v("应用")]),a._v(" "),_("li",[a._v("从专有数据库中提取"),_("code",[a._v(".class")]),a._v("文件")]),a._v(" "),_("li",[a._v("从加密文件中获取，典型的防"),_("code",[a._v("Class")]),a._v("文件被反编译的保护措施")])]),a._v(" "),_("h4",{attrs:{id:"_2-1-2-链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-链接"}},[a._v("#")]),a._v(" 2.1.2 链接")]),a._v(" "),_("p",[a._v("链接包括")]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_64a56068",graph:a.$dataBlock.mermaid_64a56068}}),_("ul",[_("li",[_("p",[a._v("验证"),_("code",[a._v("Verify")])]),a._v(" "),_("p",[a._v("目的在于确保"),_("code",[a._v("Class")]),a._v("文件的字节流中包含信息符合当前虚拟机的要求，保证加载类的正确性，不会危害虚拟机自身安全")]),a._v(" "),_("p",[a._v("主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证")])]),a._v(" "),_("li",[_("p",[a._v("准备"),_("code",[a._v("Prepare")])]),a._v(" "),_("p",[a._v("为类变量分配内存并且设置该类的默认初始值，即零值")]),a._v(" "),_("p",[a._v("这里包括含用"),_("code",[a._v("final")]),a._v("修饰的"),_("code",[a._v("static")]),a._v("，因为"),_("code",[a._v("final")]),a._v("在编译的时候就会分配了，准备阶段会显式初始化")]),a._v(" "),_("p",[a._v("这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量会随着对象一起分配到"),_("code",[a._v("java")]),a._v("堆中")])]),a._v(" "),_("li",[_("p",[a._v("解析"),_("code",[a._v("Resolve")])]),a._v(" "),_("p",[a._v("将常量池内的符号引用转换为直接引用的过程")]),a._v(" "),_("p",[a._v("事实上，解析操作往往会伴随着"),_("code",[a._v("JVM")]),a._v("在执行完初始化之后再执行")]),a._v(" "),_("p",[a._v("符号引用就是一组符号来描述所引用的目标，符号引用的字面量形式明确定义在"),_("code",[a._v("Java")]),a._v("虚拟机规范的"),_("code",[a._v("Class")]),a._v("文件格式中，直接引用就是目标的指针、相对偏移量或一个间接定位到目标的句柄")]),a._v(" "),_("p",[a._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的"),_("code",[a._v("CONSTANT_Class_info")]),a._v("、"),_("code",[a._v("CONSTANT_Fieldref_info")]),a._v("、"),_("code",[a._v("CONSTANT_Methodref_info")]),a._v("等")])])]),a._v(" "),_("h4",{attrs:{id:"_2-1-3-初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-初始化"}},[a._v("#")]),a._v(" 2.1.3 初始化")]),a._v(" "),_("ul",[_("li",[a._v("初始化阶段就是执行类构造器方法"),_("code",[a._v("<clinit>()")]),a._v("的过程")]),a._v(" "),_("li",[a._v("此方法不需定义，是"),_("code",[a._v("javac")]),a._v("编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来")]),a._v(" "),_("li",[a._v("构造器方法中指令按语句在源文件中出现的顺序执行")]),a._v(" "),_("li",[_("code",[a._v("<clinit>()")]),a._v("不同于类的构造器。(关联：构造器是虚拟机视角下的"),_("code",[a._v("<init>()")]),a._v(")")]),a._v(" "),_("li",[a._v("若该类具有父类，"),_("code",[a._v("JVM")]),a._v("会保证子类的"),_("code",[a._v("<clinit>()")]),a._v("执行前，父类的"),_("code",[a._v("<clinit>()")]),a._v("已执行完毕")]),a._v(" "),_("li",[a._v("虚拟机必须保证一个类的"),_("code",[a._v("<clinit>()")]),a._v("方法在多线程下被同步加锁")])]),a._v(" "),_("h3",{attrs:{id:"_2-2-类加载器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-类加载器"}},[a._v("#")]),a._v(" 2.2 类加载器")]),a._v(" "),_("ul",[_("li",[_("code",[a._v("JVM")]),a._v("支持两种类型的类加载器，分别是引导类加载器"),_("code",[a._v("Bootstrap ClassLoader")]),a._v("和自定义类加载器"),_("code",[a._v("User-Defined ClassLoader")])]),a._v(" "),_("li",[a._v("从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是"),_("code",[a._v("java")]),a._v("虚拟机规范却没有这么定义，而是将所有派生于抽象类"),_("code",[a._v("ClassLoader")]),a._v("的类加载器都划分为自定义类加载器")]),a._v(" "),_("li",[a._v("无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个")])]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_64a558e6",graph:a.$dataBlock.mermaid_64a558e6}}),_("p",[a._v("四者的关系不是继承而是包含")]),a._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoaderTest")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),_("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Test")]),a._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("test")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取系统类加载器")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" systemClassLoader "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSystemClassLoader")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("systemClassLoader"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc")]),a._v("\n\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取系统类加载器的上层，扩展类加载器")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" extClassLoader "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" systemClassLoader"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParent")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("extClassLoader"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jdk.internal.loader.ClassLoaders$PlatformClassLoader@7c30a502")]),a._v("\n\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 获取扩展类加载器的上层，引导类加载器")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" bootstrapClassLoader "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" extClassLoader"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("getParent")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("bootstrapClassLoader"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// null")]),a._v("\n\n        "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对于用户自定义类来说，默认使用系统类加载器进行加载")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" classLoader "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoaderTest")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("classLoader"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// jdk.internal.loader.ClassLoaders$AppClassLoader@2437c6dc")]),a._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),_("p",[_("code",[a._v("Java")]),a._v("的核心类库都是使用引导类加载器进行加载的")]),a._v(" "),_("h4",{attrs:{id:"_2-2-1-虚拟机再带的加载器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-虚拟机再带的加载器"}},[a._v("#")]),a._v(" 2.2.1 虚拟机再带的加载器")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("启动类加载器")])])]),a._v(" "),_("p",[a._v("启动类加载器(引导类加载器，Bootstrap ClassLoader)")]),a._v(" "),_("ol",[_("li",[a._v("这个类加载器是使用"),_("code",[a._v("C/C++")]),a._v("实现，嵌套在"),_("code",[a._v("JVM")]),a._v("内部")]),a._v(" "),_("li",[a._v("并不是继承自"),_("code",[a._v("java.lang.ClassLoader")]),a._v("，没有父加载器")]),a._v(" "),_("li",[a._v("是加载扩展类和应用程序的类加载器，并指定为他们的父类加载器")]),a._v(" "),_("li",[a._v("处于安全的考虑，"),_("code",[a._v("Bootstrap")]),a._v("启动类只加载包名为"),_("code",[a._v("java")]),a._v("、"),_("code",[a._v("javax")]),a._v("、"),_("code",[a._v("sun")]),a._v("等开头的类")])]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("扩展类加载器")])])]),a._v(" "),_("p",[a._v("扩展类加载器(Extension ClassLoader)")]),a._v(" "),_("ol",[_("li",[_("code",[a._v("Java")]),a._v("语言编写，由"),_("code",[a._v("sun.misc.Lanucher$ExClassLoader")]),a._v("实现")]),a._v(" "),_("li",[a._v("派生于"),_("code",[a._v("ClassLoader")]),a._v("类，父类加载器为启动类加载器")]),a._v(" "),_("li",[a._v("从"),_("code",[a._v("java.ext.dirs")]),a._v("系统属性所指定的目录中加载类库，或从"),_("code",[a._v("JDK")]),a._v("的安装目录的"),_("code",[a._v("jre/lib/ext")]),a._v("子目录下加载类库。如果用户创建的"),_("code",[a._v("JAR")]),a._v("放在此目录下，也会自动由扩展类加载器加载")])]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("应用程序类加载器")])])]),a._v(" "),_("ol",[_("li",[_("code",[a._v("java")]),a._v("语言编写，由"),_("code",[a._v("sun.misc.Launcher$AppClassLoader")]),a._v("实现")]),a._v(" "),_("li",[a._v("派生于"),_("code",[a._v("ClassLoader")]),a._v("类，父类加载器为扩展类加载器")]),a._v(" "),_("li",[a._v("它负责加载环境变量"),_("code",[a._v("classpath")]),a._v("或系统属性"),_("code",[a._v("java.class.path")]),a._v("指定路径下的类库")]),a._v(" "),_("li",[a._v("该类加载是程序中默认的类加载器，一般来说，"),_("code",[a._v("Java")]),a._v("应用的类都是由它来完成加载")]),a._v(" "),_("li",[a._v("通过"),_("code",[a._v("ClassLoader.getSystemClassLoader()")]),a._v("方法可以获取到该类加载器")])]),a._v(" "),_("h4",{attrs:{id:"_2-2-2-用户自定义的加载器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-用户自定义的加载器"}},[a._v("#")]),a._v(" 2.2.2 用户自定义的加载器")]),a._v(" "),_("p",[a._v("大部分场景下，类的加载是由上述的三种类加载器相互配合执行，在一些特殊的场景下，可以自定义类加载器来定制类的加载方式")]),a._v(" "),_("ol",[_("li",[a._v("隔离加载类")]),a._v(" "),_("li",[a._v("修改类加载的方式")]),a._v(" "),_("li",[a._v("扩展加载源")]),a._v(" "),_("li",[a._v("防止源码泄露")])]),a._v(" "),_("p",[a._v("自定义类加载器步骤")]),a._v(" "),_("ol",[_("li",[a._v("开发人员可以通过继承抽象类"),_("code",[a._v("java.lang.ClassLoader")]),a._v("类的方式，实现自己的类加载器，一满足一些特殊的需求")]),a._v(" "),_("li",[a._v("继承"),_("code",[a._v("ClassLoader")]),a._v("类名重写"),_("code",[a._v("findClass()方法")])]),a._v(" "),_("li",[a._v("在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承"),_("code",[a._v("URLClassLoader")]),a._v("类，这样就可以避免自己去编写"),_("code",[a._v("findClass()")]),a._v("方法及其获取字节码流的方式，使自定义类加载器编写更加简洁")])]),a._v(" "),_("h4",{attrs:{id:"_2-2-3-classloader"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-classloader"}},[a._v("#")]),a._v(" 2.2.3 ClassLoader")]),a._v(" "),_("p",[_("code",[a._v("ClassLoader")]),a._v("类，它是一个抽象类，其后所有类加载器都继承自"),_("code",[a._v("ClassLoader")]),a._v("(不包括启动类加载器)")]),a._v(" "),_("table",[_("thead",[_("tr",[_("th",[a._v("方法名称")]),a._v(" "),_("th",[a._v("描述")])])]),a._v(" "),_("tbody",[_("tr",[_("td",[a._v("getParent()")]),a._v(" "),_("td",[a._v("返回该类加载器的超类加载器")])]),a._v(" "),_("tr",[_("td",[a._v("loadClass(String name)")]),a._v(" "),_("td",[a._v("加载名称为name的类，返回结果java.lang.Class类的实例")])]),a._v(" "),_("tr",[_("td",[a._v("findClass(String name)")]),a._v(" "),_("td",[a._v("查找名称为name的类，返回结果java.lang.Class类的实例")])]),a._v(" "),_("tr",[_("td",[a._v("findLoadedClass(String name)")]),a._v(" "),_("td",[a._v("查找名称为name且已经被加载过的类，返回结果java.lang.Class的实例")])]),a._v(" "),_("tr",[_("td",[a._v("defineClass(String name, byte[] b, int off, int len)")]),a._v(" "),_("td",[a._v("把字节数组b中的内容转换为一个java类，返回结果为java.lang.Class的实例")])]),a._v(" "),_("tr",[_("td",[a._v("resolveClass(Class<?> c)")]),a._v(" "),_("td",[a._v("连接指定的一个java类")])])])]),a._v(" "),_("Mermaid",{attrs:{id:"mermaid_64a5499c",graph:a.$dataBlock.mermaid_64a5499c}}),_("h3",{attrs:{id:"_2-3-双亲委派机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-双亲委派机制"}},[a._v("#")]),a._v(" 2.3 双亲委派机制")]),a._v(" "),_("p",[_("code",[a._v("Java")]),a._v("虚拟机对"),_("code",[a._v("class")]),a._v("文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的"),_("code",[a._v("class")]),a._v("文件加载到内存生成"),_("code",[a._v("class")]),a._v("对象。而且加载某个类的"),_("code",[a._v("class")]),a._v("文件时，"),_("code",[a._v("Java")]),a._v("虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式")]),a._v(" "),_("h4",{attrs:{id:"_2-3-1-工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-工作原理"}},[a._v("#")]),a._v(" 2.3.1 工作原理")]),a._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526140758.png"}}),a._v(" "),_("ol",[_("li",[a._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行")]),a._v(" "),_("li",[a._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终到达顶层的启动类加载器")]),a._v(" "),_("li",[a._v("如果父类加载器可以完成类加载器任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式")])]),a._v(" "),_("h4",{attrs:{id:"_2-3-2-双亲委派的优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-双亲委派的优点"}},[a._v("#")]),a._v(" 2.3.2 双亲委派的优点")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("避免类的重复加载")])]),a._v(" "),_("li",[_("p",[a._v("保护程序安全，防止核心"),_("code",[a._v("API")]),a._v("被随意篡改")])]),a._v(" "),_("li",[_("p",[a._v("沙箱安全机制")]),a._v(" "),_("p",[a._v("如自定义"),_("code",[a._v("String")]),a._v("类，但是在加载自定义"),_("code",[a._v("String")]),a._v("类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载"),_("code",[a._v("JDK")]),a._v("自己的包，所以就会忽略自定义的类。这样可以保证对"),_("code",[a._v("java")]),a._v("核心源代码的保护")])])]),a._v(" "),_("h3",{attrs:{id:"_2-4-其它"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-其它"}},[a._v("#")]),a._v(" 2.4 其它")]),a._v(" "),_("blockquote",[_("p",[a._v("在"),_("code",[a._v("JVM")]),a._v("中表示两个"),_("code",[a._v("class")]),a._v("对象是否为同一个类的两个必要条件")])]),a._v(" "),_("ol",[_("li",[a._v("类的完整类名必须一致(含包名)")]),a._v(" "),_("li",[a._v("加载这个类的"),_("code",[a._v("ClassLoader")]),a._v("必须相同")])]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("对类加载器的引用")])])]),a._v(" "),_("p",[_("code",[a._v("JVM")]),a._v("必须知道一个类是由启动类加载器加载的还是用户自定义的类加载器加载的。如果一个类是由用户类加载器加载的，那么"),_("code",[a._v("JVM")]),a._v("会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的饮用个的时候，"),_("code",[a._v("JVM")]),a._v("需要保证这两个类型的类加载器是相同的")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("主动使用和被动使用")])])]),a._v(" "),_("p",[_("strong",[a._v("主动使用")])]),a._v(" "),_("ol",[_("li",[_("p",[a._v("创建类的实例")])]),a._v(" "),_("li",[_("p",[a._v("访问某个类或接口的静态变量，或者对该静态变量赋值")])]),a._v(" "),_("li",[_("p",[a._v("调用类的静态方法")])]),a._v(" "),_("li",[_("p",[a._v('反射(Class.forName("xxxx"))')])]),a._v(" "),_("li",[_("p",[a._v("初始化一个类的子类")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("Java")]),a._v("虚拟机启动时被标明为启动类的类")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("JDK7")]),a._v("开始提供的动态语言的支持")]),a._v(" "),_("p",[_("code",[a._v("java.lang.invoke.MethodHandle")]),a._v("实例的解析结果")]),a._v(" "),_("p",[_("code",[a._v("REF_getStatic")]),a._v("、"),_("code",[a._v("REF_putStatic")]),a._v("、"),_("code",[a._v("REF_invokeStatic")]),a._v("句柄对应的类没有初始化则初始化")])])]),a._v(" "),_("p",[_("strong",[a._v("被动使用")])]),a._v(" "),_("p",[a._v("除了以上七种情况，其他使用"),_("code",[a._v("Java")]),a._v("类的方式都被看作是对类的被动使用，都不会导致类的初始化")]),a._v(" "),_("h2",{attrs:{id:"_3-运行时数据区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行时数据区"}},[a._v("#")]),a._v(" 3. 运行时数据区")]),a._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526143644.png"}}),a._v(" "),_("p",[a._v("内存是非常重要的系统资源，是硬盘和"),_("code",[a._v("CPU")]),a._v("的中间仓库及桥梁，承载着操作系统和应用程序的事实运行。"),_("code",[a._v("JVM")]),a._v("内存布局规定了"),_("code",[a._v("Java")]),a._v("在运行过程中内存申请、分配、管理的策略，保证了"),_("code",[a._v("JVM")]),a._v("的高效稳定运行。不同的"),_("code",[a._v("JVM")]),a._v("对于内存的划分方式和管理机制存在着差异")]),a._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526144441.png"}}),a._v(" "),_("p",[_("code",[a._v("Java")]),a._v("虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机的启动而创建，随着虚拟机的退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁，比如第一幅图，红色的代表多个线程共享，灰色的代表单独线程私有")]),a._v(" "),_("h3",{attrs:{id:"_3-1-线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-线程"}},[a._v("#")]),a._v(" 3.1 线程")]),a._v(" "),_("ol",[_("li",[a._v("线程是一个程序里的运行单元。"),_("code",[a._v("JVM")]),a._v("允许一个应用有多个线程并行的执行")]),a._v(" "),_("li",[a._v("在"),_("code",[a._v("Hostspot JVM")]),a._v("里，每个线程都与操作系统的本地线程直接映射。当一个"),_("code",[a._v("Java")]),a._v("想成准备好执行以后，此时一个操作系统的 本地线程也同时创建。"),_("code",[a._v("Java")]),a._v("线程执行终止后，本地线程也会回收")]),a._v(" "),_("li",[a._v("操作系统负责所有线程的安排调度到任何一个可用的"),_("code",[a._v("CPU")]),a._v("上。一旦本地线程初始化成功后，它就会调用"),_("code",[a._v("Java")]),a._v("线程中的"),_("code",[a._v("run()")]),a._v("方法")])]),a._v(" "),_("p",[a._v("使用调试工具，能够在后台看到有许多线程在运行，这些后台不包括调用"),_("code",[a._v("public static void main(String[] args)")]),a._v("的"),_("code",[a._v("main")]),a._v("线程以及所有这个"),_("code",[a._v("main")]),a._v("线程自己创建的线程")]),a._v(" "),_("ol",[_("li",[a._v("虚拟机线程：这种线程的操作都是需要"),_("code",[a._v("JVM")]),a._v("达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要"),_("code",[a._v("JVM")]),a._v("达到安全点，这样堆才不会变化。这种线程的执行类型包括"),_("code",[a._v("stop-the-world")]),a._v("的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销")]),a._v(" "),_("li",[a._v("周期任务线程：这种线程是时间周期事件的体现(比如中断)，他们一般用于周期性操作的调度执行")]),a._v(" "),_("li",[_("code",[a._v("GC")]),a._v("线程：这种线程对"),_("code",[a._v("JVM")]),a._v("里不同种类的垃圾收集行为提供了支持")]),a._v(" "),_("li",[a._v("编译线程：这种线程在运行时会将字节码编译成本地代码")]),a._v(" "),_("li",[a._v("信号调度线程：这种线程接受信号并发送给"),_("code",[a._v("JVM")]),a._v("，在它内部通过调用适当的方法进行处理")])]),a._v(" "),_("h3",{attrs:{id:"_3-2-程序计数器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-程序计数器"}},[a._v("#")]),a._v(" 3.2 程序计数器")]),a._v(" "),_("h4",{attrs:{id:"_3-2-1-基本介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-基本介绍"}},[a._v("#")]),a._v(" 3.2.1 基本介绍")]),a._v(" "),_("p",[_("code",[a._v("JVM")]),a._v("中的程序计数寄存器"),_("code",[a._v("Program Counter Register")]),a._v("中，"),_("code",[a._v("Register")]),a._v("的命名源于"),_("code",[a._v("CPU")]),a._v("的寄存器，寄存器存储指令相关的现场信息。"),_("code",[a._v("CPU")]),a._v("只有把数据装载到寄存器才能够运行")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("注意")])])]),a._v(" "),_("p",[a._v("这里并非广义上的物理寄存器，"),_("code",[a._v("JVM")]),a._v("中的"),_("code",[a._v("PC")]),a._v("寄存器是对物理"),_("code",[a._v("PC")]),a._v("寄存器的一种抽象模拟。"),_("code",[a._v("PC")]),a._v("寄存器用来存储指向下一条指令的地址，也就是即将要执行的指令代码。由执行引擎读取下一条指令")]),a._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526193010.png"}}),a._v(" "),_("ol",[_("li",[a._v("它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域")]),a._v(" "),_("li",[a._v("在"),_("code",[a._v("JVM")]),a._v("规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致")]),a._v(" "),_("li",[a._v("任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前正在执行的"),_("code",[a._v("JVM")]),a._v("指令地址。特别地，如果是在执行"),_("code",[a._v("navtive")]),a._v("方法，则是未指定值"),_("code",[a._v("undefined")])]),a._v(" "),_("li",[a._v("它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成")]),a._v(" "),_("li",[a._v("字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令")]),a._v(" "),_("li",[a._v("它是唯一一个在"),_("code",[a._v("Java")]),a._v("虚拟机规范中没有规定任何"),_("code",[a._v("OutOtMemoryError")]),a._v("情况的区域")])]),a._v(" "),_("h4",{attrs:{id:"_3-2-2-实例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-实例"}},[a._v("#")]),a._v(" 3.2.2 实例")]),a._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" k "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" j"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v(" 0: bipush        10\n 2: istore_1\n 3: bipush        20\n 5: istore_2\n 6: iload_1\n 7: iload_2\n 8: iadd\n 9: istore_3\n 10: return\n")])])]),_("h4",{attrs:{id:"_3-2-3-常见问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-常见问题"}},[a._v("#")]),a._v(" 3.2.3 常见问题")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("使用"),_("code",[a._v("PC")]),a._v("寄存器存储字节码指令地址有什么用？")]),a._v(" "),_("p",[a._v("因为"),_("code",[a._v("CPU")]),a._v("需要不停的切换各个线程，这时候切换回来以后，就需要知道接着从哪开始继续执行")]),a._v(" "),_("p",[_("code",[a._v("JVM")]),a._v("的字节码解释器就需要通过改变"),_("code",[a._v("PC")]),a._v("寄存器的值来明确下一条应该执行什么样的字节码指令")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("PC")]),a._v("寄存器为什么被设定为线程私有的?")]),a._v(" "),_("p",[a._v("我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，"),_("code",[a._v("CPU")]),a._v("会不停地做任务切换，这样必然导致经常中断或者恢复。为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法就是为每一个线程都分配一个"),_("code",[a._v("PC")]),a._v("寄存器，这样依赖各个线程之间便可以进行独立计算，而不会出现相互干扰的情况")]),a._v(" "),_("p",[a._v("由于"),_("code",[a._v("CPU")]),a._v("时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。这样必然导致经常中断或恢复，所以每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响")])])]),a._v(" "),_("h2",{attrs:{id:"_4-虚拟机栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚拟机栈"}},[a._v("#")]),a._v(" 4. 虚拟机栈")]),a._v(" "),_("p",[a._v("由于跨平台性的设计，"),_("code",[a._v("Java")]),a._v("的指令都是根据栈来设计的。不同平台"),_("code",[a._v("CPU")]),a._v("架构不同，所以不能设计为基于寄存器的")]),a._v(" "),_("p",[a._v("优点：跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要执行更多的指令")]),a._v(" "),_("h3",{attrs:{id:"_4-1-基本介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基本介绍"}},[a._v("#")]),a._v(" 4.1 基本介绍")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("java虚拟栈")])])]),a._v(" "),_("p",[_("code",[a._v("Java")]),a._v("虚拟机栈"),_("code",[a._v("Java Virtual Machine Stack")]),a._v("，早期也叫"),_("code",[a._v("Java")]),a._v("栈。每个线程在创建时都会创建一个虚拟机栈(即线程私有)，其内部保存一个个的栈帧"),_("code",[a._v("Stack Frame")]),a._v("，对应着一次次的"),_("code",[a._v("Java")]),a._v("方法调用。")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("生命周期")])])]),a._v(" "),_("p",[a._v("生命周期和线程一致")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("作用")])])]),a._v(" "),_("p",[a._v("主管"),_("code",[a._v("Java")]),a._v("程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回")]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("优点")])])]),a._v(" "),_("ol",[_("li",[_("p",[a._v("栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器")])]),a._v(" "),_("li",[_("p",[_("code",[a._v("JVM")]),a._v("直接对"),_("code",[a._v("Java")]),a._v("栈的操作只有两个：")]),a._v(" "),_("p",[a._v("每个方法执行，伴随着进栈(入栈、压栈)")]),a._v(" "),_("p",[a._v("执行结束后的出栈工作")])]),a._v(" "),_("li",[_("p",[a._v("不存在垃圾回收问题")])])]),a._v(" "),_("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://gitee.com/dingwanli/picture/raw/master/20210526203440.png"}}),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("栈溢出")])])]),a._v(" "),_("p",[_("code",[a._v("Java")]),a._v("虚拟机规范允许"),_("code",[a._v("Java")]),a._v("栈的大小是动态的或者是固定不变的")]),a._v(" "),_("ol",[_("li",[a._v("如果采用固定大小的"),_("code",[a._v("Java")]),a._v("虚拟机栈，那每一个线程的"),_("code",[a._v("Java")]),a._v("虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过"),_("code",[a._v("Java")]),a._v("虚拟机栈允许的最大容量，"),_("code",[a._v("Java")]),a._v("虚拟机唱会抛出一个"),_("code",[a._v("StackOverflowError")]),a._v("异常")]),a._v(" "),_("li",[a._v("如果"),_("code",[a._v("Java")]),a._v("虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那"),_("code",[a._v("Java")]),a._v("虚拟机将会抛出一个"),_("code",[a._v("OutOfMemoryError")]),a._v("异常")])]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("设置栈的大小")])])]),a._v(" "),_("p",[a._v("可以使用参数-Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度")]),a._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[a._v("-Xss256K // KB\n-Xss256M // MB\n-Xss256G // GB\n")])])]),_("h3",{attrs:{id:"_4-2-栈的存储单位"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-栈的存储单位"}},[a._v("#")]),a._v(" 4.2 栈的存储单位")]),a._v(" "),_("ol",[_("li",[a._v("每个线程都有自己的栈，栈中的数据都是以栈帧"),_("code",[a._v("Stack Frame")]),a._v("的格式存在")]),a._v(" "),_("li",[a._v("在这个线程上正在执行的每个方法都各自对应一个栈帧"),_("code",[a._v("Stack Frame")])]),a._v(" "),_("li",[a._v("栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息")]),a._v(" "),_("li",[a._v("在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧。即只有当前正在执行的方法的栈帧(栈顶栈帧)是有效的，这个栈帧被称为当前栈帧"),_("code",[a._v("Current Frame")]),a._v("，与当前栈帧相对应的方法就是当前方法"),_("code",[a._v("Current Method")]),a._v("，定义这个方法的类就是当前类"),_("code",[a._v("Current Class")])]),a._v(" "),_("li",[a._v("执行引擎运行的所有字节码指令只针对当前栈帧进行操作")]),a._v(" "),_("li",[a._v("如果改方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧")])]),a._v(" "),_("blockquote",[_("p",[_("strong",[a._v("运行原理")])])]),a._v(" "),_("ol",[_("li",[a._v("不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧")]),a._v(" "),_("li",[a._v("如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机栈会丢弃当前栈帧，使得前一个栈帧重新称为当前栈帧")]),a._v(" "),_("li",[_("code",[a._v("Java")]),a._v("方法有两种返回函数的方式，一种是正常的函数返回，使用"),_("code",[a._v("return")]),a._v("指令，另外一种抛出异常。不管使用哪种方式，都会导致栈帧被弹出")])]),a._v(" "),_("h3",{attrs:{id:"_4-3-栈帧的内部结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-栈帧的内部结构"}},[a._v("#")]),a._v(" 4.3 栈帧的内部结构")]),a._v(" "),_("ol",[_("li",[a._v("局部变量表"),_("code",[a._v("Local Variables")])]),a._v(" "),_("li",[a._v("操作数栈"),_("code",[a._v("Operand Stack")]),a._v("(表达式栈)")]),a._v(" "),_("li",[a._v("动态链接"),_("code",[a._v("Dynamic Linking")]),a._v("(或指向运行时常量池的方法引用)")]),a._v(" "),_("li",[a._v("方法返回地址"),_("code",[a._v("Return Address")]),a._v("(或方法正常退出或者异常退出的定义)")])]),a._v(" "),_("h4",{attrs:{id:"_4-3-1-局部变量表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-局部变量表"}},[a._v("#")]),a._v(" 4.3.1 局部变量表")]),a._v(" "),_("ol",[_("li",[a._v("局部变量表也称为局部变量数组或本地变量表")]),a._v(" "),_("li",[a._v("定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型、对象引用"),_("code",[a._v("reference")]),a._v("，以及"),_("code",[a._v("returnAddress")]),a._v("类型")]),a._v(" "),_("li",[a._v("由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题")]),a._v(" "),_("li",[a._v("局部变量表所需的容量大小是编译期确定下来的，并保存在方法的"),_("code",[a._v("Code")]),a._v("属性的"),_("code",[a._v("maximum local variables")]),a._v("数据项中。在方法运行期间是不会改变局部变量表的大小的")])])],1)}),[],!1,null,null,null);"function"==typeof t&&t(e);v.default=e.exports}}]);